
Irrigador_Smart_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc4  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007524  08007524  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007524  08007524  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007524  08007524  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800752c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200000f8  08007620  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007620  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bd4  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a29  00000000  00000000  00043cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00017893  00000000  00000000  00049719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  00060fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f68  00000000  00000000  00062490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013832  00000000  00000000  000643f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022551  00000000  00000000  00077c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b5a9  00000000  00000000  0009a17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00105724  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004478  00000000  00000000  00105774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006948 	.word	0x08006948

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	08006948 	.word	0x08006948

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_llsr>:
 800041c:	40d0      	lsrs	r0, r2
 800041e:	000b      	movs	r3, r1
 8000420:	40d1      	lsrs	r1, r2
 8000422:	469c      	mov	ip, r3
 8000424:	3a20      	subs	r2, #32
 8000426:	40d3      	lsrs	r3, r2
 8000428:	4318      	orrs	r0, r3
 800042a:	4252      	negs	r2, r2
 800042c:	4663      	mov	r3, ip
 800042e:	4093      	lsls	r3, r2
 8000430:	4318      	orrs	r0, r3
 8000432:	4770      	bx	lr

08000434 <__aeabi_cfrcmple>:
 8000434:	4684      	mov	ip, r0
 8000436:	0008      	movs	r0, r1
 8000438:	4661      	mov	r1, ip
 800043a:	e7ff      	b.n	800043c <__aeabi_cfcmpeq>

0800043c <__aeabi_cfcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 fb6d 	bl	8000b1c <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cfcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_fcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 faf9 	bl	8000a44 <__eqsf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_fcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fb5f 	bl	8000b1c <__lesf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_fcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_fcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fb55 	bl	8000b1c <__lesf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_fcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_fcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fb05 	bl	8000a90 <__gesf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_fcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_fcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fafb 	bl	8000a90 <__gesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_fcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f7ff fff0 	bl	8000494 <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fe47 	bl	800114c <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fc93 	bl	8000df0 <__aeabi_fsub>
 80004ca:	f000 fe3f 	bl	800114c <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fadd>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	46c6      	mov	lr, r8
 80004dc:	0243      	lsls	r3, r0, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	024e      	lsls	r6, r1, #9
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	004f      	lsls	r7, r1, #1
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	0fc4      	lsrs	r4, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0a70      	lsrs	r0, r6, #9
 80004ee:	4690      	mov	r8, r2
 80004f0:	b500      	push	{lr}
 80004f2:	0e2d      	lsrs	r5, r5, #24
 80004f4:	0e3f      	lsrs	r7, r7, #24
 80004f6:	0fc9      	lsrs	r1, r1, #31
 80004f8:	09b6      	lsrs	r6, r6, #6
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d04b      	beq.n	8000596 <__aeabi_fadd+0xbe>
 80004fe:	1bea      	subs	r2, r5, r7
 8000500:	2a00      	cmp	r2, #0
 8000502:	dd36      	ble.n	8000572 <__aeabi_fadd+0x9a>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d061      	beq.n	80005cc <__aeabi_fadd+0xf4>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x36>
 800050c:	e0ad      	b.n	800066a <__aeabi_fadd+0x192>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	04db      	lsls	r3, r3, #19
 8000512:	431e      	orrs	r6, r3
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x42>
 8000518:	e0d3      	b.n	80006c2 <__aeabi_fadd+0x1ea>
 800051a:	2001      	movs	r0, #1
 800051c:	4643      	mov	r3, r8
 800051e:	1a18      	subs	r0, r3, r0
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x4e>
 8000524:	e08c      	b.n	8000640 <__aeabi_fadd+0x168>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0987      	lsrs	r7, r0, #6
 800052a:	0038      	movs	r0, r7
 800052c:	f001 fca2 	bl	8001e74 <__clzsi2>
 8000530:	3805      	subs	r0, #5
 8000532:	4087      	lsls	r7, r0
 8000534:	4285      	cmp	r5, r0
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x62>
 8000538:	e0b6      	b.n	80006a8 <__aeabi_fadd+0x1d0>
 800053a:	1a2d      	subs	r5, r5, r0
 800053c:	48b3      	ldr	r0, [pc, #716]	; (800080c <__aeabi_fadd+0x334>)
 800053e:	4038      	ands	r0, r7
 8000540:	0743      	lsls	r3, r0, #29
 8000542:	d004      	beq.n	800054e <__aeabi_fadd+0x76>
 8000544:	230f      	movs	r3, #15
 8000546:	4003      	ands	r3, r0
 8000548:	2b04      	cmp	r3, #4
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x76>
 800054c:	3004      	adds	r0, #4
 800054e:	0143      	lsls	r3, r0, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0x7c>
 8000552:	e078      	b.n	8000646 <__aeabi_fadd+0x16e>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	; 0xfe
 8000558:	d065      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800055a:	0180      	lsls	r0, r0, #6
 800055c:	0a43      	lsrs	r3, r0, #9
 800055e:	469c      	mov	ip, r3
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	05d0      	lsls	r0, r2, #23
 8000566:	4318      	orrs	r0, r3
 8000568:	07e4      	lsls	r4, r4, #31
 800056a:	4320      	orrs	r0, r4
 800056c:	bc80      	pop	{r7}
 800056e:	46b8      	mov	r8, r7
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2a00      	cmp	r2, #0
 8000574:	d035      	beq.n	80005e2 <__aeabi_fadd+0x10a>
 8000576:	1b7a      	subs	r2, r7, r5
 8000578:	2d00      	cmp	r5, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xa6>
 800057c:	e0af      	b.n	80006de <__aeabi_fadd+0x206>
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xae>
 8000584:	e0a7      	b.n	80006d6 <__aeabi_fadd+0x1fe>
 8000586:	1e53      	subs	r3, r2, #1
 8000588:	2a01      	cmp	r2, #1
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0xb6>
 800058c:	e12f      	b.n	80007ee <__aeabi_fadd+0x316>
 800058e:	2aff      	cmp	r2, #255	; 0xff
 8000590:	d069      	beq.n	8000666 <__aeabi_fadd+0x18e>
 8000592:	001a      	movs	r2, r3
 8000594:	e0aa      	b.n	80006ec <__aeabi_fadd+0x214>
 8000596:	1be9      	subs	r1, r5, r7
 8000598:	2900      	cmp	r1, #0
 800059a:	dd70      	ble.n	800067e <__aeabi_fadd+0x1a6>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d037      	beq.n	8000610 <__aeabi_fadd+0x138>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d062      	beq.n	800066a <__aeabi_fadd+0x192>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	04db      	lsls	r3, r3, #19
 80005a8:	431e      	orrs	r6, r3
 80005aa:	291b      	cmp	r1, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xd8>
 80005ae:	e0b0      	b.n	8000712 <__aeabi_fadd+0x23a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4440      	add	r0, r8
 80005b4:	0143      	lsls	r3, r0, #5
 80005b6:	d543      	bpl.n	8000640 <__aeabi_fadd+0x168>
 80005b8:	3501      	adds	r5, #1
 80005ba:	2dff      	cmp	r5, #255	; 0xff
 80005bc:	d033      	beq.n	8000626 <__aeabi_fadd+0x14e>
 80005be:	2301      	movs	r3, #1
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_fadd+0x338>)
 80005c2:	4003      	ands	r3, r0
 80005c4:	0840      	lsrs	r0, r0, #1
 80005c6:	4010      	ands	r0, r2
 80005c8:	4318      	orrs	r0, r3
 80005ca:	e7b9      	b.n	8000540 <__aeabi_fadd+0x68>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xfa>
 80005d0:	e083      	b.n	80006da <__aeabi_fadd+0x202>
 80005d2:	1e51      	subs	r1, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x102>
 80005d8:	e0d8      	b.n	800078c <__aeabi_fadd+0x2b4>
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d045      	beq.n	800066a <__aeabi_fadd+0x192>
 80005de:	000a      	movs	r2, r1
 80005e0:	e798      	b.n	8000514 <__aeabi_fadd+0x3c>
 80005e2:	27fe      	movs	r7, #254	; 0xfe
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	4217      	tst	r7, r2
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x114>
 80005ea:	e086      	b.n	80006fa <__aeabi_fadd+0x222>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x11a>
 80005f0:	e0b7      	b.n	8000762 <__aeabi_fadd+0x28a>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x122>
 80005f8:	e0f3      	b.n	80007e2 <__aeabi_fadd+0x30a>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d0b0      	beq.n	8000562 <__aeabi_fadd+0x8a>
 8000600:	1b98      	subs	r0, r3, r6
 8000602:	0143      	lsls	r3, r0, #5
 8000604:	d400      	bmi.n	8000608 <__aeabi_fadd+0x130>
 8000606:	e0fa      	b.n	80007fe <__aeabi_fadd+0x326>
 8000608:	4643      	mov	r3, r8
 800060a:	000c      	movs	r4, r1
 800060c:	1af0      	subs	r0, r6, r3
 800060e:	e797      	b.n	8000540 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x13e>
 8000614:	e0c8      	b.n	80007a8 <__aeabi_fadd+0x2d0>
 8000616:	1e4a      	subs	r2, r1, #1
 8000618:	2901      	cmp	r1, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x146>
 800061c:	e0ae      	b.n	800077c <__aeabi_fadd+0x2a4>
 800061e:	29ff      	cmp	r1, #255	; 0xff
 8000620:	d023      	beq.n	800066a <__aeabi_fadd+0x192>
 8000622:	0011      	movs	r1, r2
 8000624:	e7c1      	b.n	80005aa <__aeabi_fadd+0xd2>
 8000626:	2300      	movs	r3, #0
 8000628:	22ff      	movs	r2, #255	; 0xff
 800062a:	469c      	mov	ip, r3
 800062c:	e799      	b.n	8000562 <__aeabi_fadd+0x8a>
 800062e:	21fe      	movs	r1, #254	; 0xfe
 8000630:	1c6a      	adds	r2, r5, #1
 8000632:	4211      	tst	r1, r2
 8000634:	d077      	beq.n	8000726 <__aeabi_fadd+0x24e>
 8000636:	2aff      	cmp	r2, #255	; 0xff
 8000638:	d0f5      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800063a:	0015      	movs	r5, r2
 800063c:	4446      	add	r6, r8
 800063e:	0870      	lsrs	r0, r6, #1
 8000640:	0743      	lsls	r3, r0, #29
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x16e>
 8000644:	e77e      	b.n	8000544 <__aeabi_fadd+0x6c>
 8000646:	08c3      	lsrs	r3, r0, #3
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d00e      	beq.n	800066a <__aeabi_fadd+0x192>
 800064c:	025b      	lsls	r3, r3, #9
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	469c      	mov	ip, r3
 8000652:	b2ea      	uxtb	r2, r5
 8000654:	e785      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d007      	beq.n	800066a <__aeabi_fadd+0x192>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	03d2      	lsls	r2, r2, #15
 800065e:	4213      	tst	r3, r2
 8000660:	d003      	beq.n	800066a <__aeabi_fadd+0x192>
 8000662:	4210      	tst	r0, r2
 8000664:	d101      	bne.n	800066a <__aeabi_fadd+0x192>
 8000666:	000c      	movs	r4, r1
 8000668:	0003      	movs	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0db      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4318      	orrs	r0, r3
 8000674:	0240      	lsls	r0, r0, #9
 8000676:	0a43      	lsrs	r3, r0, #9
 8000678:	469c      	mov	ip, r3
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	e771      	b.n	8000562 <__aeabi_fadd+0x8a>
 800067e:	2900      	cmp	r1, #0
 8000680:	d0d5      	beq.n	800062e <__aeabi_fadd+0x156>
 8000682:	1b7a      	subs	r2, r7, r5
 8000684:	2d00      	cmp	r5, #0
 8000686:	d160      	bne.n	800074a <__aeabi_fadd+0x272>
 8000688:	4643      	mov	r3, r8
 800068a:	2b00      	cmp	r3, #0
 800068c:	d024      	beq.n	80006d8 <__aeabi_fadd+0x200>
 800068e:	1e53      	subs	r3, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d073      	beq.n	800077c <__aeabi_fadd+0x2a4>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0e7      	beq.n	8000668 <__aeabi_fadd+0x190>
 8000698:	001a      	movs	r2, r3
 800069a:	2a1b      	cmp	r2, #27
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_fadd+0x1c8>
 800069e:	e085      	b.n	80007ac <__aeabi_fadd+0x2d4>
 80006a0:	2001      	movs	r0, #1
 80006a2:	003d      	movs	r5, r7
 80006a4:	1980      	adds	r0, r0, r6
 80006a6:	e785      	b.n	80005b4 <__aeabi_fadd+0xdc>
 80006a8:	2320      	movs	r3, #32
 80006aa:	003a      	movs	r2, r7
 80006ac:	1b45      	subs	r5, r0, r5
 80006ae:	0038      	movs	r0, r7
 80006b0:	3501      	adds	r5, #1
 80006b2:	40ea      	lsrs	r2, r5
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	40a8      	lsls	r0, r5
 80006b8:	1e43      	subs	r3, r0, #1
 80006ba:	4198      	sbcs	r0, r3
 80006bc:	2500      	movs	r5, #0
 80006be:	4310      	orrs	r0, r2
 80006c0:	e73e      	b.n	8000540 <__aeabi_fadd+0x68>
 80006c2:	2320      	movs	r3, #32
 80006c4:	0030      	movs	r0, r6
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	0031      	movs	r1, r6
 80006ca:	4098      	lsls	r0, r3
 80006cc:	40d1      	lsrs	r1, r2
 80006ce:	1e43      	subs	r3, r0, #1
 80006d0:	4198      	sbcs	r0, r3
 80006d2:	4308      	orrs	r0, r1
 80006d4:	e722      	b.n	800051c <__aeabi_fadd+0x44>
 80006d6:	000c      	movs	r4, r1
 80006d8:	0003      	movs	r3, r0
 80006da:	0015      	movs	r5, r2
 80006dc:	e7b4      	b.n	8000648 <__aeabi_fadd+0x170>
 80006de:	2fff      	cmp	r7, #255	; 0xff
 80006e0:	d0c1      	beq.n	8000666 <__aeabi_fadd+0x18e>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	4640      	mov	r0, r8
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4318      	orrs	r0, r3
 80006ea:	4680      	mov	r8, r0
 80006ec:	2a1b      	cmp	r2, #27
 80006ee:	dd51      	ble.n	8000794 <__aeabi_fadd+0x2bc>
 80006f0:	2001      	movs	r0, #1
 80006f2:	000c      	movs	r4, r1
 80006f4:	003d      	movs	r5, r7
 80006f6:	1a30      	subs	r0, r6, r0
 80006f8:	e712      	b.n	8000520 <__aeabi_fadd+0x48>
 80006fa:	4643      	mov	r3, r8
 80006fc:	1b9f      	subs	r7, r3, r6
 80006fe:	017b      	lsls	r3, r7, #5
 8000700:	d42b      	bmi.n	800075a <__aeabi_fadd+0x282>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x230>
 8000706:	e710      	b.n	800052a <__aeabi_fadd+0x52>
 8000708:	2300      	movs	r3, #0
 800070a:	2400      	movs	r4, #0
 800070c:	2200      	movs	r2, #0
 800070e:	469c      	mov	ip, r3
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000712:	2320      	movs	r3, #32
 8000714:	0032      	movs	r2, r6
 8000716:	0030      	movs	r0, r6
 8000718:	40ca      	lsrs	r2, r1
 800071a:	1a59      	subs	r1, r3, r1
 800071c:	4088      	lsls	r0, r1
 800071e:	1e43      	subs	r3, r0, #1
 8000720:	4198      	sbcs	r0, r3
 8000722:	4310      	orrs	r0, r2
 8000724:	e745      	b.n	80005b2 <__aeabi_fadd+0xda>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d14a      	bne.n	80007c0 <__aeabi_fadd+0x2e8>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d063      	beq.n	80007f8 <__aeabi_fadd+0x320>
 8000730:	2200      	movs	r2, #0
 8000732:	2e00      	cmp	r6, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x260>
 8000736:	e714      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000738:	0030      	movs	r0, r6
 800073a:	4440      	add	r0, r8
 800073c:	0143      	lsls	r3, r0, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fadd+0x26a>
 8000740:	e77e      	b.n	8000640 <__aeabi_fadd+0x168>
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <__aeabi_fadd+0x334>)
 8000744:	3501      	adds	r5, #1
 8000746:	4018      	ands	r0, r3
 8000748:	e77a      	b.n	8000640 <__aeabi_fadd+0x168>
 800074a:	2fff      	cmp	r7, #255	; 0xff
 800074c:	d08c      	beq.n	8000668 <__aeabi_fadd+0x190>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	4641      	mov	r1, r8
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	4319      	orrs	r1, r3
 8000756:	4688      	mov	r8, r1
 8000758:	e79f      	b.n	800069a <__aeabi_fadd+0x1c2>
 800075a:	4643      	mov	r3, r8
 800075c:	000c      	movs	r4, r1
 800075e:	1af7      	subs	r7, r6, r3
 8000760:	e6e3      	b.n	800052a <__aeabi_fadd+0x52>
 8000762:	4642      	mov	r2, r8
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x292>
 8000768:	e775      	b.n	8000656 <__aeabi_fadd+0x17e>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x298>
 800076e:	e77a      	b.n	8000666 <__aeabi_fadd+0x18e>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	2400      	movs	r4, #0
 8000776:	469c      	mov	ip, r3
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	e6f2      	b.n	8000562 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	2501      	movs	r5, #1
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x2b0>
 8000786:	e75b      	b.n	8000640 <__aeabi_fadd+0x168>
 8000788:	2502      	movs	r5, #2
 800078a:	e718      	b.n	80005be <__aeabi_fadd+0xe6>
 800078c:	4643      	mov	r3, r8
 800078e:	2501      	movs	r5, #1
 8000790:	1b98      	subs	r0, r3, r6
 8000792:	e6c5      	b.n	8000520 <__aeabi_fadd+0x48>
 8000794:	2320      	movs	r3, #32
 8000796:	4644      	mov	r4, r8
 8000798:	4640      	mov	r0, r8
 800079a:	40d4      	lsrs	r4, r2
 800079c:	1a9a      	subs	r2, r3, r2
 800079e:	4090      	lsls	r0, r2
 80007a0:	1e43      	subs	r3, r0, #1
 80007a2:	4198      	sbcs	r0, r3
 80007a4:	4320      	orrs	r0, r4
 80007a6:	e7a4      	b.n	80006f2 <__aeabi_fadd+0x21a>
 80007a8:	000d      	movs	r5, r1
 80007aa:	e74d      	b.n	8000648 <__aeabi_fadd+0x170>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4641      	mov	r1, r8
 80007b0:	4640      	mov	r0, r8
 80007b2:	40d1      	lsrs	r1, r2
 80007b4:	1a9a      	subs	r2, r3, r2
 80007b6:	4090      	lsls	r0, r2
 80007b8:	1e43      	subs	r3, r0, #1
 80007ba:	4198      	sbcs	r0, r3
 80007bc:	4308      	orrs	r0, r1
 80007be:	e770      	b.n	80006a2 <__aeabi_fadd+0x1ca>
 80007c0:	4642      	mov	r2, r8
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x2f0>
 80007c6:	e74f      	b.n	8000668 <__aeabi_fadd+0x190>
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2f6>
 80007cc:	e74d      	b.n	800066a <__aeabi_fadd+0x192>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	03d2      	lsls	r2, r2, #15
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x300>
 80007d6:	e748      	b.n	800066a <__aeabi_fadd+0x192>
 80007d8:	4210      	tst	r0, r2
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x306>
 80007dc:	e745      	b.n	800066a <__aeabi_fadd+0x192>
 80007de:	0003      	movs	r3, r0
 80007e0:	e743      	b.n	800066a <__aeabi_fadd+0x192>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d090      	beq.n	8000708 <__aeabi_fadd+0x230>
 80007e6:	000c      	movs	r4, r1
 80007e8:	4684      	mov	ip, r0
 80007ea:	2200      	movs	r2, #0
 80007ec:	e6b9      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007ee:	4643      	mov	r3, r8
 80007f0:	000c      	movs	r4, r1
 80007f2:	1af0      	subs	r0, r6, r3
 80007f4:	3501      	adds	r5, #1
 80007f6:	e693      	b.n	8000520 <__aeabi_fadd+0x48>
 80007f8:	4684      	mov	ip, r0
 80007fa:	2200      	movs	r2, #0
 80007fc:	e6b1      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x32c>
 8000802:	e71d      	b.n	8000640 <__aeabi_fadd+0x168>
 8000804:	2300      	movs	r3, #0
 8000806:	2400      	movs	r4, #0
 8000808:	469c      	mov	ip, r3
 800080a:	e6aa      	b.n	8000562 <__aeabi_fadd+0x8a>
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_fdiv>:
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	464f      	mov	r7, r9
 8000818:	4646      	mov	r6, r8
 800081a:	46d6      	mov	lr, sl
 800081c:	0245      	lsls	r5, r0, #9
 800081e:	b5c0      	push	{r6, r7, lr}
 8000820:	0047      	lsls	r7, r0, #1
 8000822:	1c0c      	adds	r4, r1, #0
 8000824:	0a6d      	lsrs	r5, r5, #9
 8000826:	0e3f      	lsrs	r7, r7, #24
 8000828:	0fc6      	lsrs	r6, r0, #31
 800082a:	2f00      	cmp	r7, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fdiv+0x1c>
 800082e:	e070      	b.n	8000912 <__aeabi_fdiv+0xfe>
 8000830:	2fff      	cmp	r7, #255	; 0xff
 8000832:	d100      	bne.n	8000836 <__aeabi_fdiv+0x22>
 8000834:	e075      	b.n	8000922 <__aeabi_fdiv+0x10e>
 8000836:	00eb      	lsls	r3, r5, #3
 8000838:	2580      	movs	r5, #128	; 0x80
 800083a:	04ed      	lsls	r5, r5, #19
 800083c:	431d      	orrs	r5, r3
 800083e:	2300      	movs	r3, #0
 8000840:	4699      	mov	r9, r3
 8000842:	469a      	mov	sl, r3
 8000844:	3f7f      	subs	r7, #127	; 0x7f
 8000846:	0260      	lsls	r0, r4, #9
 8000848:	0a43      	lsrs	r3, r0, #9
 800084a:	4698      	mov	r8, r3
 800084c:	0063      	lsls	r3, r4, #1
 800084e:	0e1b      	lsrs	r3, r3, #24
 8000850:	0fe4      	lsrs	r4, r4, #31
 8000852:	2b00      	cmp	r3, #0
 8000854:	d04e      	beq.n	80008f4 <__aeabi_fdiv+0xe0>
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d046      	beq.n	80008e8 <__aeabi_fdiv+0xd4>
 800085a:	4642      	mov	r2, r8
 800085c:	00d0      	lsls	r0, r2, #3
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	04d2      	lsls	r2, r2, #19
 8000862:	4302      	orrs	r2, r0
 8000864:	4690      	mov	r8, r2
 8000866:	2200      	movs	r2, #0
 8000868:	3b7f      	subs	r3, #127	; 0x7f
 800086a:	0031      	movs	r1, r6
 800086c:	1aff      	subs	r7, r7, r3
 800086e:	464b      	mov	r3, r9
 8000870:	4061      	eors	r1, r4
 8000872:	b2c9      	uxtb	r1, r1
 8000874:	4313      	orrs	r3, r2
 8000876:	2b0f      	cmp	r3, #15
 8000878:	d900      	bls.n	800087c <__aeabi_fdiv+0x68>
 800087a:	e0b5      	b.n	80009e8 <__aeabi_fdiv+0x1d4>
 800087c:	486e      	ldr	r0, [pc, #440]	; (8000a38 <__aeabi_fdiv+0x224>)
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	58c3      	ldr	r3, [r0, r3]
 8000882:	469f      	mov	pc, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4698      	mov	r8, r3
 8000888:	0026      	movs	r6, r4
 800088a:	4645      	mov	r5, r8
 800088c:	4692      	mov	sl, r2
 800088e:	4653      	mov	r3, sl
 8000890:	2b02      	cmp	r3, #2
 8000892:	d100      	bne.n	8000896 <__aeabi_fdiv+0x82>
 8000894:	e089      	b.n	80009aa <__aeabi_fdiv+0x196>
 8000896:	2b03      	cmp	r3, #3
 8000898:	d100      	bne.n	800089c <__aeabi_fdiv+0x88>
 800089a:	e09e      	b.n	80009da <__aeabi_fdiv+0x1c6>
 800089c:	2b01      	cmp	r3, #1
 800089e:	d018      	beq.n	80008d2 <__aeabi_fdiv+0xbe>
 80008a0:	003b      	movs	r3, r7
 80008a2:	337f      	adds	r3, #127	; 0x7f
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dd69      	ble.n	800097c <__aeabi_fdiv+0x168>
 80008a8:	076a      	lsls	r2, r5, #29
 80008aa:	d004      	beq.n	80008b6 <__aeabi_fdiv+0xa2>
 80008ac:	220f      	movs	r2, #15
 80008ae:	402a      	ands	r2, r5
 80008b0:	2a04      	cmp	r2, #4
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fdiv+0xa2>
 80008b4:	3504      	adds	r5, #4
 80008b6:	012a      	lsls	r2, r5, #4
 80008b8:	d503      	bpl.n	80008c2 <__aeabi_fdiv+0xae>
 80008ba:	4b60      	ldr	r3, [pc, #384]	; (8000a3c <__aeabi_fdiv+0x228>)
 80008bc:	401d      	ands	r5, r3
 80008be:	003b      	movs	r3, r7
 80008c0:	3380      	adds	r3, #128	; 0x80
 80008c2:	2bfe      	cmp	r3, #254	; 0xfe
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_fdiv+0xb4>
 80008c6:	e070      	b.n	80009aa <__aeabi_fdiv+0x196>
 80008c8:	01ad      	lsls	r5, r5, #6
 80008ca:	0a6d      	lsrs	r5, r5, #9
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	e002      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80008d0:	000e      	movs	r6, r1
 80008d2:	2000      	movs	r0, #0
 80008d4:	2500      	movs	r5, #0
 80008d6:	05c0      	lsls	r0, r0, #23
 80008d8:	4328      	orrs	r0, r5
 80008da:	07f6      	lsls	r6, r6, #31
 80008dc:	4330      	orrs	r0, r6
 80008de:	bce0      	pop	{r5, r6, r7}
 80008e0:	46ba      	mov	sl, r7
 80008e2:	46b1      	mov	r9, r6
 80008e4:	46a8      	mov	r8, r5
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	4643      	mov	r3, r8
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d13f      	bne.n	800096e <__aeabi_fdiv+0x15a>
 80008ee:	2202      	movs	r2, #2
 80008f0:	3fff      	subs	r7, #255	; 0xff
 80008f2:	e003      	b.n	80008fc <__aeabi_fdiv+0xe8>
 80008f4:	4643      	mov	r3, r8
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d12d      	bne.n	8000956 <__aeabi_fdiv+0x142>
 80008fa:	2201      	movs	r2, #1
 80008fc:	0031      	movs	r1, r6
 80008fe:	464b      	mov	r3, r9
 8000900:	4061      	eors	r1, r4
 8000902:	b2c9      	uxtb	r1, r1
 8000904:	4313      	orrs	r3, r2
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d834      	bhi.n	8000974 <__aeabi_fdiv+0x160>
 800090a:	484d      	ldr	r0, [pc, #308]	; (8000a40 <__aeabi_fdiv+0x22c>)
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	58c3      	ldr	r3, [r0, r3]
 8000910:	469f      	mov	pc, r3
 8000912:	2d00      	cmp	r5, #0
 8000914:	d113      	bne.n	800093e <__aeabi_fdiv+0x12a>
 8000916:	2304      	movs	r3, #4
 8000918:	4699      	mov	r9, r3
 800091a:	3b03      	subs	r3, #3
 800091c:	2700      	movs	r7, #0
 800091e:	469a      	mov	sl, r3
 8000920:	e791      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d105      	bne.n	8000932 <__aeabi_fdiv+0x11e>
 8000926:	2308      	movs	r3, #8
 8000928:	4699      	mov	r9, r3
 800092a:	3b06      	subs	r3, #6
 800092c:	27ff      	movs	r7, #255	; 0xff
 800092e:	469a      	mov	sl, r3
 8000930:	e789      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000932:	230c      	movs	r3, #12
 8000934:	4699      	mov	r9, r3
 8000936:	3b09      	subs	r3, #9
 8000938:	27ff      	movs	r7, #255	; 0xff
 800093a:	469a      	mov	sl, r3
 800093c:	e783      	b.n	8000846 <__aeabi_fdiv+0x32>
 800093e:	0028      	movs	r0, r5
 8000940:	f001 fa98 	bl	8001e74 <__clzsi2>
 8000944:	2776      	movs	r7, #118	; 0x76
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	409d      	lsls	r5, r3
 800094a:	2300      	movs	r3, #0
 800094c:	427f      	negs	r7, r7
 800094e:	4699      	mov	r9, r3
 8000950:	469a      	mov	sl, r3
 8000952:	1a3f      	subs	r7, r7, r0
 8000954:	e777      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000956:	4640      	mov	r0, r8
 8000958:	f001 fa8c 	bl	8001e74 <__clzsi2>
 800095c:	4642      	mov	r2, r8
 800095e:	1f43      	subs	r3, r0, #5
 8000960:	409a      	lsls	r2, r3
 8000962:	2376      	movs	r3, #118	; 0x76
 8000964:	425b      	negs	r3, r3
 8000966:	4690      	mov	r8, r2
 8000968:	1a1b      	subs	r3, r3, r0
 800096a:	2200      	movs	r2, #0
 800096c:	e77d      	b.n	800086a <__aeabi_fdiv+0x56>
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	2203      	movs	r2, #3
 8000972:	e77a      	b.n	800086a <__aeabi_fdiv+0x56>
 8000974:	000e      	movs	r6, r1
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2500      	movs	r5, #0
 800097a:	e7ac      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 800097c:	2001      	movs	r0, #1
 800097e:	1ac0      	subs	r0, r0, r3
 8000980:	281b      	cmp	r0, #27
 8000982:	dca6      	bgt.n	80008d2 <__aeabi_fdiv+0xbe>
 8000984:	379e      	adds	r7, #158	; 0x9e
 8000986:	002a      	movs	r2, r5
 8000988:	40bd      	lsls	r5, r7
 800098a:	40c2      	lsrs	r2, r0
 800098c:	1e6b      	subs	r3, r5, #1
 800098e:	419d      	sbcs	r5, r3
 8000990:	4315      	orrs	r5, r2
 8000992:	076b      	lsls	r3, r5, #29
 8000994:	d004      	beq.n	80009a0 <__aeabi_fdiv+0x18c>
 8000996:	230f      	movs	r3, #15
 8000998:	402b      	ands	r3, r5
 800099a:	2b04      	cmp	r3, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_fdiv+0x18c>
 800099e:	3504      	adds	r5, #4
 80009a0:	016b      	lsls	r3, r5, #5
 80009a2:	d544      	bpl.n	8000a2e <__aeabi_fdiv+0x21a>
 80009a4:	2001      	movs	r0, #1
 80009a6:	2500      	movs	r5, #0
 80009a8:	e795      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	2500      	movs	r5, #0
 80009ae:	e792      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009b0:	2580      	movs	r5, #128	; 0x80
 80009b2:	2600      	movs	r6, #0
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	03ed      	lsls	r5, r5, #15
 80009b8:	e78d      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009ba:	2300      	movs	r3, #0
 80009bc:	4698      	mov	r8, r3
 80009be:	2080      	movs	r0, #128	; 0x80
 80009c0:	03c0      	lsls	r0, r0, #15
 80009c2:	4205      	tst	r5, r0
 80009c4:	d009      	beq.n	80009da <__aeabi_fdiv+0x1c6>
 80009c6:	4643      	mov	r3, r8
 80009c8:	4203      	tst	r3, r0
 80009ca:	d106      	bne.n	80009da <__aeabi_fdiv+0x1c6>
 80009cc:	4645      	mov	r5, r8
 80009ce:	4305      	orrs	r5, r0
 80009d0:	026d      	lsls	r5, r5, #9
 80009d2:	0026      	movs	r6, r4
 80009d4:	20ff      	movs	r0, #255	; 0xff
 80009d6:	0a6d      	lsrs	r5, r5, #9
 80009d8:	e77d      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009da:	2080      	movs	r0, #128	; 0x80
 80009dc:	03c0      	lsls	r0, r0, #15
 80009de:	4305      	orrs	r5, r0
 80009e0:	026d      	lsls	r5, r5, #9
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e776      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009e8:	4642      	mov	r2, r8
 80009ea:	016b      	lsls	r3, r5, #5
 80009ec:	0150      	lsls	r0, r2, #5
 80009ee:	4283      	cmp	r3, r0
 80009f0:	d219      	bcs.n	8000a26 <__aeabi_fdiv+0x212>
 80009f2:	221b      	movs	r2, #27
 80009f4:	2500      	movs	r5, #0
 80009f6:	3f01      	subs	r7, #1
 80009f8:	2601      	movs	r6, #1
 80009fa:	001c      	movs	r4, r3
 80009fc:	006d      	lsls	r5, r5, #1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	db01      	blt.n	8000a08 <__aeabi_fdiv+0x1f4>
 8000a04:	4298      	cmp	r0, r3
 8000a06:	d801      	bhi.n	8000a0c <__aeabi_fdiv+0x1f8>
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	4335      	orrs	r5, r6
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d1f3      	bne.n	80009fa <__aeabi_fdiv+0x1e6>
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	4193      	sbcs	r3, r2
 8000a16:	431d      	orrs	r5, r3
 8000a18:	003b      	movs	r3, r7
 8000a1a:	337f      	adds	r3, #127	; 0x7f
 8000a1c:	000e      	movs	r6, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dd00      	ble.n	8000a24 <__aeabi_fdiv+0x210>
 8000a22:	e741      	b.n	80008a8 <__aeabi_fdiv+0x94>
 8000a24:	e7aa      	b.n	800097c <__aeabi_fdiv+0x168>
 8000a26:	221a      	movs	r2, #26
 8000a28:	2501      	movs	r5, #1
 8000a2a:	1a1b      	subs	r3, r3, r0
 8000a2c:	e7e4      	b.n	80009f8 <__aeabi_fdiv+0x1e4>
 8000a2e:	01ad      	lsls	r5, r5, #6
 8000a30:	2000      	movs	r0, #0
 8000a32:	0a6d      	lsrs	r5, r5, #9
 8000a34:	e74f      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	08006960 	.word	0x08006960
 8000a3c:	f7ffffff 	.word	0xf7ffffff
 8000a40:	080069a0 	.word	0x080069a0

08000a44 <__eqsf2>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	0042      	lsls	r2, r0, #1
 8000a48:	0245      	lsls	r5, r0, #9
 8000a4a:	024e      	lsls	r6, r1, #9
 8000a4c:	004c      	lsls	r4, r1, #1
 8000a4e:	0fc3      	lsrs	r3, r0, #31
 8000a50:	0a6d      	lsrs	r5, r5, #9
 8000a52:	2001      	movs	r0, #1
 8000a54:	0e12      	lsrs	r2, r2, #24
 8000a56:	0a76      	lsrs	r6, r6, #9
 8000a58:	0e24      	lsrs	r4, r4, #24
 8000a5a:	0fc9      	lsrs	r1, r1, #31
 8000a5c:	2aff      	cmp	r2, #255	; 0xff
 8000a5e:	d006      	beq.n	8000a6e <__eqsf2+0x2a>
 8000a60:	2cff      	cmp	r4, #255	; 0xff
 8000a62:	d003      	beq.n	8000a6c <__eqsf2+0x28>
 8000a64:	42a2      	cmp	r2, r4
 8000a66:	d101      	bne.n	8000a6c <__eqsf2+0x28>
 8000a68:	42b5      	cmp	r5, r6
 8000a6a:	d006      	beq.n	8000a7a <__eqsf2+0x36>
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d1fc      	bne.n	8000a6c <__eqsf2+0x28>
 8000a72:	2cff      	cmp	r4, #255	; 0xff
 8000a74:	d1fa      	bne.n	8000a6c <__eqsf2+0x28>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d1f8      	bne.n	8000a6c <__eqsf2+0x28>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d006      	beq.n	8000a8c <__eqsf2+0x48>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d1f3      	bne.n	8000a6c <__eqsf2+0x28>
 8000a84:	0028      	movs	r0, r5
 8000a86:	1e43      	subs	r3, r0, #1
 8000a88:	4198      	sbcs	r0, r3
 8000a8a:	e7ef      	b.n	8000a6c <__eqsf2+0x28>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e7ed      	b.n	8000a6c <__eqsf2+0x28>

08000a90 <__gesf2>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0042      	lsls	r2, r0, #1
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	024e      	lsls	r6, r1, #9
 8000a98:	004c      	lsls	r4, r1, #1
 8000a9a:	0fc3      	lsrs	r3, r0, #31
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	0e12      	lsrs	r2, r2, #24
 8000aa0:	0a76      	lsrs	r6, r6, #9
 8000aa2:	0e24      	lsrs	r4, r4, #24
 8000aa4:	0fc8      	lsrs	r0, r1, #31
 8000aa6:	2aff      	cmp	r2, #255	; 0xff
 8000aa8:	d01b      	beq.n	8000ae2 <__gesf2+0x52>
 8000aaa:	2cff      	cmp	r4, #255	; 0xff
 8000aac:	d00e      	beq.n	8000acc <__gesf2+0x3c>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d11b      	bne.n	8000aea <__gesf2+0x5a>
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	d101      	bne.n	8000aba <__gesf2+0x2a>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d01c      	beq.n	8000af4 <__gesf2+0x64>
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d00c      	beq.n	8000ad8 <__gesf2+0x48>
 8000abe:	4283      	cmp	r3, r0
 8000ac0:	d01c      	beq.n	8000afc <__gesf2+0x6c>
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	1e58      	subs	r0, r3, #1
 8000ac6:	4008      	ands	r0, r1
 8000ac8:	3801      	subs	r0, #1
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d122      	bne.n	8000b16 <__gesf2+0x86>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d1f4      	bne.n	8000abe <__gesf2+0x2e>
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d1f2      	bne.n	8000abe <__gesf2+0x2e>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1f6      	bne.n	8000aca <__gesf2+0x3a>
 8000adc:	2001      	movs	r0, #1
 8000ade:	4240      	negs	r0, r0
 8000ae0:	e7f3      	b.n	8000aca <__gesf2+0x3a>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d117      	bne.n	8000b16 <__gesf2+0x86>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d0f0      	beq.n	8000acc <__gesf2+0x3c>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1e7      	bne.n	8000abe <__gesf2+0x2e>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d1e5      	bne.n	8000abe <__gesf2+0x2e>
 8000af2:	e7e6      	b.n	8000ac2 <__gesf2+0x32>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e7      	beq.n	8000aca <__gesf2+0x3a>
 8000afa:	e7e2      	b.n	8000ac2 <__gesf2+0x32>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	dc05      	bgt.n	8000b0c <__gesf2+0x7c>
 8000b00:	dbea      	blt.n	8000ad8 <__gesf2+0x48>
 8000b02:	42b5      	cmp	r5, r6
 8000b04:	d802      	bhi.n	8000b0c <__gesf2+0x7c>
 8000b06:	d3e7      	bcc.n	8000ad8 <__gesf2+0x48>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7de      	b.n	8000aca <__gesf2+0x3a>
 8000b0c:	4243      	negs	r3, r0
 8000b0e:	4158      	adcs	r0, r3
 8000b10:	0040      	lsls	r0, r0, #1
 8000b12:	3801      	subs	r0, #1
 8000b14:	e7d9      	b.n	8000aca <__gesf2+0x3a>
 8000b16:	2002      	movs	r0, #2
 8000b18:	4240      	negs	r0, r0
 8000b1a:	e7d6      	b.n	8000aca <__gesf2+0x3a>

08000b1c <__lesf2>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	0042      	lsls	r2, r0, #1
 8000b20:	0245      	lsls	r5, r0, #9
 8000b22:	024e      	lsls	r6, r1, #9
 8000b24:	004c      	lsls	r4, r1, #1
 8000b26:	0fc3      	lsrs	r3, r0, #31
 8000b28:	0a6d      	lsrs	r5, r5, #9
 8000b2a:	0e12      	lsrs	r2, r2, #24
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e24      	lsrs	r4, r4, #24
 8000b30:	0fc8      	lsrs	r0, r1, #31
 8000b32:	2aff      	cmp	r2, #255	; 0xff
 8000b34:	d00b      	beq.n	8000b4e <__lesf2+0x32>
 8000b36:	2cff      	cmp	r4, #255	; 0xff
 8000b38:	d00d      	beq.n	8000b56 <__lesf2+0x3a>
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d11f      	bne.n	8000b7e <__lesf2+0x62>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d116      	bne.n	8000b70 <__lesf2+0x54>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d114      	bne.n	8000b70 <__lesf2+0x54>
 8000b46:	2000      	movs	r0, #0
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d010      	beq.n	8000b6e <__lesf2+0x52>
 8000b4c:	e009      	b.n	8000b62 <__lesf2+0x46>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d10c      	bne.n	8000b6c <__lesf2+0x50>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d113      	bne.n	8000b7e <__lesf2+0x62>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d108      	bne.n	8000b6c <__lesf2+0x50>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d008      	beq.n	8000b70 <__lesf2+0x54>
 8000b5e:	4283      	cmp	r3, r0
 8000b60:	d012      	beq.n	8000b88 <__lesf2+0x6c>
 8000b62:	2102      	movs	r1, #2
 8000b64:	1e58      	subs	r0, r3, #1
 8000b66:	4008      	ands	r0, r1
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e000      	b.n	8000b6e <__lesf2+0x52>
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d1f4      	bne.n	8000b5e <__lesf2+0x42>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1fa      	bne.n	8000b6e <__lesf2+0x52>
 8000b78:	2001      	movs	r0, #1
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	e7f7      	b.n	8000b6e <__lesf2+0x52>
 8000b7e:	2c00      	cmp	r4, #0
 8000b80:	d1ed      	bne.n	8000b5e <__lesf2+0x42>
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d1eb      	bne.n	8000b5e <__lesf2+0x42>
 8000b86:	e7ec      	b.n	8000b62 <__lesf2+0x46>
 8000b88:	42a2      	cmp	r2, r4
 8000b8a:	dc05      	bgt.n	8000b98 <__lesf2+0x7c>
 8000b8c:	dbf2      	blt.n	8000b74 <__lesf2+0x58>
 8000b8e:	42b5      	cmp	r5, r6
 8000b90:	d802      	bhi.n	8000b98 <__lesf2+0x7c>
 8000b92:	d3ef      	bcc.n	8000b74 <__lesf2+0x58>
 8000b94:	2000      	movs	r0, #0
 8000b96:	e7ea      	b.n	8000b6e <__lesf2+0x52>
 8000b98:	4243      	negs	r3, r0
 8000b9a:	4158      	adcs	r0, r3
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7e5      	b.n	8000b6e <__lesf2+0x52>
 8000ba2:	46c0      	nop			; (mov r8, r8)

08000ba4 <__aeabi_fmul>:
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	4646      	mov	r6, r8
 8000baa:	46d6      	mov	lr, sl
 8000bac:	0244      	lsls	r4, r0, #9
 8000bae:	0045      	lsls	r5, r0, #1
 8000bb0:	b5c0      	push	{r6, r7, lr}
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	1c0f      	adds	r7, r1, #0
 8000bb6:	0e2d      	lsrs	r5, r5, #24
 8000bb8:	0fc6      	lsrs	r6, r0, #31
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fmul+0x1c>
 8000bbe:	e08d      	b.n	8000cdc <__aeabi_fmul+0x138>
 8000bc0:	2dff      	cmp	r5, #255	; 0xff
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fmul+0x22>
 8000bc4:	e092      	b.n	8000cec <__aeabi_fmul+0x148>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2080      	movs	r0, #128	; 0x80
 8000bca:	4699      	mov	r9, r3
 8000bcc:	469a      	mov	sl, r3
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	04c0      	lsls	r0, r0, #19
 8000bd2:	4304      	orrs	r4, r0
 8000bd4:	3d7f      	subs	r5, #127	; 0x7f
 8000bd6:	0278      	lsls	r0, r7, #9
 8000bd8:	0a43      	lsrs	r3, r0, #9
 8000bda:	4698      	mov	r8, r3
 8000bdc:	007b      	lsls	r3, r7, #1
 8000bde:	0e1b      	lsrs	r3, r3, #24
 8000be0:	0fff      	lsrs	r7, r7, #31
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fmul+0x44>
 8000be6:	e070      	b.n	8000cca <__aeabi_fmul+0x126>
 8000be8:	2bff      	cmp	r3, #255	; 0xff
 8000bea:	d100      	bne.n	8000bee <__aeabi_fmul+0x4a>
 8000bec:	e086      	b.n	8000cfc <__aeabi_fmul+0x158>
 8000bee:	4642      	mov	r2, r8
 8000bf0:	00d0      	lsls	r0, r2, #3
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	3b7f      	subs	r3, #127	; 0x7f
 8000bf6:	18ed      	adds	r5, r5, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	04d2      	lsls	r2, r2, #19
 8000bfc:	4302      	orrs	r2, r0
 8000bfe:	4690      	mov	r8, r2
 8000c00:	469c      	mov	ip, r3
 8000c02:	0031      	movs	r1, r6
 8000c04:	464b      	mov	r3, r9
 8000c06:	4079      	eors	r1, r7
 8000c08:	1c68      	adds	r0, r5, #1
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d81c      	bhi.n	8000c48 <__aeabi_fmul+0xa4>
 8000c0e:	4a76      	ldr	r2, [pc, #472]	; (8000de8 <__aeabi_fmul+0x244>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	58d3      	ldr	r3, [r2, r3]
 8000c14:	469f      	mov	pc, r3
 8000c16:	0039      	movs	r1, r7
 8000c18:	4644      	mov	r4, r8
 8000c1a:	46e2      	mov	sl, ip
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d00f      	beq.n	8000c42 <__aeabi_fmul+0x9e>
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0x84>
 8000c26:	e0d7      	b.n	8000dd8 <__aeabi_fmul+0x234>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d137      	bne.n	8000c9c <__aeabi_fmul+0xf8>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2400      	movs	r4, #0
 8000c30:	05c0      	lsls	r0, r0, #23
 8000c32:	4320      	orrs	r0, r4
 8000c34:	07c9      	lsls	r1, r1, #31
 8000c36:	4308      	orrs	r0, r1
 8000c38:	bce0      	pop	{r5, r6, r7}
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46b1      	mov	r9, r6
 8000c3e:	46a8      	mov	r8, r5
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	20ff      	movs	r0, #255	; 0xff
 8000c44:	2400      	movs	r4, #0
 8000c46:	e7f3      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000c48:	0c26      	lsrs	r6, r4, #16
 8000c4a:	0424      	lsls	r4, r4, #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	4644      	mov	r4, r8
 8000c50:	0424      	lsls	r4, r4, #16
 8000c52:	0c24      	lsrs	r4, r4, #16
 8000c54:	4643      	mov	r3, r8
 8000c56:	0027      	movs	r7, r4
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	4357      	muls	r7, r2
 8000c5c:	4374      	muls	r4, r6
 8000c5e:	435a      	muls	r2, r3
 8000c60:	435e      	muls	r6, r3
 8000c62:	1912      	adds	r2, r2, r4
 8000c64:	0c3b      	lsrs	r3, r7, #16
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	d903      	bls.n	8000c74 <__aeabi_fmul+0xd0>
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	0252      	lsls	r2, r2, #9
 8000c70:	4694      	mov	ip, r2
 8000c72:	4466      	add	r6, ip
 8000c74:	043f      	lsls	r7, r7, #16
 8000c76:	041a      	lsls	r2, r3, #16
 8000c78:	0c3f      	lsrs	r7, r7, #16
 8000c7a:	19d2      	adds	r2, r2, r7
 8000c7c:	0194      	lsls	r4, r2, #6
 8000c7e:	1e67      	subs	r7, r4, #1
 8000c80:	41bc      	sbcs	r4, r7
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	0e92      	lsrs	r2, r2, #26
 8000c86:	199b      	adds	r3, r3, r6
 8000c88:	4314      	orrs	r4, r2
 8000c8a:	019b      	lsls	r3, r3, #6
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	d400      	bmi.n	8000c94 <__aeabi_fmul+0xf0>
 8000c92:	e09b      	b.n	8000dcc <__aeabi_fmul+0x228>
 8000c94:	2301      	movs	r3, #1
 8000c96:	0862      	lsrs	r2, r4, #1
 8000c98:	401c      	ands	r4, r3
 8000c9a:	4314      	orrs	r4, r2
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	327f      	adds	r2, #127	; 0x7f
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	dd64      	ble.n	8000d6e <__aeabi_fmul+0x1ca>
 8000ca4:	0763      	lsls	r3, r4, #29
 8000ca6:	d004      	beq.n	8000cb2 <__aeabi_fmul+0x10e>
 8000ca8:	230f      	movs	r3, #15
 8000caa:	4023      	ands	r3, r4
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fmul+0x10e>
 8000cb0:	3404      	adds	r4, #4
 8000cb2:	0123      	lsls	r3, r4, #4
 8000cb4:	d503      	bpl.n	8000cbe <__aeabi_fmul+0x11a>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <__aeabi_fmul+0x248>)
 8000cba:	3280      	adds	r2, #128	; 0x80
 8000cbc:	401c      	ands	r4, r3
 8000cbe:	2afe      	cmp	r2, #254	; 0xfe
 8000cc0:	dcbf      	bgt.n	8000c42 <__aeabi_fmul+0x9e>
 8000cc2:	01a4      	lsls	r4, r4, #6
 8000cc4:	0a64      	lsrs	r4, r4, #9
 8000cc6:	b2d0      	uxtb	r0, r2
 8000cc8:	e7b2      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d13d      	bne.n	8000d4c <__aeabi_fmul+0x1a8>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	469c      	mov	ip, r3
 8000cda:	e792      	b.n	8000c02 <__aeabi_fmul+0x5e>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d129      	bne.n	8000d34 <__aeabi_fmul+0x190>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	469a      	mov	sl, r3
 8000cea:	e774      	b.n	8000bd6 <__aeabi_fmul+0x32>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d11b      	bne.n	8000d28 <__aeabi_fmul+0x184>
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	3b06      	subs	r3, #6
 8000cf6:	25ff      	movs	r5, #255	; 0xff
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	e76c      	b.n	8000bd6 <__aeabi_fmul+0x32>
 8000cfc:	4643      	mov	r3, r8
 8000cfe:	35ff      	adds	r5, #255	; 0xff
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10b      	bne.n	8000d1c <__aeabi_fmul+0x178>
 8000d04:	2302      	movs	r3, #2
 8000d06:	464a      	mov	r2, r9
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	e778      	b.n	8000c02 <__aeabi_fmul+0x5e>
 8000d10:	4653      	mov	r3, sl
 8000d12:	0031      	movs	r1, r6
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fmul+0x176>
 8000d18:	e783      	b.n	8000c22 <__aeabi_fmul+0x7e>
 8000d1a:	e792      	b.n	8000c42 <__aeabi_fmul+0x9e>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	464a      	mov	r2, r9
 8000d20:	431a      	orrs	r2, r3
 8000d22:	4691      	mov	r9, r2
 8000d24:	469c      	mov	ip, r3
 8000d26:	e76c      	b.n	8000c02 <__aeabi_fmul+0x5e>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	469a      	mov	sl, r3
 8000d32:	e750      	b.n	8000bd6 <__aeabi_fmul+0x32>
 8000d34:	0020      	movs	r0, r4
 8000d36:	f001 f89d 	bl	8001e74 <__clzsi2>
 8000d3a:	2576      	movs	r5, #118	; 0x76
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	409c      	lsls	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	426d      	negs	r5, r5
 8000d44:	4699      	mov	r9, r3
 8000d46:	469a      	mov	sl, r3
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	e744      	b.n	8000bd6 <__aeabi_fmul+0x32>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	f001 f891 	bl	8001e74 <__clzsi2>
 8000d52:	4642      	mov	r2, r8
 8000d54:	1f43      	subs	r3, r0, #5
 8000d56:	409a      	lsls	r2, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	1a2d      	subs	r5, r5, r0
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	469c      	mov	ip, r3
 8000d60:	3d76      	subs	r5, #118	; 0x76
 8000d62:	e74e      	b.n	8000c02 <__aeabi_fmul+0x5e>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	2100      	movs	r1, #0
 8000d68:	20ff      	movs	r0, #255	; 0xff
 8000d6a:	03e4      	lsls	r4, r4, #15
 8000d6c:	e760      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	2b1b      	cmp	r3, #27
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_fmul+0x1d4>
 8000d76:	e759      	b.n	8000c2c <__aeabi_fmul+0x88>
 8000d78:	0022      	movs	r2, r4
 8000d7a:	309e      	adds	r0, #158	; 0x9e
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4084      	lsls	r4, r0
 8000d80:	0013      	movs	r3, r2
 8000d82:	1e62      	subs	r2, r4, #1
 8000d84:	4194      	sbcs	r4, r2
 8000d86:	431c      	orrs	r4, r3
 8000d88:	0763      	lsls	r3, r4, #29
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_fmul+0x1f2>
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	4023      	ands	r3, r4
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fmul+0x1f2>
 8000d94:	3404      	adds	r4, #4
 8000d96:	0163      	lsls	r3, r4, #5
 8000d98:	d51a      	bpl.n	8000dd0 <__aeabi_fmul+0x22c>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	e747      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4204      	tst	r4, r0
 8000da6:	d009      	beq.n	8000dbc <__aeabi_fmul+0x218>
 8000da8:	4643      	mov	r3, r8
 8000daa:	4203      	tst	r3, r0
 8000dac:	d106      	bne.n	8000dbc <__aeabi_fmul+0x218>
 8000dae:	4644      	mov	r4, r8
 8000db0:	4304      	orrs	r4, r0
 8000db2:	0264      	lsls	r4, r4, #9
 8000db4:	0039      	movs	r1, r7
 8000db6:	20ff      	movs	r0, #255	; 0xff
 8000db8:	0a64      	lsrs	r4, r4, #9
 8000dba:	e739      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000dbc:	2080      	movs	r0, #128	; 0x80
 8000dbe:	03c0      	lsls	r0, r0, #15
 8000dc0:	4304      	orrs	r4, r0
 8000dc2:	0264      	lsls	r4, r4, #9
 8000dc4:	0031      	movs	r1, r6
 8000dc6:	20ff      	movs	r0, #255	; 0xff
 8000dc8:	0a64      	lsrs	r4, r4, #9
 8000dca:	e731      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000dcc:	0028      	movs	r0, r5
 8000dce:	e765      	b.n	8000c9c <__aeabi_fmul+0xf8>
 8000dd0:	01a4      	lsls	r4, r4, #6
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	0a64      	lsrs	r4, r4, #9
 8000dd6:	e72b      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	03c0      	lsls	r0, r0, #15
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0264      	lsls	r4, r4, #9
 8000de0:	20ff      	movs	r0, #255	; 0xff
 8000de2:	0a64      	lsrs	r4, r4, #9
 8000de4:	e724      	b.n	8000c30 <__aeabi_fmul+0x8c>
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	080069e0 	.word	0x080069e0
 8000dec:	f7ffffff 	.word	0xf7ffffff

08000df0 <__aeabi_fsub>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	46ce      	mov	lr, r9
 8000df4:	4647      	mov	r7, r8
 8000df6:	0243      	lsls	r3, r0, #9
 8000df8:	0a5b      	lsrs	r3, r3, #9
 8000dfa:	024e      	lsls	r6, r1, #9
 8000dfc:	00da      	lsls	r2, r3, #3
 8000dfe:	4694      	mov	ip, r2
 8000e00:	0a72      	lsrs	r2, r6, #9
 8000e02:	4691      	mov	r9, r2
 8000e04:	0045      	lsls	r5, r0, #1
 8000e06:	004a      	lsls	r2, r1, #1
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	0e2d      	lsrs	r5, r5, #24
 8000e0c:	001f      	movs	r7, r3
 8000e0e:	0fc4      	lsrs	r4, r0, #31
 8000e10:	0e12      	lsrs	r2, r2, #24
 8000e12:	0fc9      	lsrs	r1, r1, #31
 8000e14:	09b6      	lsrs	r6, r6, #6
 8000e16:	2aff      	cmp	r2, #255	; 0xff
 8000e18:	d05b      	beq.n	8000ed2 <__aeabi_fsub+0xe2>
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	4041      	eors	r1, r0
 8000e1e:	428c      	cmp	r4, r1
 8000e20:	d039      	beq.n	8000e96 <__aeabi_fsub+0xa6>
 8000e22:	1aa8      	subs	r0, r5, r2
 8000e24:	2800      	cmp	r0, #0
 8000e26:	dd5a      	ble.n	8000ede <__aeabi_fsub+0xee>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d06a      	beq.n	8000f02 <__aeabi_fsub+0x112>
 8000e2c:	2dff      	cmp	r5, #255	; 0xff
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x42>
 8000e30:	e0d9      	b.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	04d2      	lsls	r2, r2, #19
 8000e36:	4316      	orrs	r6, r2
 8000e38:	281b      	cmp	r0, #27
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_fsub+0x4e>
 8000e3c:	e0e9      	b.n	8001012 <__aeabi_fsub+0x222>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4663      	mov	r3, ip
 8000e42:	1a18      	subs	r0, r3, r0
 8000e44:	0143      	lsls	r3, r0, #5
 8000e46:	d400      	bmi.n	8000e4a <__aeabi_fsub+0x5a>
 8000e48:	e0b4      	b.n	8000fb4 <__aeabi_fsub+0x1c4>
 8000e4a:	0180      	lsls	r0, r0, #6
 8000e4c:	0987      	lsrs	r7, r0, #6
 8000e4e:	0038      	movs	r0, r7
 8000e50:	f001 f810 	bl	8001e74 <__clzsi2>
 8000e54:	3805      	subs	r0, #5
 8000e56:	4087      	lsls	r7, r0
 8000e58:	4285      	cmp	r5, r0
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x6e>
 8000e5c:	e0cc      	b.n	8000ff8 <__aeabi_fsub+0x208>
 8000e5e:	1a2d      	subs	r5, r5, r0
 8000e60:	48b5      	ldr	r0, [pc, #724]	; (8001138 <__aeabi_fsub+0x348>)
 8000e62:	4038      	ands	r0, r7
 8000e64:	0743      	lsls	r3, r0, #29
 8000e66:	d004      	beq.n	8000e72 <__aeabi_fsub+0x82>
 8000e68:	230f      	movs	r3, #15
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0x82>
 8000e70:	3004      	adds	r0, #4
 8000e72:	0143      	lsls	r3, r0, #5
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_fsub+0x88>
 8000e76:	e0a0      	b.n	8000fba <__aeabi_fsub+0x1ca>
 8000e78:	1c6a      	adds	r2, r5, #1
 8000e7a:	2dfe      	cmp	r5, #254	; 0xfe
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_fsub+0x90>
 8000e7e:	e08d      	b.n	8000f9c <__aeabi_fsub+0x1ac>
 8000e80:	0180      	lsls	r0, r0, #6
 8000e82:	0a47      	lsrs	r7, r0, #9
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	05d0      	lsls	r0, r2, #23
 8000e88:	4338      	orrs	r0, r7
 8000e8a:	07e4      	lsls	r4, r4, #31
 8000e8c:	4320      	orrs	r0, r4
 8000e8e:	bcc0      	pop	{r6, r7}
 8000e90:	46b9      	mov	r9, r7
 8000e92:	46b0      	mov	r8, r6
 8000e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e96:	1aa8      	subs	r0, r5, r2
 8000e98:	4680      	mov	r8, r0
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	dd45      	ble.n	8000f2a <__aeabi_fsub+0x13a>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d070      	beq.n	8000f84 <__aeabi_fsub+0x194>
 8000ea2:	2dff      	cmp	r5, #255	; 0xff
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0xb8>
 8000ea6:	e09e      	b.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	04db      	lsls	r3, r3, #19
 8000eac:	431e      	orrs	r6, r3
 8000eae:	4643      	mov	r3, r8
 8000eb0:	2b1b      	cmp	r3, #27
 8000eb2:	dc00      	bgt.n	8000eb6 <__aeabi_fsub+0xc6>
 8000eb4:	e0d2      	b.n	800105c <__aeabi_fsub+0x26c>
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	4460      	add	r0, ip
 8000eba:	0143      	lsls	r3, r0, #5
 8000ebc:	d57a      	bpl.n	8000fb4 <__aeabi_fsub+0x1c4>
 8000ebe:	3501      	adds	r5, #1
 8000ec0:	2dff      	cmp	r5, #255	; 0xff
 8000ec2:	d06b      	beq.n	8000f9c <__aeabi_fsub+0x1ac>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4a9d      	ldr	r2, [pc, #628]	; (800113c <__aeabi_fsub+0x34c>)
 8000ec8:	4003      	ands	r3, r0
 8000eca:	0840      	lsrs	r0, r0, #1
 8000ecc:	4010      	ands	r0, r2
 8000ece:	4318      	orrs	r0, r3
 8000ed0:	e7c8      	b.n	8000e64 <__aeabi_fsub+0x74>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d020      	beq.n	8000f18 <__aeabi_fsub+0x128>
 8000ed6:	428c      	cmp	r4, r1
 8000ed8:	d023      	beq.n	8000f22 <__aeabi_fsub+0x132>
 8000eda:	0028      	movs	r0, r5
 8000edc:	38ff      	subs	r0, #255	; 0xff
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d039      	beq.n	8000f56 <__aeabi_fsub+0x166>
 8000ee2:	1b57      	subs	r7, r2, r5
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0xfa>
 8000ee8:	e09d      	b.n	8001026 <__aeabi_fsub+0x236>
 8000eea:	4663      	mov	r3, ip
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x102>
 8000ef0:	e0db      	b.n	80010aa <__aeabi_fsub+0x2ba>
 8000ef2:	1e7b      	subs	r3, r7, #1
 8000ef4:	2f01      	cmp	r7, #1
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fsub+0x10a>
 8000ef8:	e10d      	b.n	8001116 <__aeabi_fsub+0x326>
 8000efa:	2fff      	cmp	r7, #255	; 0xff
 8000efc:	d071      	beq.n	8000fe2 <__aeabi_fsub+0x1f2>
 8000efe:	001f      	movs	r7, r3
 8000f00:	e098      	b.n	8001034 <__aeabi_fsub+0x244>
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x118>
 8000f06:	e0a7      	b.n	8001058 <__aeabi_fsub+0x268>
 8000f08:	1e42      	subs	r2, r0, #1
 8000f0a:	2801      	cmp	r0, #1
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_fsub+0x120>
 8000f0e:	e0e6      	b.n	80010de <__aeabi_fsub+0x2ee>
 8000f10:	28ff      	cmp	r0, #255	; 0xff
 8000f12:	d068      	beq.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000f14:	0010      	movs	r0, r2
 8000f16:	e78f      	b.n	8000e38 <__aeabi_fsub+0x48>
 8000f18:	2001      	movs	r0, #1
 8000f1a:	4041      	eors	r1, r0
 8000f1c:	42a1      	cmp	r1, r4
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x132>
 8000f20:	e77f      	b.n	8000e22 <__aeabi_fsub+0x32>
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	4240      	negs	r0, r0
 8000f26:	4680      	mov	r8, r0
 8000f28:	44a8      	add	r8, r5
 8000f2a:	4640      	mov	r0, r8
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d038      	beq.n	8000fa2 <__aeabi_fsub+0x1b2>
 8000f30:	1b51      	subs	r1, r2, r5
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x148>
 8000f36:	e0ae      	b.n	8001096 <__aeabi_fsub+0x2a6>
 8000f38:	2aff      	cmp	r2, #255	; 0xff
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x14e>
 8000f3c:	e0df      	b.n	80010fe <__aeabi_fsub+0x30e>
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	4660      	mov	r0, ip
 8000f42:	04db      	lsls	r3, r3, #19
 8000f44:	4318      	orrs	r0, r3
 8000f46:	4684      	mov	ip, r0
 8000f48:	291b      	cmp	r1, #27
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_fsub+0x15e>
 8000f4c:	e0d9      	b.n	8001102 <__aeabi_fsub+0x312>
 8000f4e:	2001      	movs	r0, #1
 8000f50:	0015      	movs	r5, r2
 8000f52:	1980      	adds	r0, r0, r6
 8000f54:	e7b1      	b.n	8000eba <__aeabi_fsub+0xca>
 8000f56:	20fe      	movs	r0, #254	; 0xfe
 8000f58:	1c6a      	adds	r2, r5, #1
 8000f5a:	4210      	tst	r0, r2
 8000f5c:	d171      	bne.n	8001042 <__aeabi_fsub+0x252>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x174>
 8000f62:	e0a6      	b.n	80010b2 <__aeabi_fsub+0x2c2>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x17c>
 8000f6a:	e0d9      	b.n	8001120 <__aeabi_fsub+0x330>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x184>
 8000f72:	e788      	b.n	8000e86 <__aeabi_fsub+0x96>
 8000f74:	1b98      	subs	r0, r3, r6
 8000f76:	0143      	lsls	r3, r0, #5
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_fsub+0x18c>
 8000f7a:	e0e1      	b.n	8001140 <__aeabi_fsub+0x350>
 8000f7c:	4663      	mov	r3, ip
 8000f7e:	000c      	movs	r4, r1
 8000f80:	1af0      	subs	r0, r6, r3
 8000f82:	e76f      	b.n	8000e64 <__aeabi_fsub+0x74>
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x19a>
 8000f88:	e0b7      	b.n	80010fa <__aeabi_fsub+0x30a>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	2801      	cmp	r0, #1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x1a4>
 8000f92:	e09c      	b.n	80010ce <__aeabi_fsub+0x2de>
 8000f94:	28ff      	cmp	r0, #255	; 0xff
 8000f96:	d026      	beq.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000f98:	4690      	mov	r8, r2
 8000f9a:	e788      	b.n	8000eae <__aeabi_fsub+0xbe>
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	2700      	movs	r7, #0
 8000fa0:	e771      	b.n	8000e86 <__aeabi_fsub+0x96>
 8000fa2:	20fe      	movs	r0, #254	; 0xfe
 8000fa4:	1c6a      	adds	r2, r5, #1
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d064      	beq.n	8001074 <__aeabi_fsub+0x284>
 8000faa:	2aff      	cmp	r2, #255	; 0xff
 8000fac:	d0f6      	beq.n	8000f9c <__aeabi_fsub+0x1ac>
 8000fae:	0015      	movs	r5, r2
 8000fb0:	4466      	add	r6, ip
 8000fb2:	0870      	lsrs	r0, r6, #1
 8000fb4:	0743      	lsls	r3, r0, #29
 8000fb6:	d000      	beq.n	8000fba <__aeabi_fsub+0x1ca>
 8000fb8:	e756      	b.n	8000e68 <__aeabi_fsub+0x78>
 8000fba:	08c3      	lsrs	r3, r0, #3
 8000fbc:	2dff      	cmp	r5, #255	; 0xff
 8000fbe:	d012      	beq.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	0a5f      	lsrs	r7, r3, #9
 8000fc4:	b2ea      	uxtb	r2, r5
 8000fc6:	e75e      	b.n	8000e86 <__aeabi_fsub+0x96>
 8000fc8:	4662      	mov	r2, ip
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x1e0>
 8000fce:	e096      	b.n	80010fe <__aeabi_fsub+0x30e>
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d008      	beq.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	03d2      	lsls	r2, r2, #15
 8000fd8:	4213      	tst	r3, r2
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000fdc:	4648      	mov	r0, r9
 8000fde:	4210      	tst	r0, r2
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000fe2:	000c      	movs	r4, r1
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0d8      	beq.n	8000f9c <__aeabi_fsub+0x1ac>
 8000fea:	2780      	movs	r7, #128	; 0x80
 8000fec:	03ff      	lsls	r7, r7, #15
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	027f      	lsls	r7, r7, #9
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	0a7f      	lsrs	r7, r7, #9
 8000ff6:	e746      	b.n	8000e86 <__aeabi_fsub+0x96>
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	003a      	movs	r2, r7
 8000ffc:	1b45      	subs	r5, r0, r5
 8000ffe:	0038      	movs	r0, r7
 8001000:	3501      	adds	r5, #1
 8001002:	40ea      	lsrs	r2, r5
 8001004:	1b5d      	subs	r5, r3, r5
 8001006:	40a8      	lsls	r0, r5
 8001008:	1e43      	subs	r3, r0, #1
 800100a:	4198      	sbcs	r0, r3
 800100c:	2500      	movs	r5, #0
 800100e:	4310      	orrs	r0, r2
 8001010:	e728      	b.n	8000e64 <__aeabi_fsub+0x74>
 8001012:	2320      	movs	r3, #32
 8001014:	1a1b      	subs	r3, r3, r0
 8001016:	0032      	movs	r2, r6
 8001018:	409e      	lsls	r6, r3
 800101a:	40c2      	lsrs	r2, r0
 800101c:	0030      	movs	r0, r6
 800101e:	1e43      	subs	r3, r0, #1
 8001020:	4198      	sbcs	r0, r3
 8001022:	4310      	orrs	r0, r2
 8001024:	e70c      	b.n	8000e40 <__aeabi_fsub+0x50>
 8001026:	2aff      	cmp	r2, #255	; 0xff
 8001028:	d0db      	beq.n	8000fe2 <__aeabi_fsub+0x1f2>
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	4660      	mov	r0, ip
 800102e:	04db      	lsls	r3, r3, #19
 8001030:	4318      	orrs	r0, r3
 8001032:	4684      	mov	ip, r0
 8001034:	2f1b      	cmp	r7, #27
 8001036:	dd56      	ble.n	80010e6 <__aeabi_fsub+0x2f6>
 8001038:	2001      	movs	r0, #1
 800103a:	000c      	movs	r4, r1
 800103c:	0015      	movs	r5, r2
 800103e:	1a30      	subs	r0, r6, r0
 8001040:	e700      	b.n	8000e44 <__aeabi_fsub+0x54>
 8001042:	4663      	mov	r3, ip
 8001044:	1b9f      	subs	r7, r3, r6
 8001046:	017b      	lsls	r3, r7, #5
 8001048:	d43d      	bmi.n	80010c6 <__aeabi_fsub+0x2d6>
 800104a:	2f00      	cmp	r7, #0
 800104c:	d000      	beq.n	8001050 <__aeabi_fsub+0x260>
 800104e:	e6fe      	b.n	8000e4e <__aeabi_fsub+0x5e>
 8001050:	2400      	movs	r4, #0
 8001052:	2200      	movs	r2, #0
 8001054:	2700      	movs	r7, #0
 8001056:	e716      	b.n	8000e86 <__aeabi_fsub+0x96>
 8001058:	0005      	movs	r5, r0
 800105a:	e7af      	b.n	8000fbc <__aeabi_fsub+0x1cc>
 800105c:	0032      	movs	r2, r6
 800105e:	4643      	mov	r3, r8
 8001060:	4641      	mov	r1, r8
 8001062:	40da      	lsrs	r2, r3
 8001064:	2320      	movs	r3, #32
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	409e      	lsls	r6, r3
 800106a:	0030      	movs	r0, r6
 800106c:	1e43      	subs	r3, r0, #1
 800106e:	4198      	sbcs	r0, r3
 8001070:	4310      	orrs	r0, r2
 8001072:	e721      	b.n	8000eb8 <__aeabi_fsub+0xc8>
 8001074:	2d00      	cmp	r5, #0
 8001076:	d1a7      	bne.n	8000fc8 <__aeabi_fsub+0x1d8>
 8001078:	4663      	mov	r3, ip
 800107a:	2b00      	cmp	r3, #0
 800107c:	d059      	beq.n	8001132 <__aeabi_fsub+0x342>
 800107e:	2200      	movs	r2, #0
 8001080:	2e00      	cmp	r6, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_fsub+0x296>
 8001084:	e6ff      	b.n	8000e86 <__aeabi_fsub+0x96>
 8001086:	0030      	movs	r0, r6
 8001088:	4460      	add	r0, ip
 800108a:	0143      	lsls	r3, r0, #5
 800108c:	d592      	bpl.n	8000fb4 <__aeabi_fsub+0x1c4>
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <__aeabi_fsub+0x348>)
 8001090:	3501      	adds	r5, #1
 8001092:	4018      	ands	r0, r3
 8001094:	e78e      	b.n	8000fb4 <__aeabi_fsub+0x1c4>
 8001096:	4663      	mov	r3, ip
 8001098:	2b00      	cmp	r3, #0
 800109a:	d047      	beq.n	800112c <__aeabi_fsub+0x33c>
 800109c:	1e4b      	subs	r3, r1, #1
 800109e:	2901      	cmp	r1, #1
 80010a0:	d015      	beq.n	80010ce <__aeabi_fsub+0x2de>
 80010a2:	29ff      	cmp	r1, #255	; 0xff
 80010a4:	d02b      	beq.n	80010fe <__aeabi_fsub+0x30e>
 80010a6:	0019      	movs	r1, r3
 80010a8:	e74e      	b.n	8000f48 <__aeabi_fsub+0x158>
 80010aa:	000c      	movs	r4, r1
 80010ac:	464b      	mov	r3, r9
 80010ae:	003d      	movs	r5, r7
 80010b0:	e784      	b.n	8000fbc <__aeabi_fsub+0x1cc>
 80010b2:	4662      	mov	r2, ip
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d18b      	bne.n	8000fd0 <__aeabi_fsub+0x1e0>
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	d192      	bne.n	8000fe2 <__aeabi_fsub+0x1f2>
 80010bc:	2780      	movs	r7, #128	; 0x80
 80010be:	2400      	movs	r4, #0
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	03ff      	lsls	r7, r7, #15
 80010c4:	e6df      	b.n	8000e86 <__aeabi_fsub+0x96>
 80010c6:	4663      	mov	r3, ip
 80010c8:	000c      	movs	r4, r1
 80010ca:	1af7      	subs	r7, r6, r3
 80010cc:	e6bf      	b.n	8000e4e <__aeabi_fsub+0x5e>
 80010ce:	0030      	movs	r0, r6
 80010d0:	4460      	add	r0, ip
 80010d2:	2501      	movs	r5, #1
 80010d4:	0143      	lsls	r3, r0, #5
 80010d6:	d400      	bmi.n	80010da <__aeabi_fsub+0x2ea>
 80010d8:	e76c      	b.n	8000fb4 <__aeabi_fsub+0x1c4>
 80010da:	2502      	movs	r5, #2
 80010dc:	e6f2      	b.n	8000ec4 <__aeabi_fsub+0xd4>
 80010de:	4663      	mov	r3, ip
 80010e0:	2501      	movs	r5, #1
 80010e2:	1b98      	subs	r0, r3, r6
 80010e4:	e6ae      	b.n	8000e44 <__aeabi_fsub+0x54>
 80010e6:	2320      	movs	r3, #32
 80010e8:	4664      	mov	r4, ip
 80010ea:	4660      	mov	r0, ip
 80010ec:	40fc      	lsrs	r4, r7
 80010ee:	1bdf      	subs	r7, r3, r7
 80010f0:	40b8      	lsls	r0, r7
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	4320      	orrs	r0, r4
 80010f8:	e79f      	b.n	800103a <__aeabi_fsub+0x24a>
 80010fa:	0005      	movs	r5, r0
 80010fc:	e75e      	b.n	8000fbc <__aeabi_fsub+0x1cc>
 80010fe:	464b      	mov	r3, r9
 8001100:	e771      	b.n	8000fe6 <__aeabi_fsub+0x1f6>
 8001102:	2320      	movs	r3, #32
 8001104:	4665      	mov	r5, ip
 8001106:	4660      	mov	r0, ip
 8001108:	40cd      	lsrs	r5, r1
 800110a:	1a59      	subs	r1, r3, r1
 800110c:	4088      	lsls	r0, r1
 800110e:	1e43      	subs	r3, r0, #1
 8001110:	4198      	sbcs	r0, r3
 8001112:	4328      	orrs	r0, r5
 8001114:	e71c      	b.n	8000f50 <__aeabi_fsub+0x160>
 8001116:	4663      	mov	r3, ip
 8001118:	000c      	movs	r4, r1
 800111a:	2501      	movs	r5, #1
 800111c:	1af0      	subs	r0, r6, r3
 800111e:	e691      	b.n	8000e44 <__aeabi_fsub+0x54>
 8001120:	2e00      	cmp	r6, #0
 8001122:	d095      	beq.n	8001050 <__aeabi_fsub+0x260>
 8001124:	000c      	movs	r4, r1
 8001126:	464f      	mov	r7, r9
 8001128:	2200      	movs	r2, #0
 800112a:	e6ac      	b.n	8000e86 <__aeabi_fsub+0x96>
 800112c:	464b      	mov	r3, r9
 800112e:	000d      	movs	r5, r1
 8001130:	e744      	b.n	8000fbc <__aeabi_fsub+0x1cc>
 8001132:	464f      	mov	r7, r9
 8001134:	2200      	movs	r2, #0
 8001136:	e6a6      	b.n	8000e86 <__aeabi_fsub+0x96>
 8001138:	fbffffff 	.word	0xfbffffff
 800113c:	7dffffff 	.word	0x7dffffff
 8001140:	2800      	cmp	r0, #0
 8001142:	d000      	beq.n	8001146 <__aeabi_fsub+0x356>
 8001144:	e736      	b.n	8000fb4 <__aeabi_fsub+0x1c4>
 8001146:	2400      	movs	r4, #0
 8001148:	2700      	movs	r7, #0
 800114a:	e69c      	b.n	8000e86 <__aeabi_fsub+0x96>

0800114c <__aeabi_f2iz>:
 800114c:	0241      	lsls	r1, r0, #9
 800114e:	0042      	lsls	r2, r0, #1
 8001150:	0fc3      	lsrs	r3, r0, #31
 8001152:	0a49      	lsrs	r1, r1, #9
 8001154:	2000      	movs	r0, #0
 8001156:	0e12      	lsrs	r2, r2, #24
 8001158:	2a7e      	cmp	r2, #126	; 0x7e
 800115a:	dd03      	ble.n	8001164 <__aeabi_f2iz+0x18>
 800115c:	2a9d      	cmp	r2, #157	; 0x9d
 800115e:	dd02      	ble.n	8001166 <__aeabi_f2iz+0x1a>
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <__aeabi_f2iz+0x3c>)
 8001162:	1898      	adds	r0, r3, r2
 8001164:	4770      	bx	lr
 8001166:	2080      	movs	r0, #128	; 0x80
 8001168:	0400      	lsls	r0, r0, #16
 800116a:	4301      	orrs	r1, r0
 800116c:	2a95      	cmp	r2, #149	; 0x95
 800116e:	dc07      	bgt.n	8001180 <__aeabi_f2iz+0x34>
 8001170:	2096      	movs	r0, #150	; 0x96
 8001172:	1a82      	subs	r2, r0, r2
 8001174:	40d1      	lsrs	r1, r2
 8001176:	4248      	negs	r0, r1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f3      	bne.n	8001164 <__aeabi_f2iz+0x18>
 800117c:	0008      	movs	r0, r1
 800117e:	e7f1      	b.n	8001164 <__aeabi_f2iz+0x18>
 8001180:	3a96      	subs	r2, #150	; 0x96
 8001182:	4091      	lsls	r1, r2
 8001184:	e7f7      	b.n	8001176 <__aeabi_f2iz+0x2a>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7fffffff 	.word	0x7fffffff

0800118c <__aeabi_ui2f>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	1e05      	subs	r5, r0, #0
 8001190:	d00e      	beq.n	80011b0 <__aeabi_ui2f+0x24>
 8001192:	f000 fe6f 	bl	8001e74 <__clzsi2>
 8001196:	239e      	movs	r3, #158	; 0x9e
 8001198:	0004      	movs	r4, r0
 800119a:	1a1b      	subs	r3, r3, r0
 800119c:	2b96      	cmp	r3, #150	; 0x96
 800119e:	dc0c      	bgt.n	80011ba <__aeabi_ui2f+0x2e>
 80011a0:	2808      	cmp	r0, #8
 80011a2:	dd01      	ble.n	80011a8 <__aeabi_ui2f+0x1c>
 80011a4:	3c08      	subs	r4, #8
 80011a6:	40a5      	lsls	r5, r4
 80011a8:	026d      	lsls	r5, r5, #9
 80011aa:	0a6d      	lsrs	r5, r5, #9
 80011ac:	b2d8      	uxtb	r0, r3
 80011ae:	e001      	b.n	80011b4 <__aeabi_ui2f+0x28>
 80011b0:	2000      	movs	r0, #0
 80011b2:	2500      	movs	r5, #0
 80011b4:	05c0      	lsls	r0, r0, #23
 80011b6:	4328      	orrs	r0, r5
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	2b99      	cmp	r3, #153	; 0x99
 80011bc:	dd09      	ble.n	80011d2 <__aeabi_ui2f+0x46>
 80011be:	0002      	movs	r2, r0
 80011c0:	0029      	movs	r1, r5
 80011c2:	321b      	adds	r2, #27
 80011c4:	4091      	lsls	r1, r2
 80011c6:	1e4a      	subs	r2, r1, #1
 80011c8:	4191      	sbcs	r1, r2
 80011ca:	2205      	movs	r2, #5
 80011cc:	1a12      	subs	r2, r2, r0
 80011ce:	40d5      	lsrs	r5, r2
 80011d0:	430d      	orrs	r5, r1
 80011d2:	2c05      	cmp	r4, #5
 80011d4:	dc12      	bgt.n	80011fc <__aeabi_ui2f+0x70>
 80011d6:	0029      	movs	r1, r5
 80011d8:	4e0c      	ldr	r6, [pc, #48]	; (800120c <__aeabi_ui2f+0x80>)
 80011da:	4031      	ands	r1, r6
 80011dc:	076a      	lsls	r2, r5, #29
 80011de:	d009      	beq.n	80011f4 <__aeabi_ui2f+0x68>
 80011e0:	200f      	movs	r0, #15
 80011e2:	4028      	ands	r0, r5
 80011e4:	2804      	cmp	r0, #4
 80011e6:	d005      	beq.n	80011f4 <__aeabi_ui2f+0x68>
 80011e8:	3104      	adds	r1, #4
 80011ea:	014a      	lsls	r2, r1, #5
 80011ec:	d502      	bpl.n	80011f4 <__aeabi_ui2f+0x68>
 80011ee:	239f      	movs	r3, #159	; 0x9f
 80011f0:	4031      	ands	r1, r6
 80011f2:	1b1b      	subs	r3, r3, r4
 80011f4:	0189      	lsls	r1, r1, #6
 80011f6:	0a4d      	lsrs	r5, r1, #9
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	e7db      	b.n	80011b4 <__aeabi_ui2f+0x28>
 80011fc:	1f62      	subs	r2, r4, #5
 80011fe:	4095      	lsls	r5, r2
 8001200:	0029      	movs	r1, r5
 8001202:	4e02      	ldr	r6, [pc, #8]	; (800120c <__aeabi_ui2f+0x80>)
 8001204:	4031      	ands	r1, r6
 8001206:	076a      	lsls	r2, r5, #29
 8001208:	d0f4      	beq.n	80011f4 <__aeabi_ui2f+0x68>
 800120a:	e7e9      	b.n	80011e0 <__aeabi_ui2f+0x54>
 800120c:	fbffffff 	.word	0xfbffffff

08001210 <__aeabi_ddiv>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	4657      	mov	r7, sl
 8001214:	464e      	mov	r6, r9
 8001216:	4645      	mov	r5, r8
 8001218:	46de      	mov	lr, fp
 800121a:	b5e0      	push	{r5, r6, r7, lr}
 800121c:	4681      	mov	r9, r0
 800121e:	0005      	movs	r5, r0
 8001220:	030c      	lsls	r4, r1, #12
 8001222:	0048      	lsls	r0, r1, #1
 8001224:	4692      	mov	sl, r2
 8001226:	001f      	movs	r7, r3
 8001228:	b085      	sub	sp, #20
 800122a:	0b24      	lsrs	r4, r4, #12
 800122c:	0d40      	lsrs	r0, r0, #21
 800122e:	0fce      	lsrs	r6, r1, #31
 8001230:	2800      	cmp	r0, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x26>
 8001234:	e156      	b.n	80014e4 <__aeabi_ddiv+0x2d4>
 8001236:	4bd4      	ldr	r3, [pc, #848]	; (8001588 <__aeabi_ddiv+0x378>)
 8001238:	4298      	cmp	r0, r3
 800123a:	d100      	bne.n	800123e <__aeabi_ddiv+0x2e>
 800123c:	e172      	b.n	8001524 <__aeabi_ddiv+0x314>
 800123e:	0f6b      	lsrs	r3, r5, #29
 8001240:	00e4      	lsls	r4, r4, #3
 8001242:	431c      	orrs	r4, r3
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	4323      	orrs	r3, r4
 800124a:	4698      	mov	r8, r3
 800124c:	4bcf      	ldr	r3, [pc, #828]	; (800158c <__aeabi_ddiv+0x37c>)
 800124e:	00ed      	lsls	r5, r5, #3
 8001250:	469b      	mov	fp, r3
 8001252:	2300      	movs	r3, #0
 8001254:	4699      	mov	r9, r3
 8001256:	4483      	add	fp, r0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	033c      	lsls	r4, r7, #12
 800125c:	007b      	lsls	r3, r7, #1
 800125e:	4650      	mov	r0, sl
 8001260:	0b24      	lsrs	r4, r4, #12
 8001262:	0d5b      	lsrs	r3, r3, #21
 8001264:	0fff      	lsrs	r7, r7, #31
 8001266:	2b00      	cmp	r3, #0
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x5c>
 800126a:	e11f      	b.n	80014ac <__aeabi_ddiv+0x29c>
 800126c:	4ac6      	ldr	r2, [pc, #792]	; (8001588 <__aeabi_ddiv+0x378>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d100      	bne.n	8001274 <__aeabi_ddiv+0x64>
 8001272:	e162      	b.n	800153a <__aeabi_ddiv+0x32a>
 8001274:	49c5      	ldr	r1, [pc, #788]	; (800158c <__aeabi_ddiv+0x37c>)
 8001276:	0f42      	lsrs	r2, r0, #29
 8001278:	468c      	mov	ip, r1
 800127a:	00e4      	lsls	r4, r4, #3
 800127c:	4659      	mov	r1, fp
 800127e:	4314      	orrs	r4, r2
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	4463      	add	r3, ip
 8001284:	0412      	lsls	r2, r2, #16
 8001286:	1acb      	subs	r3, r1, r3
 8001288:	4314      	orrs	r4, r2
 800128a:	469b      	mov	fp, r3
 800128c:	00c2      	lsls	r2, r0, #3
 800128e:	2000      	movs	r0, #0
 8001290:	0033      	movs	r3, r6
 8001292:	407b      	eors	r3, r7
 8001294:	469a      	mov	sl, r3
 8001296:	464b      	mov	r3, r9
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d827      	bhi.n	80012ec <__aeabi_ddiv+0xdc>
 800129c:	49bc      	ldr	r1, [pc, #752]	; (8001590 <__aeabi_ddiv+0x380>)
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	58cb      	ldr	r3, [r1, r3]
 80012a2:	469f      	mov	pc, r3
 80012a4:	46b2      	mov	sl, r6
 80012a6:	9b00      	ldr	r3, [sp, #0]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d016      	beq.n	80012da <__aeabi_ddiv+0xca>
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0xa2>
 80012b0:	e28e      	b.n	80017d0 <__aeabi_ddiv+0x5c0>
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0xa8>
 80012b6:	e0d9      	b.n	800146c <__aeabi_ddiv+0x25c>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2400      	movs	r4, #0
 80012bc:	2500      	movs	r5, #0
 80012be:	4652      	mov	r2, sl
 80012c0:	051b      	lsls	r3, r3, #20
 80012c2:	4323      	orrs	r3, r4
 80012c4:	07d2      	lsls	r2, r2, #31
 80012c6:	4313      	orrs	r3, r2
 80012c8:	0028      	movs	r0, r5
 80012ca:	0019      	movs	r1, r3
 80012cc:	b005      	add	sp, #20
 80012ce:	bcf0      	pop	{r4, r5, r6, r7}
 80012d0:	46bb      	mov	fp, r7
 80012d2:	46b2      	mov	sl, r6
 80012d4:	46a9      	mov	r9, r5
 80012d6:	46a0      	mov	r8, r4
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	2400      	movs	r4, #0
 80012dc:	2500      	movs	r5, #0
 80012de:	4baa      	ldr	r3, [pc, #680]	; (8001588 <__aeabi_ddiv+0x378>)
 80012e0:	e7ed      	b.n	80012be <__aeabi_ddiv+0xae>
 80012e2:	46ba      	mov	sl, r7
 80012e4:	46a0      	mov	r8, r4
 80012e6:	0015      	movs	r5, r2
 80012e8:	9000      	str	r0, [sp, #0]
 80012ea:	e7dc      	b.n	80012a6 <__aeabi_ddiv+0x96>
 80012ec:	4544      	cmp	r4, r8
 80012ee:	d200      	bcs.n	80012f2 <__aeabi_ddiv+0xe2>
 80012f0:	e1c7      	b.n	8001682 <__aeabi_ddiv+0x472>
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0xe6>
 80012f4:	e1c2      	b.n	800167c <__aeabi_ddiv+0x46c>
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	469c      	mov	ip, r3
 80012fc:	002e      	movs	r6, r5
 80012fe:	4640      	mov	r0, r8
 8001300:	2500      	movs	r5, #0
 8001302:	44e3      	add	fp, ip
 8001304:	0223      	lsls	r3, r4, #8
 8001306:	0e14      	lsrs	r4, r2, #24
 8001308:	431c      	orrs	r4, r3
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	4699      	mov	r9, r3
 800130e:	0423      	lsls	r3, r4, #16
 8001310:	0c1f      	lsrs	r7, r3, #16
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	4649      	mov	r1, r9
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	9701      	str	r7, [sp, #4]
 800131a:	f7fe ff8f 	bl	800023c <__aeabi_uidivmod>
 800131e:	0002      	movs	r2, r0
 8001320:	437a      	muls	r2, r7
 8001322:	040b      	lsls	r3, r1, #16
 8001324:	0c31      	lsrs	r1, r6, #16
 8001326:	4680      	mov	r8, r0
 8001328:	4319      	orrs	r1, r3
 800132a:	428a      	cmp	r2, r1
 800132c:	d907      	bls.n	800133e <__aeabi_ddiv+0x12e>
 800132e:	2301      	movs	r3, #1
 8001330:	425b      	negs	r3, r3
 8001332:	469c      	mov	ip, r3
 8001334:	1909      	adds	r1, r1, r4
 8001336:	44e0      	add	r8, ip
 8001338:	428c      	cmp	r4, r1
 800133a:	d800      	bhi.n	800133e <__aeabi_ddiv+0x12e>
 800133c:	e207      	b.n	800174e <__aeabi_ddiv+0x53e>
 800133e:	1a88      	subs	r0, r1, r2
 8001340:	4649      	mov	r1, r9
 8001342:	f7fe ff7b 	bl	800023c <__aeabi_uidivmod>
 8001346:	0409      	lsls	r1, r1, #16
 8001348:	468c      	mov	ip, r1
 800134a:	0431      	lsls	r1, r6, #16
 800134c:	4666      	mov	r6, ip
 800134e:	9a01      	ldr	r2, [sp, #4]
 8001350:	0c09      	lsrs	r1, r1, #16
 8001352:	4342      	muls	r2, r0
 8001354:	0003      	movs	r3, r0
 8001356:	4331      	orrs	r1, r6
 8001358:	428a      	cmp	r2, r1
 800135a:	d904      	bls.n	8001366 <__aeabi_ddiv+0x156>
 800135c:	1909      	adds	r1, r1, r4
 800135e:	3b01      	subs	r3, #1
 8001360:	428c      	cmp	r4, r1
 8001362:	d800      	bhi.n	8001366 <__aeabi_ddiv+0x156>
 8001364:	e1ed      	b.n	8001742 <__aeabi_ddiv+0x532>
 8001366:	1a88      	subs	r0, r1, r2
 8001368:	4642      	mov	r2, r8
 800136a:	0412      	lsls	r2, r2, #16
 800136c:	431a      	orrs	r2, r3
 800136e:	4690      	mov	r8, r2
 8001370:	4641      	mov	r1, r8
 8001372:	9b00      	ldr	r3, [sp, #0]
 8001374:	040e      	lsls	r6, r1, #16
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	001f      	movs	r7, r3
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	0c36      	lsrs	r6, r6, #16
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	0c19      	lsrs	r1, r3, #16
 8001384:	000b      	movs	r3, r1
 8001386:	4373      	muls	r3, r6
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	437e      	muls	r6, r7
 800138c:	9103      	str	r1, [sp, #12]
 800138e:	4351      	muls	r1, r2
 8001390:	437a      	muls	r2, r7
 8001392:	0c1f      	lsrs	r7, r3, #16
 8001394:	46bc      	mov	ip, r7
 8001396:	1876      	adds	r6, r6, r1
 8001398:	4466      	add	r6, ip
 800139a:	42b1      	cmp	r1, r6
 800139c:	d903      	bls.n	80013a6 <__aeabi_ddiv+0x196>
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0249      	lsls	r1, r1, #9
 80013a2:	468c      	mov	ip, r1
 80013a4:	4462      	add	r2, ip
 80013a6:	0c31      	lsrs	r1, r6, #16
 80013a8:	188a      	adds	r2, r1, r2
 80013aa:	0431      	lsls	r1, r6, #16
 80013ac:	041e      	lsls	r6, r3, #16
 80013ae:	0c36      	lsrs	r6, r6, #16
 80013b0:	198e      	adds	r6, r1, r6
 80013b2:	4290      	cmp	r0, r2
 80013b4:	d302      	bcc.n	80013bc <__aeabi_ddiv+0x1ac>
 80013b6:	d112      	bne.n	80013de <__aeabi_ddiv+0x1ce>
 80013b8:	42b5      	cmp	r5, r6
 80013ba:	d210      	bcs.n	80013de <__aeabi_ddiv+0x1ce>
 80013bc:	4643      	mov	r3, r8
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	9b00      	ldr	r3, [sp, #0]
 80013c2:	469c      	mov	ip, r3
 80013c4:	4465      	add	r5, ip
 80013c6:	001f      	movs	r7, r3
 80013c8:	429d      	cmp	r5, r3
 80013ca:	419b      	sbcs	r3, r3
 80013cc:	425b      	negs	r3, r3
 80013ce:	191b      	adds	r3, r3, r4
 80013d0:	18c0      	adds	r0, r0, r3
 80013d2:	4284      	cmp	r4, r0
 80013d4:	d200      	bcs.n	80013d8 <__aeabi_ddiv+0x1c8>
 80013d6:	e1a0      	b.n	800171a <__aeabi_ddiv+0x50a>
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x1cc>
 80013da:	e19b      	b.n	8001714 <__aeabi_ddiv+0x504>
 80013dc:	4688      	mov	r8, r1
 80013de:	1bae      	subs	r6, r5, r6
 80013e0:	42b5      	cmp	r5, r6
 80013e2:	41ad      	sbcs	r5, r5
 80013e4:	1a80      	subs	r0, r0, r2
 80013e6:	426d      	negs	r5, r5
 80013e8:	1b40      	subs	r0, r0, r5
 80013ea:	4284      	cmp	r4, r0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1e0>
 80013ee:	e1d5      	b.n	800179c <__aeabi_ddiv+0x58c>
 80013f0:	4649      	mov	r1, r9
 80013f2:	f7fe ff23 	bl	800023c <__aeabi_uidivmod>
 80013f6:	9a01      	ldr	r2, [sp, #4]
 80013f8:	040b      	lsls	r3, r1, #16
 80013fa:	4342      	muls	r2, r0
 80013fc:	0c31      	lsrs	r1, r6, #16
 80013fe:	0005      	movs	r5, r0
 8001400:	4319      	orrs	r1, r3
 8001402:	428a      	cmp	r2, r1
 8001404:	d900      	bls.n	8001408 <__aeabi_ddiv+0x1f8>
 8001406:	e16c      	b.n	80016e2 <__aeabi_ddiv+0x4d2>
 8001408:	1a88      	subs	r0, r1, r2
 800140a:	4649      	mov	r1, r9
 800140c:	f7fe ff16 	bl	800023c <__aeabi_uidivmod>
 8001410:	9a01      	ldr	r2, [sp, #4]
 8001412:	0436      	lsls	r6, r6, #16
 8001414:	4342      	muls	r2, r0
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	0c36      	lsrs	r6, r6, #16
 800141a:	0003      	movs	r3, r0
 800141c:	430e      	orrs	r6, r1
 800141e:	42b2      	cmp	r2, r6
 8001420:	d900      	bls.n	8001424 <__aeabi_ddiv+0x214>
 8001422:	e153      	b.n	80016cc <__aeabi_ddiv+0x4bc>
 8001424:	9803      	ldr	r0, [sp, #12]
 8001426:	1ab6      	subs	r6, r6, r2
 8001428:	0002      	movs	r2, r0
 800142a:	042d      	lsls	r5, r5, #16
 800142c:	431d      	orrs	r5, r3
 800142e:	9f02      	ldr	r7, [sp, #8]
 8001430:	042b      	lsls	r3, r5, #16
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	435a      	muls	r2, r3
 8001436:	437b      	muls	r3, r7
 8001438:	469c      	mov	ip, r3
 800143a:	0c29      	lsrs	r1, r5, #16
 800143c:	4348      	muls	r0, r1
 800143e:	0c13      	lsrs	r3, r2, #16
 8001440:	4484      	add	ip, r0
 8001442:	4463      	add	r3, ip
 8001444:	4379      	muls	r1, r7
 8001446:	4298      	cmp	r0, r3
 8001448:	d903      	bls.n	8001452 <__aeabi_ddiv+0x242>
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	0240      	lsls	r0, r0, #9
 800144e:	4684      	mov	ip, r0
 8001450:	4461      	add	r1, ip
 8001452:	0c18      	lsrs	r0, r3, #16
 8001454:	0412      	lsls	r2, r2, #16
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	0c12      	lsrs	r2, r2, #16
 800145a:	1841      	adds	r1, r0, r1
 800145c:	189b      	adds	r3, r3, r2
 800145e:	428e      	cmp	r6, r1
 8001460:	d200      	bcs.n	8001464 <__aeabi_ddiv+0x254>
 8001462:	e0ff      	b.n	8001664 <__aeabi_ddiv+0x454>
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x258>
 8001466:	e0fa      	b.n	800165e <__aeabi_ddiv+0x44e>
 8001468:	2301      	movs	r3, #1
 800146a:	431d      	orrs	r5, r3
 800146c:	4a49      	ldr	r2, [pc, #292]	; (8001594 <__aeabi_ddiv+0x384>)
 800146e:	445a      	add	r2, fp
 8001470:	2a00      	cmp	r2, #0
 8001472:	dc00      	bgt.n	8001476 <__aeabi_ddiv+0x266>
 8001474:	e0aa      	b.n	80015cc <__aeabi_ddiv+0x3bc>
 8001476:	076b      	lsls	r3, r5, #29
 8001478:	d000      	beq.n	800147c <__aeabi_ddiv+0x26c>
 800147a:	e13d      	b.n	80016f8 <__aeabi_ddiv+0x4e8>
 800147c:	08ed      	lsrs	r5, r5, #3
 800147e:	4643      	mov	r3, r8
 8001480:	01db      	lsls	r3, r3, #7
 8001482:	d506      	bpl.n	8001492 <__aeabi_ddiv+0x282>
 8001484:	4642      	mov	r2, r8
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <__aeabi_ddiv+0x388>)
 8001488:	401a      	ands	r2, r3
 800148a:	4690      	mov	r8, r2
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	00d2      	lsls	r2, r2, #3
 8001490:	445a      	add	r2, fp
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <__aeabi_ddiv+0x38c>)
 8001494:	429a      	cmp	r2, r3
 8001496:	dd00      	ble.n	800149a <__aeabi_ddiv+0x28a>
 8001498:	e71f      	b.n	80012da <__aeabi_ddiv+0xca>
 800149a:	4643      	mov	r3, r8
 800149c:	075b      	lsls	r3, r3, #29
 800149e:	431d      	orrs	r5, r3
 80014a0:	4643      	mov	r3, r8
 80014a2:	0552      	lsls	r2, r2, #21
 80014a4:	025c      	lsls	r4, r3, #9
 80014a6:	0b24      	lsrs	r4, r4, #12
 80014a8:	0d53      	lsrs	r3, r2, #21
 80014aa:	e708      	b.n	80012be <__aeabi_ddiv+0xae>
 80014ac:	4652      	mov	r2, sl
 80014ae:	4322      	orrs	r2, r4
 80014b0:	d100      	bne.n	80014b4 <__aeabi_ddiv+0x2a4>
 80014b2:	e07b      	b.n	80015ac <__aeabi_ddiv+0x39c>
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0x2aa>
 80014b8:	e0fa      	b.n	80016b0 <__aeabi_ddiv+0x4a0>
 80014ba:	0020      	movs	r0, r4
 80014bc:	f000 fcda 	bl	8001e74 <__clzsi2>
 80014c0:	0002      	movs	r2, r0
 80014c2:	3a0b      	subs	r2, #11
 80014c4:	231d      	movs	r3, #29
 80014c6:	0001      	movs	r1, r0
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	4652      	mov	r2, sl
 80014cc:	3908      	subs	r1, #8
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	408c      	lsls	r4, r1
 80014d2:	4314      	orrs	r4, r2
 80014d4:	4652      	mov	r2, sl
 80014d6:	408a      	lsls	r2, r1
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <__aeabi_ddiv+0x390>)
 80014da:	4458      	add	r0, fp
 80014dc:	469b      	mov	fp, r3
 80014de:	4483      	add	fp, r0
 80014e0:	2000      	movs	r0, #0
 80014e2:	e6d5      	b.n	8001290 <__aeabi_ddiv+0x80>
 80014e4:	464b      	mov	r3, r9
 80014e6:	4323      	orrs	r3, r4
 80014e8:	4698      	mov	r8, r3
 80014ea:	d044      	beq.n	8001576 <__aeabi_ddiv+0x366>
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_ddiv+0x2e2>
 80014f0:	e0ce      	b.n	8001690 <__aeabi_ddiv+0x480>
 80014f2:	0020      	movs	r0, r4
 80014f4:	f000 fcbe 	bl	8001e74 <__clzsi2>
 80014f8:	0001      	movs	r1, r0
 80014fa:	0002      	movs	r2, r0
 80014fc:	390b      	subs	r1, #11
 80014fe:	231d      	movs	r3, #29
 8001500:	1a5b      	subs	r3, r3, r1
 8001502:	4649      	mov	r1, r9
 8001504:	0010      	movs	r0, r2
 8001506:	40d9      	lsrs	r1, r3
 8001508:	3808      	subs	r0, #8
 800150a:	4084      	lsls	r4, r0
 800150c:	000b      	movs	r3, r1
 800150e:	464d      	mov	r5, r9
 8001510:	4323      	orrs	r3, r4
 8001512:	4698      	mov	r8, r3
 8001514:	4085      	lsls	r5, r0
 8001516:	4823      	ldr	r0, [pc, #140]	; (80015a4 <__aeabi_ddiv+0x394>)
 8001518:	1a83      	subs	r3, r0, r2
 800151a:	469b      	mov	fp, r3
 800151c:	2300      	movs	r3, #0
 800151e:	4699      	mov	r9, r3
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	e69a      	b.n	800125a <__aeabi_ddiv+0x4a>
 8001524:	464b      	mov	r3, r9
 8001526:	4323      	orrs	r3, r4
 8001528:	4698      	mov	r8, r3
 800152a:	d11d      	bne.n	8001568 <__aeabi_ddiv+0x358>
 800152c:	2308      	movs	r3, #8
 800152e:	4699      	mov	r9, r3
 8001530:	3b06      	subs	r3, #6
 8001532:	2500      	movs	r5, #0
 8001534:	4683      	mov	fp, r0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	e68f      	b.n	800125a <__aeabi_ddiv+0x4a>
 800153a:	4652      	mov	r2, sl
 800153c:	4322      	orrs	r2, r4
 800153e:	d109      	bne.n	8001554 <__aeabi_ddiv+0x344>
 8001540:	2302      	movs	r3, #2
 8001542:	4649      	mov	r1, r9
 8001544:	4319      	orrs	r1, r3
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <__aeabi_ddiv+0x398>)
 8001548:	4689      	mov	r9, r1
 800154a:	469c      	mov	ip, r3
 800154c:	2400      	movs	r4, #0
 800154e:	2002      	movs	r0, #2
 8001550:	44e3      	add	fp, ip
 8001552:	e69d      	b.n	8001290 <__aeabi_ddiv+0x80>
 8001554:	2303      	movs	r3, #3
 8001556:	464a      	mov	r2, r9
 8001558:	431a      	orrs	r2, r3
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <__aeabi_ddiv+0x398>)
 800155c:	4691      	mov	r9, r2
 800155e:	469c      	mov	ip, r3
 8001560:	4652      	mov	r2, sl
 8001562:	2003      	movs	r0, #3
 8001564:	44e3      	add	fp, ip
 8001566:	e693      	b.n	8001290 <__aeabi_ddiv+0x80>
 8001568:	230c      	movs	r3, #12
 800156a:	4699      	mov	r9, r3
 800156c:	3b09      	subs	r3, #9
 800156e:	46a0      	mov	r8, r4
 8001570:	4683      	mov	fp, r0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	e671      	b.n	800125a <__aeabi_ddiv+0x4a>
 8001576:	2304      	movs	r3, #4
 8001578:	4699      	mov	r9, r3
 800157a:	2300      	movs	r3, #0
 800157c:	469b      	mov	fp, r3
 800157e:	3301      	adds	r3, #1
 8001580:	2500      	movs	r5, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	e669      	b.n	800125a <__aeabi_ddiv+0x4a>
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	000007ff 	.word	0x000007ff
 800158c:	fffffc01 	.word	0xfffffc01
 8001590:	08006a20 	.word	0x08006a20
 8001594:	000003ff 	.word	0x000003ff
 8001598:	feffffff 	.word	0xfeffffff
 800159c:	000007fe 	.word	0x000007fe
 80015a0:	000003f3 	.word	0x000003f3
 80015a4:	fffffc0d 	.word	0xfffffc0d
 80015a8:	fffff801 	.word	0xfffff801
 80015ac:	4649      	mov	r1, r9
 80015ae:	2301      	movs	r3, #1
 80015b0:	4319      	orrs	r1, r3
 80015b2:	4689      	mov	r9, r1
 80015b4:	2400      	movs	r4, #0
 80015b6:	2001      	movs	r0, #1
 80015b8:	e66a      	b.n	8001290 <__aeabi_ddiv+0x80>
 80015ba:	2300      	movs	r3, #0
 80015bc:	2480      	movs	r4, #128	; 0x80
 80015be:	469a      	mov	sl, r3
 80015c0:	2500      	movs	r5, #0
 80015c2:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <__aeabi_ddiv+0x5dc>)
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	e67a      	b.n	80012be <__aeabi_ddiv+0xae>
 80015c8:	2501      	movs	r5, #1
 80015ca:	426d      	negs	r5, r5
 80015cc:	2301      	movs	r3, #1
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	2b38      	cmp	r3, #56	; 0x38
 80015d2:	dd00      	ble.n	80015d6 <__aeabi_ddiv+0x3c6>
 80015d4:	e670      	b.n	80012b8 <__aeabi_ddiv+0xa8>
 80015d6:	2b1f      	cmp	r3, #31
 80015d8:	dc00      	bgt.n	80015dc <__aeabi_ddiv+0x3cc>
 80015da:	e0bf      	b.n	800175c <__aeabi_ddiv+0x54c>
 80015dc:	211f      	movs	r1, #31
 80015de:	4249      	negs	r1, r1
 80015e0:	1a8a      	subs	r2, r1, r2
 80015e2:	4641      	mov	r1, r8
 80015e4:	40d1      	lsrs	r1, r2
 80015e6:	000a      	movs	r2, r1
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d004      	beq.n	80015f6 <__aeabi_ddiv+0x3e6>
 80015ec:	4641      	mov	r1, r8
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <__aeabi_ddiv+0x5e0>)
 80015f0:	445b      	add	r3, fp
 80015f2:	4099      	lsls	r1, r3
 80015f4:	430d      	orrs	r5, r1
 80015f6:	1e6b      	subs	r3, r5, #1
 80015f8:	419d      	sbcs	r5, r3
 80015fa:	2307      	movs	r3, #7
 80015fc:	432a      	orrs	r2, r5
 80015fe:	001d      	movs	r5, r3
 8001600:	2400      	movs	r4, #0
 8001602:	4015      	ands	r5, r2
 8001604:	4213      	tst	r3, r2
 8001606:	d100      	bne.n	800160a <__aeabi_ddiv+0x3fa>
 8001608:	e0d4      	b.n	80017b4 <__aeabi_ddiv+0x5a4>
 800160a:	210f      	movs	r1, #15
 800160c:	2300      	movs	r3, #0
 800160e:	4011      	ands	r1, r2
 8001610:	2904      	cmp	r1, #4
 8001612:	d100      	bne.n	8001616 <__aeabi_ddiv+0x406>
 8001614:	e0cb      	b.n	80017ae <__aeabi_ddiv+0x59e>
 8001616:	1d11      	adds	r1, r2, #4
 8001618:	4291      	cmp	r1, r2
 800161a:	4192      	sbcs	r2, r2
 800161c:	4252      	negs	r2, r2
 800161e:	189b      	adds	r3, r3, r2
 8001620:	000a      	movs	r2, r1
 8001622:	0219      	lsls	r1, r3, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_ddiv+0x418>
 8001626:	e0c2      	b.n	80017ae <__aeabi_ddiv+0x59e>
 8001628:	2301      	movs	r3, #1
 800162a:	2400      	movs	r4, #0
 800162c:	2500      	movs	r5, #0
 800162e:	e646      	b.n	80012be <__aeabi_ddiv+0xae>
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	4641      	mov	r1, r8
 8001634:	031b      	lsls	r3, r3, #12
 8001636:	4219      	tst	r1, r3
 8001638:	d008      	beq.n	800164c <__aeabi_ddiv+0x43c>
 800163a:	421c      	tst	r4, r3
 800163c:	d106      	bne.n	800164c <__aeabi_ddiv+0x43c>
 800163e:	431c      	orrs	r4, r3
 8001640:	0324      	lsls	r4, r4, #12
 8001642:	46ba      	mov	sl, r7
 8001644:	0015      	movs	r5, r2
 8001646:	4b69      	ldr	r3, [pc, #420]	; (80017ec <__aeabi_ddiv+0x5dc>)
 8001648:	0b24      	lsrs	r4, r4, #12
 800164a:	e638      	b.n	80012be <__aeabi_ddiv+0xae>
 800164c:	2480      	movs	r4, #128	; 0x80
 800164e:	4643      	mov	r3, r8
 8001650:	0324      	lsls	r4, r4, #12
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	46b2      	mov	sl, r6
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <__aeabi_ddiv+0x5dc>)
 800165a:	0b24      	lsrs	r4, r4, #12
 800165c:	e62f      	b.n	80012be <__aeabi_ddiv+0xae>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_ddiv+0x454>
 8001662:	e703      	b.n	800146c <__aeabi_ddiv+0x25c>
 8001664:	19a6      	adds	r6, r4, r6
 8001666:	1e68      	subs	r0, r5, #1
 8001668:	42a6      	cmp	r6, r4
 800166a:	d200      	bcs.n	800166e <__aeabi_ddiv+0x45e>
 800166c:	e08d      	b.n	800178a <__aeabi_ddiv+0x57a>
 800166e:	428e      	cmp	r6, r1
 8001670:	d200      	bcs.n	8001674 <__aeabi_ddiv+0x464>
 8001672:	e0a3      	b.n	80017bc <__aeabi_ddiv+0x5ac>
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x468>
 8001676:	e0b3      	b.n	80017e0 <__aeabi_ddiv+0x5d0>
 8001678:	0005      	movs	r5, r0
 800167a:	e6f5      	b.n	8001468 <__aeabi_ddiv+0x258>
 800167c:	42aa      	cmp	r2, r5
 800167e:	d900      	bls.n	8001682 <__aeabi_ddiv+0x472>
 8001680:	e639      	b.n	80012f6 <__aeabi_ddiv+0xe6>
 8001682:	4643      	mov	r3, r8
 8001684:	07de      	lsls	r6, r3, #31
 8001686:	0858      	lsrs	r0, r3, #1
 8001688:	086b      	lsrs	r3, r5, #1
 800168a:	431e      	orrs	r6, r3
 800168c:	07ed      	lsls	r5, r5, #31
 800168e:	e639      	b.n	8001304 <__aeabi_ddiv+0xf4>
 8001690:	4648      	mov	r0, r9
 8001692:	f000 fbef 	bl	8001e74 <__clzsi2>
 8001696:	0001      	movs	r1, r0
 8001698:	0002      	movs	r2, r0
 800169a:	3115      	adds	r1, #21
 800169c:	3220      	adds	r2, #32
 800169e:	291c      	cmp	r1, #28
 80016a0:	dc00      	bgt.n	80016a4 <__aeabi_ddiv+0x494>
 80016a2:	e72c      	b.n	80014fe <__aeabi_ddiv+0x2ee>
 80016a4:	464b      	mov	r3, r9
 80016a6:	3808      	subs	r0, #8
 80016a8:	4083      	lsls	r3, r0
 80016aa:	2500      	movs	r5, #0
 80016ac:	4698      	mov	r8, r3
 80016ae:	e732      	b.n	8001516 <__aeabi_ddiv+0x306>
 80016b0:	f000 fbe0 	bl	8001e74 <__clzsi2>
 80016b4:	0003      	movs	r3, r0
 80016b6:	001a      	movs	r2, r3
 80016b8:	3215      	adds	r2, #21
 80016ba:	3020      	adds	r0, #32
 80016bc:	2a1c      	cmp	r2, #28
 80016be:	dc00      	bgt.n	80016c2 <__aeabi_ddiv+0x4b2>
 80016c0:	e700      	b.n	80014c4 <__aeabi_ddiv+0x2b4>
 80016c2:	4654      	mov	r4, sl
 80016c4:	3b08      	subs	r3, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	409c      	lsls	r4, r3
 80016ca:	e705      	b.n	80014d8 <__aeabi_ddiv+0x2c8>
 80016cc:	1936      	adds	r6, r6, r4
 80016ce:	3b01      	subs	r3, #1
 80016d0:	42b4      	cmp	r4, r6
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x4c6>
 80016d4:	e6a6      	b.n	8001424 <__aeabi_ddiv+0x214>
 80016d6:	42b2      	cmp	r2, r6
 80016d8:	d800      	bhi.n	80016dc <__aeabi_ddiv+0x4cc>
 80016da:	e6a3      	b.n	8001424 <__aeabi_ddiv+0x214>
 80016dc:	1e83      	subs	r3, r0, #2
 80016de:	1936      	adds	r6, r6, r4
 80016e0:	e6a0      	b.n	8001424 <__aeabi_ddiv+0x214>
 80016e2:	1909      	adds	r1, r1, r4
 80016e4:	3d01      	subs	r5, #1
 80016e6:	428c      	cmp	r4, r1
 80016e8:	d900      	bls.n	80016ec <__aeabi_ddiv+0x4dc>
 80016ea:	e68d      	b.n	8001408 <__aeabi_ddiv+0x1f8>
 80016ec:	428a      	cmp	r2, r1
 80016ee:	d800      	bhi.n	80016f2 <__aeabi_ddiv+0x4e2>
 80016f0:	e68a      	b.n	8001408 <__aeabi_ddiv+0x1f8>
 80016f2:	1e85      	subs	r5, r0, #2
 80016f4:	1909      	adds	r1, r1, r4
 80016f6:	e687      	b.n	8001408 <__aeabi_ddiv+0x1f8>
 80016f8:	230f      	movs	r3, #15
 80016fa:	402b      	ands	r3, r5
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d100      	bne.n	8001702 <__aeabi_ddiv+0x4f2>
 8001700:	e6bc      	b.n	800147c <__aeabi_ddiv+0x26c>
 8001702:	2305      	movs	r3, #5
 8001704:	425b      	negs	r3, r3
 8001706:	42ab      	cmp	r3, r5
 8001708:	419b      	sbcs	r3, r3
 800170a:	3504      	adds	r5, #4
 800170c:	425b      	negs	r3, r3
 800170e:	08ed      	lsrs	r5, r5, #3
 8001710:	4498      	add	r8, r3
 8001712:	e6b4      	b.n	800147e <__aeabi_ddiv+0x26e>
 8001714:	42af      	cmp	r7, r5
 8001716:	d900      	bls.n	800171a <__aeabi_ddiv+0x50a>
 8001718:	e660      	b.n	80013dc <__aeabi_ddiv+0x1cc>
 800171a:	4282      	cmp	r2, r0
 800171c:	d804      	bhi.n	8001728 <__aeabi_ddiv+0x518>
 800171e:	d000      	beq.n	8001722 <__aeabi_ddiv+0x512>
 8001720:	e65c      	b.n	80013dc <__aeabi_ddiv+0x1cc>
 8001722:	42ae      	cmp	r6, r5
 8001724:	d800      	bhi.n	8001728 <__aeabi_ddiv+0x518>
 8001726:	e659      	b.n	80013dc <__aeabi_ddiv+0x1cc>
 8001728:	2302      	movs	r3, #2
 800172a:	425b      	negs	r3, r3
 800172c:	469c      	mov	ip, r3
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	44e0      	add	r8, ip
 8001732:	469c      	mov	ip, r3
 8001734:	4465      	add	r5, ip
 8001736:	429d      	cmp	r5, r3
 8001738:	419b      	sbcs	r3, r3
 800173a:	425b      	negs	r3, r3
 800173c:	191b      	adds	r3, r3, r4
 800173e:	18c0      	adds	r0, r0, r3
 8001740:	e64d      	b.n	80013de <__aeabi_ddiv+0x1ce>
 8001742:	428a      	cmp	r2, r1
 8001744:	d800      	bhi.n	8001748 <__aeabi_ddiv+0x538>
 8001746:	e60e      	b.n	8001366 <__aeabi_ddiv+0x156>
 8001748:	1e83      	subs	r3, r0, #2
 800174a:	1909      	adds	r1, r1, r4
 800174c:	e60b      	b.n	8001366 <__aeabi_ddiv+0x156>
 800174e:	428a      	cmp	r2, r1
 8001750:	d800      	bhi.n	8001754 <__aeabi_ddiv+0x544>
 8001752:	e5f4      	b.n	800133e <__aeabi_ddiv+0x12e>
 8001754:	1e83      	subs	r3, r0, #2
 8001756:	4698      	mov	r8, r3
 8001758:	1909      	adds	r1, r1, r4
 800175a:	e5f0      	b.n	800133e <__aeabi_ddiv+0x12e>
 800175c:	4925      	ldr	r1, [pc, #148]	; (80017f4 <__aeabi_ddiv+0x5e4>)
 800175e:	0028      	movs	r0, r5
 8001760:	4459      	add	r1, fp
 8001762:	408d      	lsls	r5, r1
 8001764:	4642      	mov	r2, r8
 8001766:	408a      	lsls	r2, r1
 8001768:	1e69      	subs	r1, r5, #1
 800176a:	418d      	sbcs	r5, r1
 800176c:	4641      	mov	r1, r8
 800176e:	40d8      	lsrs	r0, r3
 8001770:	40d9      	lsrs	r1, r3
 8001772:	4302      	orrs	r2, r0
 8001774:	432a      	orrs	r2, r5
 8001776:	000b      	movs	r3, r1
 8001778:	0751      	lsls	r1, r2, #29
 800177a:	d100      	bne.n	800177e <__aeabi_ddiv+0x56e>
 800177c:	e751      	b.n	8001622 <__aeabi_ddiv+0x412>
 800177e:	210f      	movs	r1, #15
 8001780:	4011      	ands	r1, r2
 8001782:	2904      	cmp	r1, #4
 8001784:	d000      	beq.n	8001788 <__aeabi_ddiv+0x578>
 8001786:	e746      	b.n	8001616 <__aeabi_ddiv+0x406>
 8001788:	e74b      	b.n	8001622 <__aeabi_ddiv+0x412>
 800178a:	0005      	movs	r5, r0
 800178c:	428e      	cmp	r6, r1
 800178e:	d000      	beq.n	8001792 <__aeabi_ddiv+0x582>
 8001790:	e66a      	b.n	8001468 <__aeabi_ddiv+0x258>
 8001792:	9a00      	ldr	r2, [sp, #0]
 8001794:	4293      	cmp	r3, r2
 8001796:	d000      	beq.n	800179a <__aeabi_ddiv+0x58a>
 8001798:	e666      	b.n	8001468 <__aeabi_ddiv+0x258>
 800179a:	e667      	b.n	800146c <__aeabi_ddiv+0x25c>
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <__aeabi_ddiv+0x5e8>)
 800179e:	445a      	add	r2, fp
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	dc00      	bgt.n	80017a6 <__aeabi_ddiv+0x596>
 80017a4:	e710      	b.n	80015c8 <__aeabi_ddiv+0x3b8>
 80017a6:	2301      	movs	r3, #1
 80017a8:	2500      	movs	r5, #0
 80017aa:	4498      	add	r8, r3
 80017ac:	e667      	b.n	800147e <__aeabi_ddiv+0x26e>
 80017ae:	075d      	lsls	r5, r3, #29
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	0b1c      	lsrs	r4, r3, #12
 80017b4:	08d2      	lsrs	r2, r2, #3
 80017b6:	2300      	movs	r3, #0
 80017b8:	4315      	orrs	r5, r2
 80017ba:	e580      	b.n	80012be <__aeabi_ddiv+0xae>
 80017bc:	9800      	ldr	r0, [sp, #0]
 80017be:	3d02      	subs	r5, #2
 80017c0:	0042      	lsls	r2, r0, #1
 80017c2:	4282      	cmp	r2, r0
 80017c4:	41bf      	sbcs	r7, r7
 80017c6:	427f      	negs	r7, r7
 80017c8:	193c      	adds	r4, r7, r4
 80017ca:	1936      	adds	r6, r6, r4
 80017cc:	9200      	str	r2, [sp, #0]
 80017ce:	e7dd      	b.n	800178c <__aeabi_ddiv+0x57c>
 80017d0:	2480      	movs	r4, #128	; 0x80
 80017d2:	4643      	mov	r3, r8
 80017d4:	0324      	lsls	r4, r4, #12
 80017d6:	431c      	orrs	r4, r3
 80017d8:	0324      	lsls	r4, r4, #12
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__aeabi_ddiv+0x5dc>)
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	e56e      	b.n	80012be <__aeabi_ddiv+0xae>
 80017e0:	9a00      	ldr	r2, [sp, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3ea      	bcc.n	80017bc <__aeabi_ddiv+0x5ac>
 80017e6:	0005      	movs	r5, r0
 80017e8:	e7d3      	b.n	8001792 <__aeabi_ddiv+0x582>
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	000007ff 	.word	0x000007ff
 80017f0:	0000043e 	.word	0x0000043e
 80017f4:	0000041e 	.word	0x0000041e
 80017f8:	000003ff 	.word	0x000003ff

080017fc <__aeabi_dmul>:
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	4698      	mov	r8, r3
 800180a:	030c      	lsls	r4, r1, #12
 800180c:	004b      	lsls	r3, r1, #1
 800180e:	0006      	movs	r6, r0
 8001810:	4692      	mov	sl, r2
 8001812:	b087      	sub	sp, #28
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	0d5b      	lsrs	r3, r3, #21
 8001818:	0fcf      	lsrs	r7, r1, #31
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <__aeabi_dmul+0x24>
 800181e:	e15c      	b.n	8001ada <__aeabi_dmul+0x2de>
 8001820:	4ad9      	ldr	r2, [pc, #868]	; (8001b88 <__aeabi_dmul+0x38c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d100      	bne.n	8001828 <__aeabi_dmul+0x2c>
 8001826:	e175      	b.n	8001b14 <__aeabi_dmul+0x318>
 8001828:	0f42      	lsrs	r2, r0, #29
 800182a:	00e4      	lsls	r4, r4, #3
 800182c:	4314      	orrs	r4, r2
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	4314      	orrs	r4, r2
 8001834:	4ad5      	ldr	r2, [pc, #852]	; (8001b8c <__aeabi_dmul+0x390>)
 8001836:	00c5      	lsls	r5, r0, #3
 8001838:	4694      	mov	ip, r2
 800183a:	4463      	add	r3, ip
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	4699      	mov	r9, r3
 8001842:	469b      	mov	fp, r3
 8001844:	4643      	mov	r3, r8
 8001846:	4642      	mov	r2, r8
 8001848:	031e      	lsls	r6, r3, #12
 800184a:	0fd2      	lsrs	r2, r2, #31
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4650      	mov	r0, sl
 8001850:	4690      	mov	r8, r2
 8001852:	0b36      	lsrs	r6, r6, #12
 8001854:	0d5b      	lsrs	r3, r3, #21
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x5e>
 8001858:	e120      	b.n	8001a9c <__aeabi_dmul+0x2a0>
 800185a:	4acb      	ldr	r2, [pc, #812]	; (8001b88 <__aeabi_dmul+0x38c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d100      	bne.n	8001862 <__aeabi_dmul+0x66>
 8001860:	e162      	b.n	8001b28 <__aeabi_dmul+0x32c>
 8001862:	49ca      	ldr	r1, [pc, #808]	; (8001b8c <__aeabi_dmul+0x390>)
 8001864:	0f42      	lsrs	r2, r0, #29
 8001866:	468c      	mov	ip, r1
 8001868:	9900      	ldr	r1, [sp, #0]
 800186a:	4463      	add	r3, ip
 800186c:	00f6      	lsls	r6, r6, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4316      	orrs	r6, r2
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	449c      	add	ip, r3
 8001876:	0412      	lsls	r2, r2, #16
 8001878:	4663      	mov	r3, ip
 800187a:	4316      	orrs	r6, r2
 800187c:	00c2      	lsls	r2, r0, #3
 800187e:	2000      	movs	r0, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	9900      	ldr	r1, [sp, #0]
 8001884:	4643      	mov	r3, r8
 8001886:	3101      	adds	r1, #1
 8001888:	468c      	mov	ip, r1
 800188a:	4649      	mov	r1, r9
 800188c:	407b      	eors	r3, r7
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	290f      	cmp	r1, #15
 8001892:	d826      	bhi.n	80018e2 <__aeabi_dmul+0xe6>
 8001894:	4bbe      	ldr	r3, [pc, #760]	; (8001b90 <__aeabi_dmul+0x394>)
 8001896:	0089      	lsls	r1, r1, #2
 8001898:	5859      	ldr	r1, [r3, r1]
 800189a:	468f      	mov	pc, r1
 800189c:	4643      	mov	r3, r8
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	0034      	movs	r4, r6
 80018a2:	0015      	movs	r5, r2
 80018a4:	4683      	mov	fp, r0
 80018a6:	465b      	mov	r3, fp
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d016      	beq.n	80018da <__aeabi_dmul+0xde>
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dmul+0xb6>
 80018b0:	e203      	b.n	8001cba <__aeabi_dmul+0x4be>
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d000      	beq.n	80018b8 <__aeabi_dmul+0xbc>
 80018b6:	e0cd      	b.n	8001a54 <__aeabi_dmul+0x258>
 80018b8:	2200      	movs	r2, #0
 80018ba:	2400      	movs	r4, #0
 80018bc:	2500      	movs	r5, #0
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	0512      	lsls	r2, r2, #20
 80018c2:	4322      	orrs	r2, r4
 80018c4:	07db      	lsls	r3, r3, #31
 80018c6:	431a      	orrs	r2, r3
 80018c8:	0028      	movs	r0, r5
 80018ca:	0011      	movs	r1, r2
 80018cc:	b007      	add	sp, #28
 80018ce:	bcf0      	pop	{r4, r5, r6, r7}
 80018d0:	46bb      	mov	fp, r7
 80018d2:	46b2      	mov	sl, r6
 80018d4:	46a9      	mov	r9, r5
 80018d6:	46a0      	mov	r8, r4
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	2400      	movs	r4, #0
 80018dc:	2500      	movs	r5, #0
 80018de:	4aaa      	ldr	r2, [pc, #680]	; (8001b88 <__aeabi_dmul+0x38c>)
 80018e0:	e7ed      	b.n	80018be <__aeabi_dmul+0xc2>
 80018e2:	0c28      	lsrs	r0, r5, #16
 80018e4:	042d      	lsls	r5, r5, #16
 80018e6:	0c2d      	lsrs	r5, r5, #16
 80018e8:	002b      	movs	r3, r5
 80018ea:	0c11      	lsrs	r1, r2, #16
 80018ec:	0412      	lsls	r2, r2, #16
 80018ee:	0c12      	lsrs	r2, r2, #16
 80018f0:	4353      	muls	r3, r2
 80018f2:	4698      	mov	r8, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	002f      	movs	r7, r5
 80018f8:	4343      	muls	r3, r0
 80018fa:	4699      	mov	r9, r3
 80018fc:	434f      	muls	r7, r1
 80018fe:	444f      	add	r7, r9
 8001900:	46bb      	mov	fp, r7
 8001902:	4647      	mov	r7, r8
 8001904:	000b      	movs	r3, r1
 8001906:	0c3f      	lsrs	r7, r7, #16
 8001908:	46ba      	mov	sl, r7
 800190a:	4343      	muls	r3, r0
 800190c:	44da      	add	sl, fp
 800190e:	9302      	str	r3, [sp, #8]
 8001910:	45d1      	cmp	r9, sl
 8001912:	d904      	bls.n	800191e <__aeabi_dmul+0x122>
 8001914:	2780      	movs	r7, #128	; 0x80
 8001916:	027f      	lsls	r7, r7, #9
 8001918:	46b9      	mov	r9, r7
 800191a:	444b      	add	r3, r9
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	4653      	mov	r3, sl
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	469b      	mov	fp, r3
 8001924:	4653      	mov	r3, sl
 8001926:	041f      	lsls	r7, r3, #16
 8001928:	4643      	mov	r3, r8
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	4698      	mov	r8, r3
 8001930:	003b      	movs	r3, r7
 8001932:	4443      	add	r3, r8
 8001934:	9304      	str	r3, [sp, #16]
 8001936:	0c33      	lsrs	r3, r6, #16
 8001938:	0436      	lsls	r6, r6, #16
 800193a:	0c36      	lsrs	r6, r6, #16
 800193c:	4698      	mov	r8, r3
 800193e:	0033      	movs	r3, r6
 8001940:	4343      	muls	r3, r0
 8001942:	4699      	mov	r9, r3
 8001944:	4643      	mov	r3, r8
 8001946:	4343      	muls	r3, r0
 8001948:	002f      	movs	r7, r5
 800194a:	469a      	mov	sl, r3
 800194c:	4643      	mov	r3, r8
 800194e:	4377      	muls	r7, r6
 8001950:	435d      	muls	r5, r3
 8001952:	0c38      	lsrs	r0, r7, #16
 8001954:	444d      	add	r5, r9
 8001956:	1945      	adds	r5, r0, r5
 8001958:	45a9      	cmp	r9, r5
 800195a:	d903      	bls.n	8001964 <__aeabi_dmul+0x168>
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	4699      	mov	r9, r3
 8001962:	44ca      	add	sl, r9
 8001964:	043f      	lsls	r7, r7, #16
 8001966:	0c28      	lsrs	r0, r5, #16
 8001968:	0c3f      	lsrs	r7, r7, #16
 800196a:	042d      	lsls	r5, r5, #16
 800196c:	19ed      	adds	r5, r5, r7
 800196e:	0c27      	lsrs	r7, r4, #16
 8001970:	0424      	lsls	r4, r4, #16
 8001972:	0c24      	lsrs	r4, r4, #16
 8001974:	0003      	movs	r3, r0
 8001976:	0020      	movs	r0, r4
 8001978:	4350      	muls	r0, r2
 800197a:	437a      	muls	r2, r7
 800197c:	4691      	mov	r9, r2
 800197e:	003a      	movs	r2, r7
 8001980:	4453      	add	r3, sl
 8001982:	9305      	str	r3, [sp, #20]
 8001984:	0c03      	lsrs	r3, r0, #16
 8001986:	469a      	mov	sl, r3
 8001988:	434a      	muls	r2, r1
 800198a:	4361      	muls	r1, r4
 800198c:	4449      	add	r1, r9
 800198e:	4451      	add	r1, sl
 8001990:	44ab      	add	fp, r5
 8001992:	4589      	cmp	r9, r1
 8001994:	d903      	bls.n	800199e <__aeabi_dmul+0x1a2>
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4699      	mov	r9, r3
 800199c:	444a      	add	r2, r9
 800199e:	0400      	lsls	r0, r0, #16
 80019a0:	0c0b      	lsrs	r3, r1, #16
 80019a2:	0c00      	lsrs	r0, r0, #16
 80019a4:	0409      	lsls	r1, r1, #16
 80019a6:	1809      	adds	r1, r1, r0
 80019a8:	0020      	movs	r0, r4
 80019aa:	4699      	mov	r9, r3
 80019ac:	4643      	mov	r3, r8
 80019ae:	4370      	muls	r0, r6
 80019b0:	435c      	muls	r4, r3
 80019b2:	437e      	muls	r6, r7
 80019b4:	435f      	muls	r7, r3
 80019b6:	0c03      	lsrs	r3, r0, #16
 80019b8:	4698      	mov	r8, r3
 80019ba:	19a4      	adds	r4, r4, r6
 80019bc:	4444      	add	r4, r8
 80019be:	444a      	add	r2, r9
 80019c0:	9703      	str	r7, [sp, #12]
 80019c2:	42a6      	cmp	r6, r4
 80019c4:	d904      	bls.n	80019d0 <__aeabi_dmul+0x1d4>
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	025b      	lsls	r3, r3, #9
 80019ca:	4698      	mov	r8, r3
 80019cc:	4447      	add	r7, r8
 80019ce:	9703      	str	r7, [sp, #12]
 80019d0:	0423      	lsls	r3, r4, #16
 80019d2:	9e02      	ldr	r6, [sp, #8]
 80019d4:	469a      	mov	sl, r3
 80019d6:	9b05      	ldr	r3, [sp, #20]
 80019d8:	445e      	add	r6, fp
 80019da:	4698      	mov	r8, r3
 80019dc:	42ae      	cmp	r6, r5
 80019de:	41ad      	sbcs	r5, r5
 80019e0:	1876      	adds	r6, r6, r1
 80019e2:	428e      	cmp	r6, r1
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	0400      	lsls	r0, r0, #16
 80019e8:	0c00      	lsrs	r0, r0, #16
 80019ea:	4450      	add	r0, sl
 80019ec:	4440      	add	r0, r8
 80019ee:	426d      	negs	r5, r5
 80019f0:	1947      	adds	r7, r0, r5
 80019f2:	46b8      	mov	r8, r7
 80019f4:	4693      	mov	fp, r2
 80019f6:	4249      	negs	r1, r1
 80019f8:	4689      	mov	r9, r1
 80019fa:	44c3      	add	fp, r8
 80019fc:	44d9      	add	r9, fp
 80019fe:	4298      	cmp	r0, r3
 8001a00:	4180      	sbcs	r0, r0
 8001a02:	45a8      	cmp	r8, r5
 8001a04:	41ad      	sbcs	r5, r5
 8001a06:	4593      	cmp	fp, r2
 8001a08:	4192      	sbcs	r2, r2
 8001a0a:	4589      	cmp	r9, r1
 8001a0c:	4189      	sbcs	r1, r1
 8001a0e:	426d      	negs	r5, r5
 8001a10:	4240      	negs	r0, r0
 8001a12:	4328      	orrs	r0, r5
 8001a14:	0c24      	lsrs	r4, r4, #16
 8001a16:	4252      	negs	r2, r2
 8001a18:	4249      	negs	r1, r1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	9b03      	ldr	r3, [sp, #12]
 8001a1e:	1900      	adds	r0, r0, r4
 8001a20:	1880      	adds	r0, r0, r2
 8001a22:	18c7      	adds	r7, r0, r3
 8001a24:	464b      	mov	r3, r9
 8001a26:	0ddc      	lsrs	r4, r3, #23
 8001a28:	9b04      	ldr	r3, [sp, #16]
 8001a2a:	0275      	lsls	r5, r6, #9
 8001a2c:	431d      	orrs	r5, r3
 8001a2e:	1e6a      	subs	r2, r5, #1
 8001a30:	4195      	sbcs	r5, r2
 8001a32:	464b      	mov	r3, r9
 8001a34:	0df6      	lsrs	r6, r6, #23
 8001a36:	027f      	lsls	r7, r7, #9
 8001a38:	4335      	orrs	r5, r6
 8001a3a:	025a      	lsls	r2, r3, #9
 8001a3c:	433c      	orrs	r4, r7
 8001a3e:	4315      	orrs	r5, r2
 8001a40:	01fb      	lsls	r3, r7, #7
 8001a42:	d400      	bmi.n	8001a46 <__aeabi_dmul+0x24a>
 8001a44:	e11c      	b.n	8001c80 <__aeabi_dmul+0x484>
 8001a46:	2101      	movs	r1, #1
 8001a48:	086a      	lsrs	r2, r5, #1
 8001a4a:	400d      	ands	r5, r1
 8001a4c:	4315      	orrs	r5, r2
 8001a4e:	07e2      	lsls	r2, r4, #31
 8001a50:	4315      	orrs	r5, r2
 8001a52:	0864      	lsrs	r4, r4, #1
 8001a54:	494f      	ldr	r1, [pc, #316]	; (8001b94 <__aeabi_dmul+0x398>)
 8001a56:	4461      	add	r1, ip
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	dc00      	bgt.n	8001a5e <__aeabi_dmul+0x262>
 8001a5c:	e0b0      	b.n	8001bc0 <__aeabi_dmul+0x3c4>
 8001a5e:	076b      	lsls	r3, r5, #29
 8001a60:	d009      	beq.n	8001a76 <__aeabi_dmul+0x27a>
 8001a62:	220f      	movs	r2, #15
 8001a64:	402a      	ands	r2, r5
 8001a66:	2a04      	cmp	r2, #4
 8001a68:	d005      	beq.n	8001a76 <__aeabi_dmul+0x27a>
 8001a6a:	1d2a      	adds	r2, r5, #4
 8001a6c:	42aa      	cmp	r2, r5
 8001a6e:	41ad      	sbcs	r5, r5
 8001a70:	426d      	negs	r5, r5
 8001a72:	1964      	adds	r4, r4, r5
 8001a74:	0015      	movs	r5, r2
 8001a76:	01e3      	lsls	r3, r4, #7
 8001a78:	d504      	bpl.n	8001a84 <__aeabi_dmul+0x288>
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	4a46      	ldr	r2, [pc, #280]	; (8001b98 <__aeabi_dmul+0x39c>)
 8001a7e:	00c9      	lsls	r1, r1, #3
 8001a80:	4014      	ands	r4, r2
 8001a82:	4461      	add	r1, ip
 8001a84:	4a45      	ldr	r2, [pc, #276]	; (8001b9c <__aeabi_dmul+0x3a0>)
 8001a86:	4291      	cmp	r1, r2
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dmul+0x290>
 8001a8a:	e726      	b.n	80018da <__aeabi_dmul+0xde>
 8001a8c:	0762      	lsls	r2, r4, #29
 8001a8e:	08ed      	lsrs	r5, r5, #3
 8001a90:	0264      	lsls	r4, r4, #9
 8001a92:	0549      	lsls	r1, r1, #21
 8001a94:	4315      	orrs	r5, r2
 8001a96:	0b24      	lsrs	r4, r4, #12
 8001a98:	0d4a      	lsrs	r2, r1, #21
 8001a9a:	e710      	b.n	80018be <__aeabi_dmul+0xc2>
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	4332      	orrs	r2, r6
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dmul+0x2a8>
 8001aa2:	e07f      	b.n	8001ba4 <__aeabi_dmul+0x3a8>
 8001aa4:	2e00      	cmp	r6, #0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dmul+0x2ae>
 8001aa8:	e0dc      	b.n	8001c64 <__aeabi_dmul+0x468>
 8001aaa:	0030      	movs	r0, r6
 8001aac:	f000 f9e2 	bl	8001e74 <__clzsi2>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	3a0b      	subs	r2, #11
 8001ab4:	231d      	movs	r3, #29
 8001ab6:	0001      	movs	r1, r0
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	4652      	mov	r2, sl
 8001abc:	3908      	subs	r1, #8
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	408e      	lsls	r6, r1
 8001ac2:	4316      	orrs	r6, r2
 8001ac4:	4652      	mov	r2, sl
 8001ac6:	408a      	lsls	r2, r1
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	4935      	ldr	r1, [pc, #212]	; (8001ba0 <__aeabi_dmul+0x3a4>)
 8001acc:	1a18      	subs	r0, r3, r0
 8001ace:	0003      	movs	r3, r0
 8001ad0:	468c      	mov	ip, r1
 8001ad2:	4463      	add	r3, ip
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	e6d3      	b.n	8001882 <__aeabi_dmul+0x86>
 8001ada:	0025      	movs	r5, r4
 8001adc:	4305      	orrs	r5, r0
 8001ade:	d04a      	beq.n	8001b76 <__aeabi_dmul+0x37a>
 8001ae0:	2c00      	cmp	r4, #0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dmul+0x2ea>
 8001ae4:	e0b0      	b.n	8001c48 <__aeabi_dmul+0x44c>
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	f000 f9c4 	bl	8001e74 <__clzsi2>
 8001aec:	0001      	movs	r1, r0
 8001aee:	0002      	movs	r2, r0
 8001af0:	390b      	subs	r1, #11
 8001af2:	231d      	movs	r3, #29
 8001af4:	0010      	movs	r0, r2
 8001af6:	1a5b      	subs	r3, r3, r1
 8001af8:	0031      	movs	r1, r6
 8001afa:	0035      	movs	r5, r6
 8001afc:	3808      	subs	r0, #8
 8001afe:	4084      	lsls	r4, r0
 8001b00:	40d9      	lsrs	r1, r3
 8001b02:	4085      	lsls	r5, r0
 8001b04:	430c      	orrs	r4, r1
 8001b06:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <__aeabi_dmul+0x3a4>)
 8001b08:	1a83      	subs	r3, r0, r2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4699      	mov	r9, r3
 8001b10:	469b      	mov	fp, r3
 8001b12:	e697      	b.n	8001844 <__aeabi_dmul+0x48>
 8001b14:	0005      	movs	r5, r0
 8001b16:	4325      	orrs	r5, r4
 8001b18:	d126      	bne.n	8001b68 <__aeabi_dmul+0x36c>
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	2400      	movs	r4, #0
 8001b22:	4691      	mov	r9, r2
 8001b24:	469b      	mov	fp, r3
 8001b26:	e68d      	b.n	8001844 <__aeabi_dmul+0x48>
 8001b28:	4652      	mov	r2, sl
 8001b2a:	9b00      	ldr	r3, [sp, #0]
 8001b2c:	4332      	orrs	r2, r6
 8001b2e:	d110      	bne.n	8001b52 <__aeabi_dmul+0x356>
 8001b30:	4915      	ldr	r1, [pc, #84]	; (8001b88 <__aeabi_dmul+0x38c>)
 8001b32:	2600      	movs	r6, #0
 8001b34:	468c      	mov	ip, r1
 8001b36:	4463      	add	r3, ip
 8001b38:	4649      	mov	r1, r9
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	4319      	orrs	r1, r3
 8001b40:	4689      	mov	r9, r1
 8001b42:	2002      	movs	r0, #2
 8001b44:	e69d      	b.n	8001882 <__aeabi_dmul+0x86>
 8001b46:	465b      	mov	r3, fp
 8001b48:	9701      	str	r7, [sp, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d000      	beq.n	8001b50 <__aeabi_dmul+0x354>
 8001b4e:	e6ad      	b.n	80018ac <__aeabi_dmul+0xb0>
 8001b50:	e6c3      	b.n	80018da <__aeabi_dmul+0xde>
 8001b52:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <__aeabi_dmul+0x38c>)
 8001b54:	2003      	movs	r0, #3
 8001b56:	4694      	mov	ip, r2
 8001b58:	4463      	add	r3, ip
 8001b5a:	464a      	mov	r2, r9
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2303      	movs	r3, #3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	4691      	mov	r9, r2
 8001b64:	4652      	mov	r2, sl
 8001b66:	e68c      	b.n	8001882 <__aeabi_dmul+0x86>
 8001b68:	220c      	movs	r2, #12
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	0005      	movs	r5, r0
 8001b70:	4691      	mov	r9, r2
 8001b72:	469b      	mov	fp, r3
 8001b74:	e666      	b.n	8001844 <__aeabi_dmul+0x48>
 8001b76:	2304      	movs	r3, #4
 8001b78:	4699      	mov	r9, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	2400      	movs	r4, #0
 8001b82:	469b      	mov	fp, r3
 8001b84:	e65e      	b.n	8001844 <__aeabi_dmul+0x48>
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	fffffc01 	.word	0xfffffc01
 8001b90:	08006a60 	.word	0x08006a60
 8001b94:	000003ff 	.word	0x000003ff
 8001b98:	feffffff 	.word	0xfeffffff
 8001b9c:	000007fe 	.word	0x000007fe
 8001ba0:	fffffc0d 	.word	0xfffffc0d
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4319      	orrs	r1, r3
 8001baa:	4689      	mov	r9, r1
 8001bac:	2600      	movs	r6, #0
 8001bae:	2001      	movs	r0, #1
 8001bb0:	e667      	b.n	8001882 <__aeabi_dmul+0x86>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2480      	movs	r4, #128	; 0x80
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <__aeabi_dmul+0x4cc>)
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	e67e      	b.n	80018be <__aeabi_dmul+0xc2>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	1a40      	subs	r0, r0, r1
 8001bc4:	2838      	cmp	r0, #56	; 0x38
 8001bc6:	dd00      	ble.n	8001bca <__aeabi_dmul+0x3ce>
 8001bc8:	e676      	b.n	80018b8 <__aeabi_dmul+0xbc>
 8001bca:	281f      	cmp	r0, #31
 8001bcc:	dd5b      	ble.n	8001c86 <__aeabi_dmul+0x48a>
 8001bce:	221f      	movs	r2, #31
 8001bd0:	0023      	movs	r3, r4
 8001bd2:	4252      	negs	r2, r2
 8001bd4:	1a51      	subs	r1, r2, r1
 8001bd6:	40cb      	lsrs	r3, r1
 8001bd8:	0019      	movs	r1, r3
 8001bda:	2820      	cmp	r0, #32
 8001bdc:	d003      	beq.n	8001be6 <__aeabi_dmul+0x3ea>
 8001bde:	4a3b      	ldr	r2, [pc, #236]	; (8001ccc <__aeabi_dmul+0x4d0>)
 8001be0:	4462      	add	r2, ip
 8001be2:	4094      	lsls	r4, r2
 8001be4:	4325      	orrs	r5, r4
 8001be6:	1e6a      	subs	r2, r5, #1
 8001be8:	4195      	sbcs	r5, r2
 8001bea:	002a      	movs	r2, r5
 8001bec:	430a      	orrs	r2, r1
 8001bee:	2107      	movs	r1, #7
 8001bf0:	000d      	movs	r5, r1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	4015      	ands	r5, r2
 8001bf6:	4211      	tst	r1, r2
 8001bf8:	d05b      	beq.n	8001cb2 <__aeabi_dmul+0x4b6>
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	4011      	ands	r1, r2
 8001c00:	2904      	cmp	r1, #4
 8001c02:	d053      	beq.n	8001cac <__aeabi_dmul+0x4b0>
 8001c04:	1d11      	adds	r1, r2, #4
 8001c06:	4291      	cmp	r1, r2
 8001c08:	4192      	sbcs	r2, r2
 8001c0a:	4252      	negs	r2, r2
 8001c0c:	18a4      	adds	r4, r4, r2
 8001c0e:	000a      	movs	r2, r1
 8001c10:	0223      	lsls	r3, r4, #8
 8001c12:	d54b      	bpl.n	8001cac <__aeabi_dmul+0x4b0>
 8001c14:	2201      	movs	r2, #1
 8001c16:	2400      	movs	r4, #0
 8001c18:	2500      	movs	r5, #0
 8001c1a:	e650      	b.n	80018be <__aeabi_dmul+0xc2>
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	031b      	lsls	r3, r3, #12
 8001c20:	421c      	tst	r4, r3
 8001c22:	d009      	beq.n	8001c38 <__aeabi_dmul+0x43c>
 8001c24:	421e      	tst	r6, r3
 8001c26:	d107      	bne.n	8001c38 <__aeabi_dmul+0x43c>
 8001c28:	4333      	orrs	r3, r6
 8001c2a:	031c      	lsls	r4, r3, #12
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	0015      	movs	r5, r2
 8001c30:	0b24      	lsrs	r4, r4, #12
 8001c32:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <__aeabi_dmul+0x4cc>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	e642      	b.n	80018be <__aeabi_dmul+0xc2>
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0312      	lsls	r2, r2, #12
 8001c3c:	4314      	orrs	r4, r2
 8001c3e:	0324      	lsls	r4, r4, #12
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <__aeabi_dmul+0x4cc>)
 8001c42:	0b24      	lsrs	r4, r4, #12
 8001c44:	9701      	str	r7, [sp, #4]
 8001c46:	e63a      	b.n	80018be <__aeabi_dmul+0xc2>
 8001c48:	f000 f914 	bl	8001e74 <__clzsi2>
 8001c4c:	0001      	movs	r1, r0
 8001c4e:	0002      	movs	r2, r0
 8001c50:	3115      	adds	r1, #21
 8001c52:	3220      	adds	r2, #32
 8001c54:	291c      	cmp	r1, #28
 8001c56:	dc00      	bgt.n	8001c5a <__aeabi_dmul+0x45e>
 8001c58:	e74b      	b.n	8001af2 <__aeabi_dmul+0x2f6>
 8001c5a:	0034      	movs	r4, r6
 8001c5c:	3808      	subs	r0, #8
 8001c5e:	2500      	movs	r5, #0
 8001c60:	4084      	lsls	r4, r0
 8001c62:	e750      	b.n	8001b06 <__aeabi_dmul+0x30a>
 8001c64:	f000 f906 	bl	8001e74 <__clzsi2>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	3215      	adds	r2, #21
 8001c6e:	3020      	adds	r0, #32
 8001c70:	2a1c      	cmp	r2, #28
 8001c72:	dc00      	bgt.n	8001c76 <__aeabi_dmul+0x47a>
 8001c74:	e71e      	b.n	8001ab4 <__aeabi_dmul+0x2b8>
 8001c76:	4656      	mov	r6, sl
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	409e      	lsls	r6, r3
 8001c7e:	e723      	b.n	8001ac8 <__aeabi_dmul+0x2cc>
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	469c      	mov	ip, r3
 8001c84:	e6e6      	b.n	8001a54 <__aeabi_dmul+0x258>
 8001c86:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <__aeabi_dmul+0x4d4>)
 8001c88:	0022      	movs	r2, r4
 8001c8a:	4461      	add	r1, ip
 8001c8c:	002e      	movs	r6, r5
 8001c8e:	408d      	lsls	r5, r1
 8001c90:	408a      	lsls	r2, r1
 8001c92:	40c6      	lsrs	r6, r0
 8001c94:	1e69      	subs	r1, r5, #1
 8001c96:	418d      	sbcs	r5, r1
 8001c98:	4332      	orrs	r2, r6
 8001c9a:	432a      	orrs	r2, r5
 8001c9c:	40c4      	lsrs	r4, r0
 8001c9e:	0753      	lsls	r3, r2, #29
 8001ca0:	d0b6      	beq.n	8001c10 <__aeabi_dmul+0x414>
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	4011      	ands	r1, r2
 8001ca6:	2904      	cmp	r1, #4
 8001ca8:	d1ac      	bne.n	8001c04 <__aeabi_dmul+0x408>
 8001caa:	e7b1      	b.n	8001c10 <__aeabi_dmul+0x414>
 8001cac:	0765      	lsls	r5, r4, #29
 8001cae:	0264      	lsls	r4, r4, #9
 8001cb0:	0b24      	lsrs	r4, r4, #12
 8001cb2:	08d2      	lsrs	r2, r2, #3
 8001cb4:	4315      	orrs	r5, r2
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	e601      	b.n	80018be <__aeabi_dmul+0xc2>
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	0312      	lsls	r2, r2, #12
 8001cbe:	4314      	orrs	r4, r2
 8001cc0:	0324      	lsls	r4, r4, #12
 8001cc2:	4a01      	ldr	r2, [pc, #4]	; (8001cc8 <__aeabi_dmul+0x4cc>)
 8001cc4:	0b24      	lsrs	r4, r4, #12
 8001cc6:	e5fa      	b.n	80018be <__aeabi_dmul+0xc2>
 8001cc8:	000007ff 	.word	0x000007ff
 8001ccc:	0000043e 	.word	0x0000043e
 8001cd0:	0000041e 	.word	0x0000041e

08001cd4 <__aeabi_f2d>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	0043      	lsls	r3, r0, #1
 8001cd8:	0246      	lsls	r6, r0, #9
 8001cda:	0fc4      	lsrs	r4, r0, #31
 8001cdc:	20fe      	movs	r0, #254	; 0xfe
 8001cde:	0e1b      	lsrs	r3, r3, #24
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	0a75      	lsrs	r5, r6, #9
 8001ce4:	4208      	tst	r0, r1
 8001ce6:	d00c      	beq.n	8001d02 <__aeabi_f2d+0x2e>
 8001ce8:	22e0      	movs	r2, #224	; 0xe0
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4694      	mov	ip, r2
 8001cee:	076d      	lsls	r5, r5, #29
 8001cf0:	0b36      	lsrs	r6, r6, #12
 8001cf2:	4463      	add	r3, ip
 8001cf4:	051b      	lsls	r3, r3, #20
 8001cf6:	4333      	orrs	r3, r6
 8001cf8:	07e4      	lsls	r4, r4, #31
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	0028      	movs	r0, r5
 8001cfe:	0019      	movs	r1, r3
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d114      	bne.n	8001d30 <__aeabi_f2d+0x5c>
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d01b      	beq.n	8001d42 <__aeabi_f2d+0x6e>
 8001d0a:	0028      	movs	r0, r5
 8001d0c:	f000 f8b2 	bl	8001e74 <__clzsi2>
 8001d10:	280a      	cmp	r0, #10
 8001d12:	dc1c      	bgt.n	8001d4e <__aeabi_f2d+0x7a>
 8001d14:	230b      	movs	r3, #11
 8001d16:	002e      	movs	r6, r5
 8001d18:	1a1b      	subs	r3, r3, r0
 8001d1a:	40de      	lsrs	r6, r3
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	3315      	adds	r3, #21
 8001d20:	409d      	lsls	r5, r3
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <__aeabi_f2d+0x88>)
 8001d24:	0336      	lsls	r6, r6, #12
 8001d26:	1a12      	subs	r2, r2, r0
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	0b36      	lsrs	r6, r6, #12
 8001d2c:	0d53      	lsrs	r3, r2, #21
 8001d2e:	e7e1      	b.n	8001cf4 <__aeabi_f2d+0x20>
 8001d30:	2d00      	cmp	r5, #0
 8001d32:	d009      	beq.n	8001d48 <__aeabi_f2d+0x74>
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	0b36      	lsrs	r6, r6, #12
 8001d38:	0312      	lsls	r2, r2, #12
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <__aeabi_f2d+0x8c>)
 8001d3c:	076d      	lsls	r5, r5, #29
 8001d3e:	4316      	orrs	r6, r2
 8001d40:	e7d8      	b.n	8001cf4 <__aeabi_f2d+0x20>
 8001d42:	2300      	movs	r3, #0
 8001d44:	2600      	movs	r6, #0
 8001d46:	e7d5      	b.n	8001cf4 <__aeabi_f2d+0x20>
 8001d48:	2600      	movs	r6, #0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <__aeabi_f2d+0x8c>)
 8001d4c:	e7d2      	b.n	8001cf4 <__aeabi_f2d+0x20>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	3b0b      	subs	r3, #11
 8001d52:	409d      	lsls	r5, r3
 8001d54:	002e      	movs	r6, r5
 8001d56:	2500      	movs	r5, #0
 8001d58:	e7e3      	b.n	8001d22 <__aeabi_f2d+0x4e>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	00000389 	.word	0x00000389
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__aeabi_d2f>:
 8001d64:	0002      	movs	r2, r0
 8001d66:	004b      	lsls	r3, r1, #1
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	0d5b      	lsrs	r3, r3, #21
 8001d6c:	030c      	lsls	r4, r1, #12
 8001d6e:	4e3d      	ldr	r6, [pc, #244]	; (8001e64 <__aeabi_d2f+0x100>)
 8001d70:	0a64      	lsrs	r4, r4, #9
 8001d72:	0f40      	lsrs	r0, r0, #29
 8001d74:	1c5f      	adds	r7, r3, #1
 8001d76:	0fc9      	lsrs	r1, r1, #31
 8001d78:	4304      	orrs	r4, r0
 8001d7a:	00d5      	lsls	r5, r2, #3
 8001d7c:	4237      	tst	r7, r6
 8001d7e:	d00a      	beq.n	8001d96 <__aeabi_d2f+0x32>
 8001d80:	4839      	ldr	r0, [pc, #228]	; (8001e68 <__aeabi_d2f+0x104>)
 8001d82:	181e      	adds	r6, r3, r0
 8001d84:	2efe      	cmp	r6, #254	; 0xfe
 8001d86:	dd16      	ble.n	8001db6 <__aeabi_d2f+0x52>
 8001d88:	20ff      	movs	r0, #255	; 0xff
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	05c0      	lsls	r0, r0, #23
 8001d8e:	4320      	orrs	r0, r4
 8001d90:	07c9      	lsls	r1, r1, #31
 8001d92:	4308      	orrs	r0, r1
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <__aeabi_d2f+0x44>
 8001d9a:	432c      	orrs	r4, r5
 8001d9c:	d026      	beq.n	8001dec <__aeabi_d2f+0x88>
 8001d9e:	2205      	movs	r2, #5
 8001da0:	0192      	lsls	r2, r2, #6
 8001da2:	0a54      	lsrs	r4, r2, #9
 8001da4:	b2d8      	uxtb	r0, r3
 8001da6:	e7f1      	b.n	8001d8c <__aeabi_d2f+0x28>
 8001da8:	4325      	orrs	r5, r4
 8001daa:	d0ed      	beq.n	8001d88 <__aeabi_d2f+0x24>
 8001dac:	2080      	movs	r0, #128	; 0x80
 8001dae:	03c0      	lsls	r0, r0, #15
 8001db0:	4304      	orrs	r4, r0
 8001db2:	20ff      	movs	r0, #255	; 0xff
 8001db4:	e7ea      	b.n	8001d8c <__aeabi_d2f+0x28>
 8001db6:	2e00      	cmp	r6, #0
 8001db8:	dd1b      	ble.n	8001df2 <__aeabi_d2f+0x8e>
 8001dba:	0192      	lsls	r2, r2, #6
 8001dbc:	1e53      	subs	r3, r2, #1
 8001dbe:	419a      	sbcs	r2, r3
 8001dc0:	00e4      	lsls	r4, r4, #3
 8001dc2:	0f6d      	lsrs	r5, r5, #29
 8001dc4:	4322      	orrs	r2, r4
 8001dc6:	432a      	orrs	r2, r5
 8001dc8:	0753      	lsls	r3, r2, #29
 8001dca:	d048      	beq.n	8001e5e <__aeabi_d2f+0xfa>
 8001dcc:	230f      	movs	r3, #15
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_d2f+0x72>
 8001dd4:	3204      	adds	r2, #4
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	04db      	lsls	r3, r3, #19
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d03f      	beq.n	8001e5e <__aeabi_d2f+0xfa>
 8001dde:	1c70      	adds	r0, r6, #1
 8001de0:	2efe      	cmp	r6, #254	; 0xfe
 8001de2:	d0d1      	beq.n	8001d88 <__aeabi_d2f+0x24>
 8001de4:	0192      	lsls	r2, r2, #6
 8001de6:	0a54      	lsrs	r4, r2, #9
 8001de8:	b2c0      	uxtb	r0, r0
 8001dea:	e7cf      	b.n	8001d8c <__aeabi_d2f+0x28>
 8001dec:	2000      	movs	r0, #0
 8001dee:	2400      	movs	r4, #0
 8001df0:	e7cc      	b.n	8001d8c <__aeabi_d2f+0x28>
 8001df2:	0032      	movs	r2, r6
 8001df4:	3217      	adds	r2, #23
 8001df6:	db22      	blt.n	8001e3e <__aeabi_d2f+0xda>
 8001df8:	2080      	movs	r0, #128	; 0x80
 8001dfa:	0400      	lsls	r0, r0, #16
 8001dfc:	4320      	orrs	r0, r4
 8001dfe:	241e      	movs	r4, #30
 8001e00:	1ba4      	subs	r4, r4, r6
 8001e02:	2c1f      	cmp	r4, #31
 8001e04:	dd1d      	ble.n	8001e42 <__aeabi_d2f+0xde>
 8001e06:	2202      	movs	r2, #2
 8001e08:	4252      	negs	r2, r2
 8001e0a:	1b96      	subs	r6, r2, r6
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	40f2      	lsrs	r2, r6
 8001e10:	0016      	movs	r6, r2
 8001e12:	2c20      	cmp	r4, #32
 8001e14:	d004      	beq.n	8001e20 <__aeabi_d2f+0xbc>
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <__aeabi_d2f+0x108>)
 8001e18:	4694      	mov	ip, r2
 8001e1a:	4463      	add	r3, ip
 8001e1c:	4098      	lsls	r0, r3
 8001e1e:	4305      	orrs	r5, r0
 8001e20:	002a      	movs	r2, r5
 8001e22:	1e53      	subs	r3, r2, #1
 8001e24:	419a      	sbcs	r2, r3
 8001e26:	4332      	orrs	r2, r6
 8001e28:	2600      	movs	r6, #0
 8001e2a:	0753      	lsls	r3, r2, #29
 8001e2c:	d1ce      	bne.n	8001dcc <__aeabi_d2f+0x68>
 8001e2e:	2480      	movs	r4, #128	; 0x80
 8001e30:	0013      	movs	r3, r2
 8001e32:	04e4      	lsls	r4, r4, #19
 8001e34:	2001      	movs	r0, #1
 8001e36:	4023      	ands	r3, r4
 8001e38:	4222      	tst	r2, r4
 8001e3a:	d1d3      	bne.n	8001de4 <__aeabi_d2f+0x80>
 8001e3c:	e7b0      	b.n	8001da0 <__aeabi_d2f+0x3c>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e7ad      	b.n	8001d9e <__aeabi_d2f+0x3a>
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <__aeabi_d2f+0x10c>)
 8001e44:	4694      	mov	ip, r2
 8001e46:	002a      	movs	r2, r5
 8001e48:	40e2      	lsrs	r2, r4
 8001e4a:	0014      	movs	r4, r2
 8001e4c:	002a      	movs	r2, r5
 8001e4e:	4463      	add	r3, ip
 8001e50:	409a      	lsls	r2, r3
 8001e52:	4098      	lsls	r0, r3
 8001e54:	1e55      	subs	r5, r2, #1
 8001e56:	41aa      	sbcs	r2, r5
 8001e58:	4302      	orrs	r2, r0
 8001e5a:	4322      	orrs	r2, r4
 8001e5c:	e7e4      	b.n	8001e28 <__aeabi_d2f+0xc4>
 8001e5e:	0033      	movs	r3, r6
 8001e60:	e79e      	b.n	8001da0 <__aeabi_d2f+0x3c>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	fffffc80 	.word	0xfffffc80
 8001e6c:	fffffca2 	.word	0xfffffca2
 8001e70:	fffffc82 	.word	0xfffffc82

08001e74 <__clzsi2>:
 8001e74:	211c      	movs	r1, #28
 8001e76:	2301      	movs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	4298      	cmp	r0, r3
 8001e7c:	d301      	bcc.n	8001e82 <__clzsi2+0xe>
 8001e7e:	0c00      	lsrs	r0, r0, #16
 8001e80:	3910      	subs	r1, #16
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d301      	bcc.n	8001e8c <__clzsi2+0x18>
 8001e88:	0a00      	lsrs	r0, r0, #8
 8001e8a:	3908      	subs	r1, #8
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	4298      	cmp	r0, r3
 8001e90:	d301      	bcc.n	8001e96 <__clzsi2+0x22>
 8001e92:	0900      	lsrs	r0, r0, #4
 8001e94:	3904      	subs	r1, #4
 8001e96:	a202      	add	r2, pc, #8	; (adr r2, 8001ea0 <__clzsi2+0x2c>)
 8001e98:	5c10      	ldrb	r0, [r2, r0]
 8001e9a:	1840      	adds	r0, r0, r1
 8001e9c:	4770      	bx	lr
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	02020304 	.word	0x02020304
 8001ea4:	01010101 	.word	0x01010101
	...

08001eb0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001eb0:	b530      	push	{r4, r5, lr}
 8001eb2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	a801      	add	r0, sp, #4
 8001eba:	f004 f8dc 	bl	8006076 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ebe:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8001ec0:	4c20      	ldr	r4, [pc, #128]	; (8001f44 <MX_ADC_Init+0x94>)
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <MX_ADC_Init+0x98>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ec4:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001ec6:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 8001ec8:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001eca:	2380      	movs	r3, #128	; 0x80
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001ecc:	0252      	lsls	r2, r2, #9
 8001ece:	61a2      	str	r2, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ed0:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ed2:	061b      	lsls	r3, r3, #24
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001ed4:	2500      	movs	r5, #0
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ed6:	6063      	str	r3, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ed8:	2301      	movs	r3, #1
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eda:	32ff      	adds	r2, #255	; 0xff
 8001edc:	61e2      	str	r2, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ede:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001ee0:	1d62      	adds	r2, r4, #5
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee2:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ee6:	6123      	str	r3, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee8:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001eea:	77d3      	strb	r3, [r2, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eec:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001eee:	f000 ffcd 	bl	8002e8c <HAL_ADC_Init>
 8001ef2:	42a8      	cmp	r0, r5
 8001ef4:	d001      	beq.n	8001efa <MX_ADC_Init+0x4a>
  {
    Error_Handler();
 8001ef6:	f000 fdb9 	bl	8002a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001f00:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f02:	0020      	movs	r0, r4
 8001f04:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_0;
 8001f06:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001f08:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f0a:	f001 f971 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC_Init+0x66>
  {
    Error_Handler();
 8001f12:	f000 fdab 	bl	8002a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f16:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f18:	0020      	movs	r0, r4
 8001f1a:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_1;
 8001f1c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f1e:	f001 f967 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d001      	beq.n	8001f2a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8001f26:	f000 fda1 	bl	8002a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f2a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f2c:	0020      	movs	r0, r4
 8001f2e:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_2;
 8001f30:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f32:	f001 f95d 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d001      	beq.n	8001f3e <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8001f3a:	f000 fd97 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001f3e:	b005      	add	sp, #20
 8001f40:	bd30      	pop	{r4, r5, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000114 	.word	0x20000114
 8001f48:	40012400 	.word	0x40012400

08001f4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	0005      	movs	r5, r0
 8001f50:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	2214      	movs	r2, #20
 8001f54:	2100      	movs	r1, #0
 8001f56:	a803      	add	r0, sp, #12
 8001f58:	f004 f88d 	bl	8006076 <memset>
  if(adcHandle->Instance==ADC1)
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_ADC_MspInit+0x94>)
 8001f5e:	682a      	ldr	r2, [r5, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d13b      	bne.n	8001fdc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f64:	2680      	movs	r6, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_ADC_MspInit+0x98>)
 8001f6a:	00b6      	lsls	r6, r6, #2
 8001f6c:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f70:	4332      	orrs	r2, r6
 8001f72:	619a      	str	r2, [r3, #24]
 8001f74:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = AD_PRESSURE_1_Pin|AD_PRESSURE_2_Pin|AD_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f78:	4032      	ands	r2, r6
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	400b      	ands	r3, r1
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD_PRESSURE_1_Pin|AD_PRESSURE_2_Pin|AD_TEMP_Pin;
 8001f8e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = AD_PRESSURE_1_Pin|AD_PRESSURE_2_Pin|AD_TEMP_Pin;
 8001f92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	3b04      	subs	r3, #4
 8001f96:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f001 fbd0 	bl	800373c <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f9c:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8001f9e:	4c12      	ldr	r4, [pc, #72]	; (8001fe8 <HAL_ADC_MspInit+0x9c>)
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_ADC_MspInit+0xa0>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001fa2:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 8001fa8:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001faa:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001fae:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001fb0:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb2:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb4:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fb6:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001fb8:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001fba:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001fbc:	f001 f9ee 	bl	800339c <HAL_DMA_Init>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001fc4:	f000 fd52 	bl	8002a6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8001fc8:	200c      	movs	r0, #12
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2101      	movs	r1, #1
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001fce:	632c      	str	r4, [r5, #48]	; 0x30
 8001fd0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8001fd2:	f001 f993 	bl	80032fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001fd6:	200c      	movs	r0, #12
 8001fd8:	f001 f9ba 	bl	8003350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001fdc:	b008      	add	sp, #32
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	40012400 	.word	0x40012400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	20000154 	.word	0x20000154
 8001fec:	40020008 	.word	0x40020008

08001ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ff0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <MX_DMA_Init+0x28>)
 8001ff6:	6951      	ldr	r1, [r2, #20]
 8001ff8:	4301      	orrs	r1, r0
 8001ffa:	6151      	str	r1, [r2, #20]
 8001ffc:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002000:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002002:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002004:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002006:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002008:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800200a:	f001 f977 	bl	80032fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800200e:	2009      	movs	r0, #9
 8002010:	f001 f99e 	bl	8003350 <HAL_NVIC_EnableIRQ>

}
 8002014:	bd07      	pop	{r0, r1, r2, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40021000 	.word	0x40021000

0800201c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	2214      	movs	r2, #20
 8002022:	2100      	movs	r1, #0
 8002024:	a803      	add	r0, sp, #12
 8002026:	f004 f826 	bl	8006076 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2080      	movs	r0, #128	; 0x80
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <MX_GPIO_Init+0xb0>)
 800202e:	0280      	lsls	r0, r0, #10
 8002030:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOMBA_1_Pin|BOMBA_2_Pin, GPIO_PIN_RESET);
 8002032:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4301      	orrs	r1, r0
 8002036:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	2180      	movs	r1, #128	; 0x80
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NIVEL_Pin|POS_CHAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4002      	ands	r2, r0
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8002048:	4e21      	ldr	r6, [pc, #132]	; (80020d0 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	430a      	orrs	r2, r1
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, BOMBA_1_Pin|BOMBA_2_Pin, GPIO_PIN_RESET);
 8002050:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, BOMBA_1_Pin|BOMBA_2_Pin, GPIO_PIN_RESET);
 8002054:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, BOMBA_1_Pin|BOMBA_2_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, BOMBA_1_Pin|BOMBA_2_Pin, GPIO_PIN_RESET);
 800205e:	f001 fc23 	bl	80038a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	0030      	movs	r0, r6
 8002066:	2103      	movs	r1, #3
 8002068:	f001 fc1e 	bl	80038a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = NIVEL_Pin|POS_CHAVE_Pin;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	0038      	movs	r0, r7
 8002070:	a903      	add	r1, sp, #12

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BOMBA_1_Pin|BOMBA_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = NIVEL_Pin|POS_CHAVE_Pin;
 8002074:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f001 fb5f 	bl	800373c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOMBA_1_Pin|BOMBA_2_Pin;
 800207e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	0038      	movs	r0, r7
 8002082:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = BOMBA_1_Pin|BOMBA_2_Pin;
 8002084:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f001 fb56 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002090:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	0030      	movs	r0, r6
 8002094:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002096:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f001 fb4d 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_ESQ_Pin|BTN_MENU_Pin|BTN_DIR_Pin;
 80020a2:	23e0      	movs	r3, #224	; 0xe0
 80020a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a6:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f001 fb43 	bl	800373c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80020b6:	0022      	movs	r2, r4
 80020b8:	0029      	movs	r1, r5
 80020ba:	2007      	movs	r0, #7
 80020bc:	f001 f91e 	bl	80032fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80020c0:	2007      	movs	r0, #7
 80020c2:	f001 f945 	bl	8003350 <HAL_NVIC_EnableIRQ>

}
 80020c6:	b009      	add	sp, #36	; 0x24
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	00000808 	.word	0x00000808

080020d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020d8:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_I2C1_Init+0x50>)
 80020dc:	4c13      	ldr	r4, [pc, #76]	; (800212c <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020de:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80020e0:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e4:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 80020e6:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020e8:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ea:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80020ec:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020ee:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020f0:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020f2:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f4:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f6:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f8:	f001 fcfc 	bl	8003af4 <HAL_I2C_Init>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d001      	beq.n	8002104 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8002100:	f000 fcb4 	bl	8002a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002104:	2100      	movs	r1, #0
 8002106:	0020      	movs	r0, r4
 8002108:	f001 fe04 	bl	8003d14 <HAL_I2CEx_ConfigAnalogFilter>
 800210c:	2800      	cmp	r0, #0
 800210e:	d001      	beq.n	8002114 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8002110:	f000 fcac 	bl	8002a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	0020      	movs	r0, r4
 8002118:	f001 fe22 	bl	8003d60 <HAL_I2CEx_ConfigDigitalFilter>
 800211c:	2800      	cmp	r0, #0
 800211e:	d001      	beq.n	8002124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002120:	f000 fca4 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002124:	bd10      	pop	{r4, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40005400 	.word	0x40005400
 800212c:	20000198 	.word	0x20000198
 8002130:	2000090e 	.word	0x2000090e

08002134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002134:	b510      	push	{r4, lr}
 8002136:	0004      	movs	r4, r0
 8002138:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	2214      	movs	r2, #20
 800213c:	2100      	movs	r1, #0
 800213e:	a803      	add	r0, sp, #12
 8002140:	f003 ff99 	bl	8006076 <memset>
  if(i2cHandle->Instance==I2C1)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_I2C_MspInit+0x60>)
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d120      	bne.n	800218e <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	4c12      	ldr	r4, [pc, #72]	; (8002198 <HAL_I2C_MspInit+0x64>)
 8002150:	0289      	lsls	r1, r1, #10
 8002152:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	430a      	orrs	r2, r1
 8002158:	6162      	str	r2, [r4, #20]
 800215a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	400b      	ands	r3, r1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216a:	2312      	movs	r3, #18
 800216c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	3b0f      	subs	r3, #15
 8002170:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002174:	3301      	adds	r3, #1
 8002176:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f001 fae0 	bl	800373c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	69e2      	ldr	r2, [r4, #28]
 8002180:	0389      	lsls	r1, r1, #14
 8002182:	430a      	orrs	r2, r1
 8002184:	61e2      	str	r2, [r4, #28]
 8002186:	69e3      	ldr	r3, [r4, #28]
 8002188:	400b      	ands	r3, r1
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800218e:	b008      	add	sp, #32
 8002190:	bd10      	pop	{r4, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40005400 	.word	0x40005400
 8002198:	40021000 	.word	0x40021000

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219e:	2610      	movs	r6, #16
{
 80021a0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	222c      	movs	r2, #44	; 0x2c
 80021a4:	2100      	movs	r1, #0
 80021a6:	a809      	add	r0, sp, #36	; 0x24
 80021a8:	f003 ff65 	bl	8006076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	0032      	movs	r2, r6
 80021ae:	2100      	movs	r1, #0
 80021b0:	4668      	mov	r0, sp
 80021b2:	f003 ff60 	bl	8006076 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b6:	0032      	movs	r2, r6
 80021b8:	2100      	movs	r1, #0
 80021ba:	a804      	add	r0, sp, #16
 80021bc:	f003 ff5b 	bl	8006076 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80021c0:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80021c6:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ca:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021cc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ce:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80021d2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d4:	f001 fde8 	bl	8003da8 <HAL_RCC_OscConfig>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80021de:	e7fe      	b.n	80021de <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e0:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e4:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021e6:	0029      	movs	r1, r5
 80021e8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ec:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021ee:	f002 f80d 	bl	800420c <HAL_RCC_ClockConfig>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d001      	beq.n	80021fa <SystemClock_Config+0x5e>
 80021f6:	b672      	cpsid	i
	while (1)
 80021f8:	e7fe      	b.n	80021f8 <SystemClock_Config+0x5c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021fa:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80021fc:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fe:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002200:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002202:	f002 f897 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	2800      	cmp	r0, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0x72>
 800220a:	b672      	cpsid	i
	while (1)
 800220c:	e7fe      	b.n	800220c <SystemClock_Config+0x70>
}
 800220e:	b014      	add	sp, #80	; 0x50
 8002210:	bd70      	pop	{r4, r5, r6, pc}
	...

08002214 <Callback_1000ms>:
	Carro.Nivel = READ_NIVEL;
 8002214:	2090      	movs	r0, #144	; 0x90
{
 8002216:	b570      	push	{r4, r5, r6, lr}
	Carro.Nivel = READ_NIVEL;
 8002218:	2108      	movs	r1, #8
 800221a:	05c0      	lsls	r0, r0, #23
 800221c:	f001 fb3e 	bl	800389c <HAL_GPIO_ReadPin>
 8002220:	4c48      	ldr	r4, [pc, #288]	; (8002344 <Callback_1000ms+0x130>)
 8002222:	0023      	movs	r3, r4
 8002224:	3338      	adds	r3, #56	; 0x38
 8002226:	7018      	strb	r0, [r3, #0]
	Carro.Velocidade_ms = ((float)Carro.Clock_rpm/DEF_NUM_DENTES) * ((float)Carro.Diametro_pneu/100)* 3.6 * 3.14 * 1/10;
 8002228:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800222a:	f7fe ffaf 	bl	800118c <__aeabi_ui2f>
 800222e:	4946      	ldr	r1, [pc, #280]	; (8002348 <Callback_1000ms+0x134>)
 8002230:	f7fe faf0 	bl	8000814 <__aeabi_fdiv>
 8002234:	8b26      	ldrh	r6, [r4, #24]
 8002236:	1c05      	adds	r5, r0, #0
 8002238:	b2b6      	uxth	r6, r6
 800223a:	0030      	movs	r0, r6
 800223c:	f7fe ffa6 	bl	800118c <__aeabi_ui2f>
 8002240:	4942      	ldr	r1, [pc, #264]	; (800234c <Callback_1000ms+0x138>)
 8002242:	f7fe fae7 	bl	8000814 <__aeabi_fdiv>
 8002246:	1c01      	adds	r1, r0, #0
 8002248:	1c28      	adds	r0, r5, #0
 800224a:	f7fe fcab 	bl	8000ba4 <__aeabi_fmul>
 800224e:	f7ff fd41 	bl	8001cd4 <__aeabi_f2d>
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <Callback_1000ms+0x13c>)
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <Callback_1000ms+0x140>)
 8002256:	f7ff fad1 	bl	80017fc <__aeabi_dmul>
 800225a:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <Callback_1000ms+0x144>)
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <Callback_1000ms+0x148>)
 800225e:	f7ff facd 	bl	80017fc <__aeabi_dmul>
 8002262:	2200      	movs	r2, #0
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <Callback_1000ms+0x14c>)
 8002266:	f7fe ffd3 	bl	8001210 <__aeabi_ddiv>
 800226a:	f7ff fd7b 	bl	8001d64 <__aeabi_d2f>
 800226e:	6260      	str	r0, [r4, #36]	; 0x24
	Carro.Velocidade_kmh = Carro.Velocidade_ms* 3.6;
 8002270:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002272:	f7ff fd2f 	bl	8001cd4 <__aeabi_f2d>
 8002276:	4a36      	ldr	r2, [pc, #216]	; (8002350 <Callback_1000ms+0x13c>)
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <Callback_1000ms+0x140>)
 800227a:	f7ff fabf 	bl	80017fc <__aeabi_dmul>
 800227e:	f7ff fd71 	bl	8001d64 <__aeabi_d2f>
	if(Carro.Switch_bomba_1 == 1)
 8002282:	0023      	movs	r3, r4
	Carro.Velocidade_kmh = Carro.Velocidade_ms* 3.6;
 8002284:	6220      	str	r0, [r4, #32]
	if(Carro.Switch_bomba_1 == 1)
 8002286:	3339      	adds	r3, #57	; 0x39
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	0023      	movs	r3, r4
 800228c:	333b      	adds	r3, #59	; 0x3b
 800228e:	2a01      	cmp	r2, #1
 8002290:	d14f      	bne.n	8002332 <Callback_1000ms+0x11e>
		Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 8002292:	6a65      	ldr	r5, [r4, #36]	; 0x24
		Carro.FLAG_bomba_1 = 1;
 8002294:	701a      	strb	r2, [r3, #0]
		Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 8002296:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002298:	f7fe ff78 	bl	800118c <__aeabi_ui2f>
 800229c:	1c29      	adds	r1, r5, #0
 800229e:	f7fe f91b 	bl	80004d8 <__aeabi_fadd>
 80022a2:	f7fe f901 	bl	80004a8 <__aeabi_f2uiz>
		Carro.Delta_Area 		= Carro.Delta_Area + (Carro.Velocidade_ms * ( Carro.Comprimento_braco/100));
 80022a6:	2164      	movs	r1, #100	; 0x64
		Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 80022a8:	62e0      	str	r0, [r4, #44]	; 0x2c
		Carro.Delta_Area 		= Carro.Delta_Area + (Carro.Velocidade_ms * ( Carro.Comprimento_braco/100));
 80022aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80022ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022ae:	f7fd ff3f 	bl	8000130 <__udivsi3>
 80022b2:	f7fe ff6b 	bl	800118c <__aeabi_ui2f>
 80022b6:	1c29      	adds	r1, r5, #0
 80022b8:	f7fe fc74 	bl	8000ba4 <__aeabi_fmul>
 80022bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80022be:	f7fe f90b 	bl	80004d8 <__aeabi_fadd>
 80022c2:	6320      	str	r0, [r4, #48]	; 0x30
	if(Carro.Velocidade_kmh >= Carro.Velocidade_troca || Carro.MODO == 1)
 80022c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80022c6:	f7fe ff61 	bl	800118c <__aeabi_ui2f>
 80022ca:	6a25      	ldr	r5, [r4, #32]
 80022cc:	1c01      	adds	r1, r0, #0
 80022ce:	1c28      	adds	r0, r5, #0
 80022d0:	f7fe f8e0 	bl	8000494 <__aeabi_fcmpge>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d102      	bne.n	80022de <Callback_1000ms+0xca>
 80022d8:	7823      	ldrb	r3, [r4, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12c      	bne.n	8002338 <Callback_1000ms+0x124>
		if(Carro.Switch_bomba_2 == 1)
 80022de:	0023      	movs	r3, r4
 80022e0:	333a      	adds	r3, #58	; 0x3a
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d127      	bne.n	8002338 <Callback_1000ms+0x124>
			Carro.FLAG_bomba_2 = 1;
 80022e8:	0022      	movs	r2, r4
			Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 80022ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
			Carro.FLAG_bomba_2 = 1;
 80022ec:	323c      	adds	r2, #60	; 0x3c
 80022ee:	7013      	strb	r3, [r2, #0]
			Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 80022f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022f2:	f7fe ff4b 	bl	800118c <__aeabi_ui2f>
 80022f6:	1c31      	adds	r1, r6, #0
 80022f8:	f7fe f8ee 	bl	80004d8 <__aeabi_fadd>
 80022fc:	f7fe f8d4 	bl	80004a8 <__aeabi_f2uiz>
			Carro.Delta_Area 		= Carro.Delta_Area + (Carro.Velocidade_ms * ( Carro.Comprimento_braco/100));
 8002300:	2164      	movs	r1, #100	; 0x64
			Carro.Delta_D_metros = Carro.Delta_D_metros +  Carro.Velocidade_ms;
 8002302:	62e0      	str	r0, [r4, #44]	; 0x2c
			Carro.Delta_Area 		= Carro.Delta_Area + (Carro.Velocidade_ms * ( Carro.Comprimento_braco/100));
 8002304:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002306:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002308:	f7fd ff12 	bl	8000130 <__udivsi3>
 800230c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800230e:	f7fe ff3d 	bl	800118c <__aeabi_ui2f>
 8002312:	1c31      	adds	r1, r6, #0
 8002314:	f7fe fc46 	bl	8000ba4 <__aeabi_fmul>
 8002318:	1c29      	adds	r1, r5, #0
 800231a:	f7fe f8dd 	bl	80004d8 <__aeabi_fadd>
 800231e:	6320      	str	r0, [r4, #48]	; 0x30
	Carro.Delta_Hect = Carro.Delta_Area / 10000;
 8002320:	4910      	ldr	r1, [pc, #64]	; (8002364 <Callback_1000ms+0x150>)
 8002322:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002324:	f7fe fa76 	bl	8000814 <__aeabi_fdiv>
	FLAG_REFRESH 		= 	1;
 8002328:	2201      	movs	r2, #1
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <Callback_1000ms+0x154>)
	Carro.Delta_Hect = Carro.Delta_Area / 10000;
 800232c:	6360      	str	r0, [r4, #52]	; 0x34
	FLAG_REFRESH 		= 	1;
 800232e:	701a      	strb	r2, [r3, #0]
}//
 8002330:	bd70      	pop	{r4, r5, r6, pc}
		Carro.FLAG_bomba_1 = 0;
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e7c5      	b.n	80022c4 <Callback_1000ms+0xb0>
			Carro.FLAG_bomba_2 = 0;
 8002338:	0023      	movs	r3, r4
 800233a:	2200      	movs	r2, #0
 800233c:	333c      	adds	r3, #60	; 0x3c
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e7ee      	b.n	8002320 <Callback_1000ms+0x10c>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000288 	.word	0x20000288
 8002348:	42c80000 	.word	0x42c80000
 800234c:	40400000 	.word	0x40400000
 8002350:	cccccccd 	.word	0xcccccccd
 8002354:	400ccccc 	.word	0x400ccccc
 8002358:	51eb851f 	.word	0x51eb851f
 800235c:	40091eb8 	.word	0x40091eb8
 8002360:	40240000 	.word	0x40240000
 8002364:	461c4000 	.word	0x461c4000
 8002368:	20000334 	.word	0x20000334

0800236c <Callback_CURTO_PB_ESQ>:
	BTN_ESQ.ContPress	= 0;
 800236c:	2200      	movs	r2, #0
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <Callback_CURTO_PB_ESQ+0x90>)
{
 8002370:	b510      	push	{r4, lr}
	BTN_ESQ.ContPress	= 0;
 8002372:	809a      	strh	r2, [r3, #4]
	__NOP();
 8002374:	46c0      	nop			; (mov r8, r8)
	switch (Selecao_Tela) {
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <Callback_CURTO_PB_ESQ+0x94>)
 8002378:	7818      	ldrb	r0, [r3, #0]
 800237a:	3801      	subs	r0, #1
 800237c:	280b      	cmp	r0, #11
 800237e:	d814      	bhi.n	80023aa <Callback_CURTO_PB_ESQ+0x3e>
 8002380:	f7fd fec2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002384:	13131306 	.word	0x13131306
 8002388:	17131313 	.word	0x17131313
 800238c:	36132e24 	.word	0x36132e24
			FLAG_REFRESH = 1;
 8002390:	2201      	movs	r2, #1
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <Callback_CURTO_PB_ESQ+0x98>)
 8002394:	701a      	strb	r2, [r3, #0]
			if(Carro.Switch_bomba_1==1)
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <Callback_CURTO_PB_ESQ+0x9c>)
 8002398:	3339      	adds	r3, #57	; 0x39
 800239a:	7819      	ldrb	r1, [r3, #0]
 800239c:	4291      	cmp	r1, r2
 800239e:	d105      	bne.n	80023ac <Callback_CURTO_PB_ESQ+0x40>
				Carro.Switch_bomba_1 = 0;
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
				M_LED_1_ON
 80023a4:	4819      	ldr	r0, [pc, #100]	; (800240c <Callback_CURTO_PB_ESQ+0xa0>)
 80023a6:	f001 fa7f 	bl	80038a8 <HAL_GPIO_WritePin>
}//
 80023aa:	bd10      	pop	{r4, pc}
				M_LED_1_ON
 80023ac:	0011      	movs	r1, r2
				Carro.Switch_bomba_1 = 1;
 80023ae:	701a      	strb	r2, [r3, #0]
				M_LED_1_ON
 80023b0:	e7f8      	b.n	80023a4 <Callback_CURTO_PB_ESQ+0x38>
			if(Carro.Diametro_pneu > DEF_LIMITE_DIAMETRO_MIN)
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <Callback_CURTO_PB_ESQ+0x9c>)
 80023b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023b6:	2b28      	cmp	r3, #40	; 0x28
 80023b8:	d905      	bls.n	80023c6 <Callback_CURTO_PB_ESQ+0x5a>
				Carro.Diametro_pneu--;
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
			FLAG_REFRESH = 1;
 80023be:	2201      	movs	r2, #1
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <Callback_CURTO_PB_ESQ+0x98>)
 80023c2:	701a      	strb	r2, [r3, #0]
}//
 80023c4:	e7f1      	b.n	80023aa <Callback_CURTO_PB_ESQ+0x3e>
				Carro.Diametro_pneu=DEF_LIMITE_DIAMETRO_MAX;
 80023c6:	23fa      	movs	r3, #250	; 0xfa
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	e7f7      	b.n	80023bc <Callback_CURTO_PB_ESQ+0x50>
			if(Carro.Comprimento_braco > DEF_LIMITE_LARGURA_MIN)
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <Callback_CURTO_PB_ESQ+0x9c>)
 80023ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80023d0:	2b28      	cmp	r3, #40	; 0x28
 80023d2:	d902      	bls.n	80023da <Callback_CURTO_PB_ESQ+0x6e>
				Carro.Comprimento_braco--;
 80023d4:	3b01      	subs	r3, #1
 80023d6:	6453      	str	r3, [r2, #68]	; 0x44
			FLAG_REFRESH = 1;
 80023d8:	e7f1      	b.n	80023be <Callback_CURTO_PB_ESQ+0x52>
				Carro.Comprimento_braco=DEF_LIMITE_LARGURA_MAX;
 80023da:	23c8      	movs	r3, #200	; 0xc8
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	e7fa      	b.n	80023d6 <Callback_CURTO_PB_ESQ+0x6a>
			if(Carro.Velocidade_troca > DEF_VELOCIDADE_MIN)
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <Callback_CURTO_PB_ESQ+0x9c>)
				Carro.Velocidade_troca=DEF_VELOCIDADE_MAX;
 80023e2:	221e      	movs	r2, #30
			if(Carro.Velocidade_troca > DEF_VELOCIDADE_MIN)
 80023e4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80023e6:	2902      	cmp	r1, #2
 80023e8:	d900      	bls.n	80023ec <Callback_CURTO_PB_ESQ+0x80>
				Carro.Velocidade_troca--;
 80023ea:	1e4a      	subs	r2, r1, #1
 80023ec:	649a      	str	r2, [r3, #72]	; 0x48
			FLAG_REFRESH = 1;
 80023ee:	e7e6      	b.n	80023be <Callback_CURTO_PB_ESQ+0x52>
			Carro.MODO = !Carro.MODO;
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <Callback_CURTO_PB_ESQ+0x9c>)
 80023f2:	7813      	ldrb	r3, [r2, #0]
 80023f4:	4259      	negs	r1, r3
 80023f6:	414b      	adcs	r3, r1
 80023f8:	7013      	strb	r3, [r2, #0]
 80023fa:	e7e0      	b.n	80023be <Callback_CURTO_PB_ESQ+0x52>
 80023fc:	200001f8 	.word	0x200001f8
 8002400:	2000033c 	.word	0x2000033c
 8002404:	20000334 	.word	0x20000334
 8002408:	20000288 	.word	0x20000288
 800240c:	48000400 	.word	0x48000400

08002410 <Callback_LONGO_PB_ESQ>:
	BTN_ESQ.ContPress	= 0;
 8002410:	2200      	movs	r2, #0
 8002412:	4b02      	ldr	r3, [pc, #8]	; (800241c <Callback_LONGO_PB_ESQ+0xc>)
 8002414:	809a      	strh	r2, [r3, #4]
	__NOP();
 8002416:	46c0      	nop			; (mov r8, r8)
}
 8002418:	4770      	bx	lr
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	200001f8 	.word	0x200001f8

08002420 <Callback_CURTO_PB_DIR>:
	BTN_DIR.ContPress	= 0;
 8002420:	2200      	movs	r2, #0
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <Callback_CURTO_PB_DIR+0x90>)
{
 8002424:	b510      	push	{r4, lr}
	BTN_DIR.ContPress	= 0;
 8002426:	809a      	strh	r2, [r3, #4]
	__NOP();
 8002428:	46c0      	nop			; (mov r8, r8)
	switch (Selecao_Tela) {
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <Callback_CURTO_PB_DIR+0x94>)
 800242c:	7818      	ldrb	r0, [r3, #0]
 800242e:	3801      	subs	r0, #1
 8002430:	280b      	cmp	r0, #11
 8002432:	d815      	bhi.n	8002460 <Callback_CURTO_PB_DIR+0x40>
 8002434:	f7fd fe68 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002438:	14141406 	.word	0x14141406
 800243c:	15141414 	.word	0x15141414
 8002440:	35142d22 	.word	0x35142d22
			FLAG_REFRESH = 1;
 8002444:	2201      	movs	r2, #1
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <Callback_CURTO_PB_DIR+0x98>)
 8002448:	701a      	strb	r2, [r3, #0]
			if(Carro.Switch_bomba_2==1)
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <Callback_CURTO_PB_DIR+0x9c>)
 800244c:	333a      	adds	r3, #58	; 0x3a
 800244e:	7819      	ldrb	r1, [r3, #0]
 8002450:	4291      	cmp	r1, r2
 8002452:	d100      	bne.n	8002456 <Callback_CURTO_PB_DIR+0x36>
				Carro.Switch_bomba_2 = 0;
 8002454:	2200      	movs	r2, #0
				M_LED_2_ON
 8002456:	2102      	movs	r1, #2
 8002458:	4819      	ldr	r0, [pc, #100]	; (80024c0 <Callback_CURTO_PB_DIR+0xa0>)
				Carro.Switch_bomba_2 = 1;
 800245a:	701a      	strb	r2, [r3, #0]
				M_LED_2_ON
 800245c:	f001 fa24 	bl	80038a8 <HAL_GPIO_WritePin>
}//
 8002460:	bd10      	pop	{r4, pc}
			if(Carro.Diametro_pneu < DEF_LIMITE_DIAMETRO_MAX)
 8002462:	20fa      	movs	r0, #250	; 0xfa
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <Callback_CURTO_PB_DIR+0x9c>)
				Carro.Diametro_pneu = DEF_LIMITE_DIAMETRO_MIN;
 8002466:	2228      	movs	r2, #40	; 0x28
			if(Carro.Diametro_pneu < DEF_LIMITE_DIAMETRO_MAX)
 8002468:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800246a:	0040      	lsls	r0, r0, #1
 800246c:	4281      	cmp	r1, r0
 800246e:	d200      	bcs.n	8002472 <Callback_CURTO_PB_DIR+0x52>
				Carro.Diametro_pneu++;
 8002470:	1c4a      	adds	r2, r1, #1
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
			FLAG_REFRESH = 1;
 8002474:	2201      	movs	r2, #1
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <Callback_CURTO_PB_DIR+0x98>)
 8002478:	701a      	strb	r2, [r3, #0]
}//
 800247a:	e7f1      	b.n	8002460 <Callback_CURTO_PB_DIR+0x40>
			if(Carro.Comprimento_braco < DEF_LIMITE_LARGURA_MAX)
 800247c:	20c8      	movs	r0, #200	; 0xc8
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <Callback_CURTO_PB_DIR+0x9c>)
				Carro.Comprimento_braco=DEF_LIMITE_LARGURA_MIN;
 8002480:	2228      	movs	r2, #40	; 0x28
			if(Carro.Comprimento_braco < DEF_LIMITE_LARGURA_MAX)
 8002482:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002484:	0040      	lsls	r0, r0, #1
 8002486:	4281      	cmp	r1, r0
 8002488:	d201      	bcs.n	800248e <Callback_CURTO_PB_DIR+0x6e>
				Carro.Comprimento_braco+=10;
 800248a:	000a      	movs	r2, r1
 800248c:	320a      	adds	r2, #10
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
			FLAG_REFRESH = 1;
 8002490:	e7f0      	b.n	8002474 <Callback_CURTO_PB_DIR+0x54>
			if(Carro.Velocidade_troca < DEF_VELOCIDADE_MAX)
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <Callback_CURTO_PB_DIR+0x9c>)
				Carro.Velocidade_troca=DEF_VELOCIDADE_MIN;
 8002494:	2202      	movs	r2, #2
			if(Carro.Velocidade_troca < DEF_VELOCIDADE_MAX)
 8002496:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002498:	291d      	cmp	r1, #29
 800249a:	d800      	bhi.n	800249e <Callback_CURTO_PB_DIR+0x7e>
				Carro.Velocidade_troca++;
 800249c:	1c4a      	adds	r2, r1, #1
 800249e:	649a      	str	r2, [r3, #72]	; 0x48
			FLAG_REFRESH = 1;
 80024a0:	e7e8      	b.n	8002474 <Callback_CURTO_PB_DIR+0x54>
			Carro.MODO = !Carro.MODO;
 80024a2:	4a06      	ldr	r2, [pc, #24]	; (80024bc <Callback_CURTO_PB_DIR+0x9c>)
 80024a4:	7813      	ldrb	r3, [r2, #0]
 80024a6:	4259      	negs	r1, r3
 80024a8:	414b      	adcs	r3, r1
 80024aa:	7013      	strb	r3, [r2, #0]
 80024ac:	e7e2      	b.n	8002474 <Callback_CURTO_PB_DIR+0x54>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	200001f0 	.word	0x200001f0
 80024b4:	2000033c 	.word	0x2000033c
 80024b8:	20000334 	.word	0x20000334
 80024bc:	20000288 	.word	0x20000288
 80024c0:	48000400 	.word	0x48000400

080024c4 <Callback_LONGO_PB_DIR>:
	BTN_DIR.ContPress	= 0;
 80024c4:	2200      	movs	r2, #0
 80024c6:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <Callback_LONGO_PB_DIR+0xc>)
 80024c8:	809a      	strh	r2, [r3, #4]
	__NOP();
 80024ca:	46c0      	nop			; (mov r8, r8)
}//
 80024cc:	4770      	bx	lr
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	200001f0 	.word	0x200001f0

080024d4 <Callback_LONGO_PB_MENU>:
	BTN_MENU.ContPress	= 0;
 80024d4:	2200      	movs	r2, #0
 80024d6:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <Callback_LONGO_PB_MENU+0xc>)
 80024d8:	809a      	strh	r2, [r3, #4]
	__NOP();
 80024da:	46c0      	nop			; (mov r8, r8)
}//
 80024dc:	4770      	bx	lr
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	20000200 	.word	0x20000200

080024e4 <HAL_TIM_IC_CaptureCallback>:
	if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa8>)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80024e6:	b570      	push	{r4, r5, r6, lr}
	if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80024e8:	4298      	cmp	r0, r3
 80024ea:	d10d      	bne.n	8002508 <HAL_TIM_IC_CaptureCallback+0x24>
 80024ec:	7f06      	ldrb	r6, [r0, #28]
 80024ee:	2e01      	cmp	r6, #1
 80024f0:	d10a      	bne.n	8002508 <HAL_TIM_IC_CaptureCallback+0x24>
		if (Carro.IC.Is_First_Captured==0) {// is the first value captured ?
 80024f2:	4c27      	ldr	r4, [pc, #156]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xac>)
 80024f4:	0025      	movs	r5, r4
 80024f6:	3560      	adds	r5, #96	; 0x60
 80024f8:	882b      	ldrh	r3, [r5, #0]
 80024fa:	b299      	uxth	r1, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_TIM_IC_CaptureCallback+0x26>
			Carro.IC.Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8002500:	f001 ffca 	bl	8004498 <HAL_TIM_ReadCapturedValue>
 8002504:	6520      	str	r0, [r4, #80]	; 0x50
			Carro.IC.Is_First_Captured =1;  	// set the first value captured as true
 8002506:	802e      	strh	r6, [r5, #0]
}
 8002508:	bd70      	pop	{r4, r5, r6, pc}
		else if (Carro.IC.Is_First_Captured) {// if the first is captured
 800250a:	882b      	ldrh	r3, [r5, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0fb      	beq.n	8002508 <HAL_TIM_IC_CaptureCallback+0x24>
			Carro.IC.Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8002510:	2100      	movs	r1, #0
 8002512:	f001 ffc1 	bl	8004498 <HAL_TIM_ReadCapturedValue>
 8002516:	6560      	str	r0, [r4, #84]	; 0x54
			if (Carro.IC.Value2 > Carro.IC.Value1)
 8002518:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800251a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800251c:	429a      	cmp	r2, r3
 800251e:	d928      	bls.n	8002572 <HAL_TIM_IC_CaptureCallback+0x8e>
				Carro.IC.Difference = Carro.IC.Value2-Carro.IC.Value1;   // calculate the difference
 8002520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002522:	6d22      	ldr	r2, [r4, #80]	; 0x50
				Carro.IC.Difference = ((0xffff-Carro.IC.Value1)+Carro.IC.Value2);
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	65a3      	str	r3, [r4, #88]	; 0x58
			Carro.IC.Frequency = HAL_RCC_GetPCLK1Freq()/Carro.IC.Difference/100;  // calculate frequency
 8002528:	f001 fef4 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 800252c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800252e:	f7fd fdff 	bl	8000130 <__udivsi3>
 8002532:	2164      	movs	r1, #100	; 0x64
 8002534:	f7fd fdfc 	bl	8000130 <__udivsi3>
 8002538:	65e0      	str	r0, [r4, #92]	; 0x5c
			if(Carro.IC.Frequency > 3 && Carro.IC.Frequency < 100)//RANGE DE LEITURA ROTAÇÃO INDUTIVO
 800253a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800253c:	2b03      	cmp	r3, #3
 800253e:	d921      	bls.n	8002584 <HAL_TIM_IC_CaptureCallback+0xa0>
 8002540:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002542:	2b63      	cmp	r3, #99	; 0x63
 8002544:	d81e      	bhi.n	8002584 <HAL_TIM_IC_CaptureCallback+0xa0>
				Carro.Clock_rpm = Carro.IC.Frequency; // SETA A VARIAVEL COM A MÉDIA FIFO
 8002546:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002548:	b29b      	uxth	r3, r3
 800254a:	8323      	strh	r3, [r4, #24]
				Carro.Clock_rpm_Conv = (float)Carro.Clock_rpm*(float)Carro.Correcao_rpm;
 800254c:	8b20      	ldrh	r0, [r4, #24]
 800254e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002550:	b280      	uxth	r0, r0
 8002552:	f7fe fe1b 	bl	800118c <__aeabi_ui2f>
 8002556:	1c29      	adds	r1, r5, #0
 8002558:	f7fe fb24 	bl	8000ba4 <__aeabi_fmul>
 800255c:	f7fd ffa4 	bl	80004a8 <__aeabi_f2uiz>
 8002560:	61e0      	str	r0, [r4, #28]
			Carro.IC.Is_First_Captured 		= 0;  					// reset the first captured
 8002562:	0023      	movs	r3, r4
 8002564:	2200      	movs	r2, #0
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	801a      	strh	r2, [r3, #0]
			Carro.IC.IC_compare1			= 1;//controle de perca de rotação
 800256a:	2301      	movs	r3, #1
 800256c:	3464      	adds	r4, #100	; 0x64
 800256e:	8023      	strh	r3, [r4, #0]
}
 8002570:	e7ca      	b.n	8002508 <HAL_TIM_IC_CaptureCallback+0x24>
			else if (Carro.IC.Value2 < Carro.IC.Value1)
 8002572:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002574:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002576:	429a      	cmp	r2, r3
 8002578:	d2d6      	bcs.n	8002528 <HAL_TIM_IC_CaptureCallback+0x44>
				Carro.IC.Difference = ((0xffff-Carro.IC.Value1)+Carro.IC.Value2);
 800257a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800257c:	4905      	ldr	r1, [pc, #20]	; (8002594 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800257e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002580:	185b      	adds	r3, r3, r1
 8002582:	e7cf      	b.n	8002524 <HAL_TIM_IC_CaptureCallback+0x40>
				Carro.Clock_rpm = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	8323      	strh	r3, [r4, #24]
 8002588:	e7eb      	b.n	8002562 <HAL_TIM_IC_CaptureCallback+0x7e>
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	200003c8 	.word	0x200003c8
 8002590:	20000288 	.word	0x20000288
 8002594:	0000ffff 	.word	0x0000ffff

08002598 <Controle_De_Telas>:
void Controle_De_Telas(void){
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(Selecao_Tela_next != Selecao_Tela){
 800259a:	4b25      	ldr	r3, [pc, #148]	; (8002630 <Controle_De_Telas+0x98>)
 800259c:	4e25      	ldr	r6, [pc, #148]	; (8002634 <Controle_De_Telas+0x9c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	7832      	ldrb	r2, [r6, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d003      	beq.n	80025ae <Controle_De_Telas+0x16>
		FLAG_REFRESH = 1;					//SOLICITA ATUALIZAÇÃO DE TELA
 80025a6:	2201      	movs	r2, #1
		Selecao_Tela = Selecao_Tela_next;	//ATUALIZA PARA PRÓXIMA TELA
 80025a8:	7033      	strb	r3, [r6, #0]
		FLAG_REFRESH = 1;					//SOLICITA ATUALIZAÇÃO DE TELA
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <Controle_De_Telas+0xa0>)
 80025ac:	701a      	strb	r2, [r3, #0]
	if(FLAG_TELA_BUSY == 0 && FLAG_REFRESH){
 80025ae:	4c23      	ldr	r4, [pc, #140]	; (800263c <Controle_De_Telas+0xa4>)
 80025b0:	4d23      	ldr	r5, [pc, #140]	; (8002640 <Controle_De_Telas+0xa8>)
 80025b2:	7822      	ldrb	r2, [r4, #0]
 80025b4:	2a00      	cmp	r2, #0
 80025b6:	d118      	bne.n	80025ea <Controle_De_Telas+0x52>
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <Controle_De_Telas+0xa0>)
 80025ba:	7819      	ldrb	r1, [r3, #0]
 80025bc:	2900      	cmp	r1, #0
 80025be:	d014      	beq.n	80025ea <Controle_De_Telas+0x52>
		FLAG_REFRESH 		= 	0;			//RESETA FLAG DE LIBERAÇÃO DE TELA
 80025c0:	701a      	strb	r2, [r3, #0]
		FLAG_ATUALIZA_TELA	=	1;			//LIBERA IMPRESSÃO EM DISPLAY
 80025c2:	2301      	movs	r3, #1
 80025c4:	702b      	strb	r3, [r5, #0]
		FLAG_TELA_BUSY = 1;		//SETA DISPLAY COMO OCUPADO
 80025c6:	2301      	movs	r3, #1
		u8g_FirstPage(&u8g);
 80025c8:	4f1e      	ldr	r7, [pc, #120]	; (8002644 <Controle_De_Telas+0xac>)
		FLAG_TELA_BUSY = 1;		//SETA DISPLAY COMO OCUPADO
 80025ca:	7023      	strb	r3, [r4, #0]
		u8g_FirstPage(&u8g);
 80025cc:	0038      	movs	r0, r7
 80025ce:	f003 fa4f 	bl	8005a70 <u8g_FirstPage>
			switch (Selecao_Tela) {
 80025d2:	7830      	ldrb	r0, [r6, #0]
 80025d4:	3801      	subs	r0, #1
 80025d6:	280b      	cmp	r0, #11
 80025d8:	d80e      	bhi.n	80025f8 <Controle_De_Telas+0x60>
 80025da:	f7fd fd95 	bl	8000108 <__gnu_thumb1_case_uqi>
 80025de:	0d0a      	.short	0x0d0a
 80025e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80025e4:	1f1a150d 	.word	0x1f1a150d
 80025e8:	240d      	.short	0x240d
	if(FLAG_ATUALIZA_TELA==1){
 80025ea:	782b      	ldrb	r3, [r5, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d0ea      	beq.n	80025c6 <Controle_De_Telas+0x2e>
}//
 80025f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					Draw_principal(&Carro);
 80025f2:	4815      	ldr	r0, [pc, #84]	; (8002648 <Controle_De_Telas+0xb0>)
 80025f4:	f002 fb24 	bl	8004c40 <Draw_principal>
		} while( u8g_NextPage(&u8g));
 80025f8:	0038      	movs	r0, r7
 80025fa:	f003 fa3e 	bl	8005a7a <u8g_NextPage>
 80025fe:	2800      	cmp	r0, #0
 8002600:	d1e7      	bne.n	80025d2 <Controle_De_Telas+0x3a>
		FLAG_ATUALIZA_TELA = 0;		//RESETA LIBERAÇÃO DE IMPRESSÃO EM DISPLAY
 8002602:	7028      	strb	r0, [r5, #0]
		FLAG_TELA_BUSY = 0;			//DESOCUPA DISPLAY
 8002604:	7020      	strb	r0, [r4, #0]
}//
 8002606:	e7f3      	b.n	80025f0 <Controle_De_Telas+0x58>
					Tela_Menu_Raio(Carro.Diametro_pneu);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <Controle_De_Telas+0xb0>)
 800260a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800260c:	f002 fbe8 	bl	8004de0 <Tela_Menu_Raio>
					break;
 8002610:	e7f2      	b.n	80025f8 <Controle_De_Telas+0x60>
					Tela_Menu_braco(Carro.Comprimento_braco);
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <Controle_De_Telas+0xb0>)
 8002614:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002616:	f002 fc45 	bl	8004ea4 <Tela_Menu_braco>
					break;
 800261a:	e7ed      	b.n	80025f8 <Controle_De_Telas+0x60>
					Tela_Menu_Vel_troca(Carro.Velocidade_troca);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Controle_De_Telas+0xb0>)
 800261e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002620:	f002 fca2 	bl	8004f68 <Tela_Menu_Vel_troca>
					break;
 8002624:	e7e8      	b.n	80025f8 <Controle_De_Telas+0x60>
					Tela_Menu_Modo(Carro.MODO);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <Controle_De_Telas+0xb0>)
 8002628:	7818      	ldrb	r0, [r3, #0]
 800262a:	f002 fcff 	bl	800502c <Tela_Menu_Modo>
					break;
 800262e:	e7e3      	b.n	80025f8 <Controle_De_Telas+0x60>
 8002630:	20000001 	.word	0x20000001
 8002634:	2000033c 	.word	0x2000033c
 8002638:	20000334 	.word	0x20000334
 800263c:	20000335 	.word	0x20000335
 8002640:	20000000 	.word	0x20000000
 8002644:	20000340 	.word	0x20000340
 8002648:	20000288 	.word	0x20000288

0800264c <Write_in_flash_HIBRIDO>:
void Write_in_flash_HIBRIDO(uint32_t Address_Var, uint32_t Value_Var ){
 800264c:	000a      	movs	r2, r1
 800264e:	b510      	push	{r4, lr}
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address_Var, Value_Var) != HAL_OK){// trocar pelo valor atribuido na IHM
 8002650:	0001      	movs	r1, r0
 8002652:	2300      	movs	r3, #0
 8002654:	2002      	movs	r0, #2
 8002656:	f000 ffc1 	bl	80035dc <HAL_FLASH_Program>
 800265a:	2800      	cmp	r0, #0
 800265c:	d008      	beq.n	8002670 <Write_in_flash_HIBRIDO+0x24>
			HAL_Delay(2000);
 800265e:	24fa      	movs	r4, #250	; 0xfa
 8002660:	00e4      	lsls	r4, r4, #3
			HAL_Delay(100);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f000 fbb0 	bl	8002dc8 <HAL_Delay>
			HAL_Delay(2000);
 8002668:	0020      	movs	r0, r4
 800266a:	f000 fbad 	bl	8002dc8 <HAL_Delay>
		while (1){
 800266e:	e7f8      	b.n	8002662 <Write_in_flash_HIBRIDO+0x16>
}
 8002670:	bd10      	pop	{r4, pc}
	...

08002674 <Grava_memoria>:
void Grava_memoria(void){
 8002674:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8002676:	f000 ff69 	bl	800354c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800267a:	2300      	movs	r3, #0
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <Grava_memoria+0x50>)
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK){
 800267e:	4912      	ldr	r1, [pc, #72]	; (80026c8 <Grava_memoria+0x54>)
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002680:	6003      	str	r3, [r0, #0]
	EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <Grava_memoria+0x58>)
 8002684:	6043      	str	r3, [r0, #4]
	EraseInitStruct.NbPages     = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE;
 8002686:	2301      	movs	r3, #1
 8002688:	6083      	str	r3, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK){
 800268a:	f001 f80d 	bl	80036a8 <HAL_FLASHEx_Erase>
 800268e:	2800      	cmp	r0, #0
 8002690:	d008      	beq.n	80026a4 <Grava_memoria+0x30>
			HAL_Delay(2000);
 8002692:	24fa      	movs	r4, #250	; 0xfa
 8002694:	00e4      	lsls	r4, r4, #3
			HAL_Delay(100);
 8002696:	2064      	movs	r0, #100	; 0x64
 8002698:	f000 fb96 	bl	8002dc8 <HAL_Delay>
			HAL_Delay(2000);
 800269c:	0020      	movs	r0, r4
 800269e:	f000 fb93 	bl	8002dc8 <HAL_Delay>
		while (1){
 80026a2:	e7f8      	b.n	8002696 <Grava_memoria+0x22>
	Write_in_flash_HIBRIDO(FLASH_USER_DIAMETRO	,Carro.Diametro_pneu);
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <Grava_memoria+0x5c>)
 80026a6:	480b      	ldr	r0, [pc, #44]	; (80026d4 <Grava_memoria+0x60>)
 80026a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026aa:	f7ff ffcf 	bl	800264c <Write_in_flash_HIBRIDO>
	Write_in_flash_HIBRIDO(FLASH_USER_LARGURA		,Carro.Comprimento_braco);
 80026ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026b0:	4809      	ldr	r0, [pc, #36]	; (80026d8 <Grava_memoria+0x64>)
 80026b2:	f7ff ffcb 	bl	800264c <Write_in_flash_HIBRIDO>
	Write_in_flash_HIBRIDO(FLASH_USER_VEL_MIN		,Carro.Velocidade_troca);
 80026b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <Grava_memoria+0x68>)
 80026ba:	f7ff ffc7 	bl	800264c <Write_in_flash_HIBRIDO>
	HAL_FLASH_Lock();
 80026be:	f000 ff59 	bl	8003574 <HAL_FLASH_Lock>
}
 80026c2:	bd10      	pop	{r4, pc}
 80026c4:	20000324 	.word	0x20000324
 80026c8:	20000338 	.word	0x20000338
 80026cc:	08007c00 	.word	0x08007c00
 80026d0:	20000288 	.word	0x20000288
 80026d4:	08007fdc 	.word	0x08007fdc
 80026d8:	08007fe4 	.word	0x08007fe4
 80026dc:	08007ffc 	.word	0x08007ffc

080026e0 <Callback_CURTO_PB_MENU>:
	BTN_MENU.ContPress	= 0;
 80026e0:	2200      	movs	r2, #0
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <Callback_CURTO_PB_MENU+0x4c>)
{
 80026e4:	b510      	push	{r4, lr}
	BTN_MENU.ContPress	= 0;
 80026e6:	809a      	strh	r2, [r3, #4]
	__NOP();
 80026e8:	46c0      	nop			; (mov r8, r8)
	switch (Selecao_Tela) {
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <Callback_CURTO_PB_MENU+0x50>)
 80026ec:	7818      	ldrb	r0, [r3, #0]
 80026ee:	3801      	subs	r0, #1
 80026f0:	280b      	cmp	r0, #11
 80026f2:	d80a      	bhi.n	800270a <Callback_CURTO_PB_MENU+0x2a>
 80026f4:	f7fd fd08 	bl	8000108 <__gnu_thumb1_case_uqi>
 80026f8:	09090906 	.word	0x09090906
 80026fc:	0a090909 	.word	0x0a090909
 8002700:	16091310 	.word	0x16091310
			Selecao_Tela_next = TELA_DIAMETRO_PNEU;
 8002704:	2208      	movs	r2, #8
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <Callback_CURTO_PB_MENU+0x54>)
 8002708:	701a      	strb	r2, [r3, #0]
}//
 800270a:	bd10      	pop	{r4, pc}
			Selecao_Tela_next = TELA_LARGURA_BRACO;
 800270c:	2209      	movs	r2, #9
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <Callback_CURTO_PB_MENU+0x54>)
			Selecao_Tela_next = TELA_PRINCIPAL;
 8002710:	701a      	strb	r2, [r3, #0]
			Grava_memoria();//ATUALIZA MEMORIA QUANDO TROCADA A TELA
 8002712:	f7ff ffaf 	bl	8002674 <Grava_memoria>
}//
 8002716:	e7f8      	b.n	800270a <Callback_CURTO_PB_MENU+0x2a>
			Selecao_Tela_next = TELA_VELOCIDADE_TROCA;
 8002718:	220a      	movs	r2, #10
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <Callback_CURTO_PB_MENU+0x54>)
 800271c:	e7f8      	b.n	8002710 <Callback_CURTO_PB_MENU+0x30>
			Selecao_Tela_next = TELA_MODO;
 800271e:	220c      	movs	r2, #12
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <Callback_CURTO_PB_MENU+0x54>)
 8002722:	e7f5      	b.n	8002710 <Callback_CURTO_PB_MENU+0x30>
			Selecao_Tela_next = TELA_PRINCIPAL;
 8002724:	2201      	movs	r2, #1
 8002726:	4b03      	ldr	r3, [pc, #12]	; (8002734 <Callback_CURTO_PB_MENU+0x54>)
 8002728:	e7f2      	b.n	8002710 <Callback_CURTO_PB_MENU+0x30>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	20000200 	.word	0x20000200
 8002730:	2000033c 	.word	0x2000033c
 8002734:	20000001 	.word	0x20000001

08002738 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002738:	b570      	push	{r4, r5, r6, lr}
	switch (GPIO_Pin) {
 800273a:	2840      	cmp	r0, #64	; 0x40
 800273c:	d015      	beq.n	800276a <HAL_GPIO_EXTI_Callback+0x32>
 800273e:	2880      	cmp	r0, #128	; 0x80
 8002740:	d024      	beq.n	800278c <HAL_GPIO_EXTI_Callback+0x54>
 8002742:	2820      	cmp	r0, #32
 8002744:	d10b      	bne.n	800275e <HAL_GPIO_EXTI_Callback+0x26>
			Cont_sem_click = 0;
 8002746:	2500      	movs	r5, #0
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_GPIO_EXTI_Callback+0x78>)
			BTN_ESQ.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 800274a:	4c1a      	ldr	r4, [pc, #104]	; (80027b4 <HAL_GPIO_EXTI_Callback+0x7c>)
			Cont_sem_click = 0;
 800274c:	801d      	strh	r5, [r3, #0]
			if(		BTN_ESQ.ContPress >= DEF_CLICK_CURTO 		&&
 800274e:	88a3      	ldrh	r3, [r4, #4]
			BTN_ESQ.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 8002750:	80e5      	strh	r5, [r4, #6]
			if(		BTN_ESQ.ContPress >= DEF_CLICK_CURTO 		&&
 8002752:	1f1a      	subs	r2, r3, #4
 8002754:	2a2d      	cmp	r2, #45	; 0x2d
 8002756:	d803      	bhi.n	8002760 <HAL_GPIO_EXTI_Callback+0x28>
				Callback_CURTO_PB_ESQ();
 8002758:	f7ff fe08 	bl	800236c <Callback_CURTO_PB_ESQ>
			BTN_DIR.ContPress	= 0;
 800275c:	80a5      	strh	r5, [r4, #4]
}
 800275e:	bd70      	pop	{r4, r5, r6, pc}
			else if(BTN_ESQ.ContPress >= DEF_CLICK_LONGO)//tempo de bounce a ser calculado ainda para evitar clique ruidoso
 8002760:	2b31      	cmp	r3, #49	; 0x31
 8002762:	d9fb      	bls.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
				Callback_LONGO_PB_ESQ();
 8002764:	f7ff fe54 	bl	8002410 <Callback_LONGO_PB_ESQ>
			BTN_ESQ.ContPress	= 0;
 8002768:	e7f8      	b.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
			Cont_sem_click = 0;
 800276a:	2500      	movs	r5, #0
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_GPIO_EXTI_Callback+0x78>)
			BTN_MENU.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 800276e:	4c12      	ldr	r4, [pc, #72]	; (80027b8 <HAL_GPIO_EXTI_Callback+0x80>)
			Cont_sem_click = 0;
 8002770:	801d      	strh	r5, [r3, #0]
			if(		BTN_MENU.ContPress >= DEF_CLICK_CURTO 		&&
 8002772:	88a3      	ldrh	r3, [r4, #4]
			BTN_MENU.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 8002774:	80e5      	strh	r5, [r4, #6]
			if(		BTN_MENU.ContPress >= DEF_CLICK_CURTO 		&&
 8002776:	1f1a      	subs	r2, r3, #4
 8002778:	2a2d      	cmp	r2, #45	; 0x2d
 800277a:	d802      	bhi.n	8002782 <HAL_GPIO_EXTI_Callback+0x4a>
				Callback_CURTO_PB_MENU();
 800277c:	f7ff ffb0 	bl	80026e0 <Callback_CURTO_PB_MENU>
 8002780:	e7ec      	b.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
			else if(BTN_MENU.ContPress >= DEF_CLICK_LONGO)//tempo de bounce a ser calculado ainda para evitar clique ruidoso
 8002782:	2b31      	cmp	r3, #49	; 0x31
 8002784:	d9ea      	bls.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
				Callback_LONGO_PB_MENU();
 8002786:	f7ff fea5 	bl	80024d4 <Callback_LONGO_PB_MENU>
			BTN_MENU.ContPress	= 0;
 800278a:	e7e7      	b.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
			Cont_sem_click = 0;
 800278c:	2500      	movs	r5, #0
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_GPIO_EXTI_Callback+0x78>)
			BTN_DIR.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <HAL_GPIO_EXTI_Callback+0x84>)
			Cont_sem_click = 0;
 8002792:	801d      	strh	r5, [r3, #0]
			if(		BTN_DIR.ContPress >= DEF_CLICK_CURTO 		&&
 8002794:	88a3      	ldrh	r3, [r4, #4]
			BTN_DIR.Cont_N_Press = 0; //zera a contagem que é feita no timer de contagem
 8002796:	80e5      	strh	r5, [r4, #6]
			if(		BTN_DIR.ContPress >= DEF_CLICK_CURTO 		&&
 8002798:	1f1a      	subs	r2, r3, #4
 800279a:	2a2d      	cmp	r2, #45	; 0x2d
 800279c:	d802      	bhi.n	80027a4 <HAL_GPIO_EXTI_Callback+0x6c>
				Callback_CURTO_PB_DIR();
 800279e:	f7ff fe3f 	bl	8002420 <Callback_CURTO_PB_DIR>
 80027a2:	e7db      	b.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
			else if(BTN_DIR.ContPress >= DEF_CLICK_LONGO)//tempo de bounce a ser calculado ainda para evitar clique ruidoso
 80027a4:	2b31      	cmp	r3, #49	; 0x31
 80027a6:	d9d9      	bls.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
				Callback_LONGO_PB_DIR();
 80027a8:	f7ff fe8c 	bl	80024c4 <Callback_LONGO_PB_DIR>
 80027ac:	e7d6      	b.n	800275c <HAL_GPIO_EXTI_Callback+0x24>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	20000322 	.word	0x20000322
 80027b4:	200001f8 	.word	0x200001f8
 80027b8:	20000200 	.word	0x20000200
 80027bc:	200001f0 	.word	0x200001f0

080027c0 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim2 ){// 10 milisegundos
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
{
 80027c2:	b510      	push	{r4, lr}
	if (htim == &htim2 ){// 10 milisegundos
 80027c4:	4283      	cmp	r3, r0
 80027c6:	d000      	beq.n	80027ca <HAL_TIM_PeriodElapsedCallback+0xa>
 80027c8:	e093      	b.n	80028f2 <HAL_TIM_PeriodElapsedCallback+0x132>
		(Carro.Clock_rpm <2 ) ? (Carro.Incidencia_apagou++) : (Carro.Incidencia_apagou = 0);
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	8b19      	ldrh	r1, [r3, #24]
 80027d0:	2901      	cmp	r1, #1
 80027d2:	d802      	bhi.n	80027da <HAL_TIM_PeriodElapsedCallback+0x1a>
 80027d4:	8a1a      	ldrh	r2, [r3, #16]
 80027d6:	3201      	adds	r2, #1
 80027d8:	b292      	uxth	r2, r2
 80027da:	821a      	strh	r2, [r3, #16]
		if(Carro.IC.IC_compare1 == 0){
 80027dc:	001a      	movs	r2, r3
 80027de:	0019      	movs	r1, r3
 80027e0:	3264      	adds	r2, #100	; 0x64
 80027e2:	8810      	ldrh	r0, [r2, #0]
 80027e4:	3162      	adds	r1, #98	; 0x62
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d149      	bne.n	800287e <HAL_TIM_PeriodElapsedCallback+0xbe>
			if(Carro.IC.IC_compare_cont	<	10000)
 80027ea:	8808      	ldrh	r0, [r1, #0]
 80027ec:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80027ee:	4290      	cmp	r0, r2
 80027f0:	d803      	bhi.n	80027fa <HAL_TIM_PeriodElapsedCallback+0x3a>
				Carro.IC.IC_compare_cont++;
 80027f2:	880a      	ldrh	r2, [r1, #0]
 80027f4:	3201      	adds	r2, #1
 80027f6:	b292      	uxth	r2, r2
 80027f8:	800a      	strh	r2, [r1, #0]
			if(Carro.IC.IC_compare_cont>200){
 80027fa:	001a      	movs	r2, r3
 80027fc:	3262      	adds	r2, #98	; 0x62
 80027fe:	8812      	ldrh	r2, [r2, #0]
 8002800:	2ac8      	cmp	r2, #200	; 0xc8
 8002802:	d903      	bls.n	800280c <HAL_TIM_PeriodElapsedCallback+0x4c>
				Carro.IC.Frequency	 = 0;
 8002804:	2200      	movs	r2, #0
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
				Carro.Clock_rpm 	 = 0;
 8002808:	831a      	strh	r2, [r3, #24]
				Carro.Clock_rpm_Conv = 0;
 800280a:	61da      	str	r2, [r3, #28]
		if(READ_ESQ){
 800280c:	2120      	movs	r1, #32
 800280e:	483c      	ldr	r0, [pc, #240]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002810:	f001 f844 	bl	800389c <HAL_GPIO_ReadPin>
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002816:	2800      	cmp	r0, #0
 8002818:	d03b      	beq.n	8002892 <HAL_TIM_PeriodElapsedCallback+0xd2>
			BTN_ESQ.Cont_N_Press =0;
 800281a:	2200      	movs	r2, #0
 800281c:	80da      	strh	r2, [r3, #6]
			(BTN_ESQ.ContPress <= DEF_CLICK_LONGO) ? (BTN_ESQ.ContPress++) : 0;
 800281e:	889a      	ldrh	r2, [r3, #4]
 8002820:	2a32      	cmp	r2, #50	; 0x32
 8002822:	d930      	bls.n	8002886 <HAL_TIM_PeriodElapsedCallback+0xc6>
				BTN_ESQ.ContPress 	= 80; // revisar teste
 8002824:	2250      	movs	r2, #80	; 0x50
 8002826:	809a      	strh	r2, [r3, #4]
				BTN_ESQ.FLAG 		= 1;//PRESSIONAMENTO ESPECIFICO CANCELADO A BAIXO  //revisar teste
 8002828:	3a4f      	subs	r2, #79	; 0x4f
 800282a:	801a      	strh	r2, [r3, #0]
				Callback_CURTO_PB_ESQ();
 800282c:	f7ff fd9e 	bl	800236c <Callback_CURTO_PB_ESQ>
		if(READ_MENU){
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	4833      	ldr	r0, [pc, #204]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002834:	f001 f832 	bl	800389c <HAL_GPIO_ReadPin>
 8002838:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800283a:	2800      	cmp	r0, #0
 800283c:	d032      	beq.n	80028a4 <HAL_TIM_PeriodElapsedCallback+0xe4>
			BTN_MENU.Cont_N_Press =0;
 800283e:	2300      	movs	r3, #0
 8002840:	80d3      	strh	r3, [r2, #6]
			(BTN_MENU.ContPress <= DEF_CLICK_LONGO) ? (BTN_MENU.ContPress++) : 0;
 8002842:	8893      	ldrh	r3, [r2, #4]
 8002844:	2b32      	cmp	r3, #50	; 0x32
 8002846:	d927      	bls.n	8002898 <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_EXTI_Callback(BTN_MENU_Pin);
 8002848:	2040      	movs	r0, #64	; 0x40
 800284a:	f7ff ff75 	bl	8002738 <HAL_GPIO_EXTI_Callback>
		if(READ_DIR){
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	482b      	ldr	r0, [pc, #172]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002852:	f001 f823 	bl	800389c <HAL_GPIO_ReadPin>
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002858:	2800      	cmp	r0, #0
 800285a:	d02c      	beq.n	80028b6 <HAL_TIM_PeriodElapsedCallback+0xf6>
			BTN_DIR.Cont_N_Press =0;
 800285c:	2200      	movs	r2, #0
 800285e:	80da      	strh	r2, [r3, #6]
			(BTN_DIR.ContPress <= DEF_CLICK_LONGO) ? (BTN_DIR.ContPress++) : 0;
 8002860:	889a      	ldrh	r2, [r3, #4]
 8002862:	2a32      	cmp	r2, #50	; 0x32
 8002864:	d921      	bls.n	80028aa <HAL_TIM_PeriodElapsedCallback+0xea>
				BTN_DIR.ContPress 	= 80; // revisar teste
 8002866:	2250      	movs	r2, #80	; 0x50
 8002868:	809a      	strh	r2, [r3, #4]
				BTN_DIR.FLAG 		= 1;//PRESSIONAMENTO ESPECIFICO CANCELADO A BAIXO  //revisar teste
 800286a:	3a4f      	subs	r2, #79	; 0x4f
 800286c:	801a      	strh	r2, [r3, #0]
				Callback_CURTO_PB_DIR();
 800286e:	f7ff fdd7 	bl	8002420 <Callback_CURTO_PB_DIR>
		if(Cont_100ms<10)
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002874:	7813      	ldrb	r3, [r2, #0]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d920      	bls.n	80028bc <HAL_TIM_PeriodElapsedCallback+0xfc>
			Cont_100ms=0;
 800287a:	2300      	movs	r3, #0
 800287c:	e021      	b.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x102>
			Carro.IC.IC_compare_cont = 	0;
 800287e:	2300      	movs	r3, #0
 8002880:	800b      	strh	r3, [r1, #0]
			Carro.IC.IC_compare1	 =	0;
 8002882:	8013      	strh	r3, [r2, #0]
 8002884:	e7c2      	b.n	800280c <HAL_TIM_PeriodElapsedCallback+0x4c>
			(BTN_ESQ.ContPress <= DEF_CLICK_LONGO) ? (BTN_ESQ.ContPress++) : 0;
 8002886:	3201      	adds	r2, #1
 8002888:	b292      	uxth	r2, r2
 800288a:	809a      	strh	r2, [r3, #4]
			if(BTN_ESQ.ContPress > DEF_CLICK_LONGO)
 800288c:	2a33      	cmp	r2, #51	; 0x33
 800288e:	d1cf      	bne.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002890:	e7c8      	b.n	8002824 <HAL_TIM_PeriodElapsedCallback+0x64>
			BTN_ESQ.FLAG 		= 0;
 8002892:	8018      	strh	r0, [r3, #0]
			BTN_ESQ.ContPress 	= 0;
 8002894:	8098      	strh	r0, [r3, #4]
 8002896:	e7cb      	b.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x70>
			(BTN_MENU.ContPress <= DEF_CLICK_LONGO) ? (BTN_MENU.ContPress++) : 0;
 8002898:	3301      	adds	r3, #1
 800289a:	b29b      	uxth	r3, r3
 800289c:	8093      	strh	r3, [r2, #4]
			if(BTN_MENU.ContPress > DEF_CLICK_LONGO)
 800289e:	2b33      	cmp	r3, #51	; 0x33
 80028a0:	d1d5      	bne.n	800284e <HAL_TIM_PeriodElapsedCallback+0x8e>
 80028a2:	e7d1      	b.n	8002848 <HAL_TIM_PeriodElapsedCallback+0x88>
			BTN_MENU.FLAG 		= 0;
 80028a4:	8010      	strh	r0, [r2, #0]
			BTN_MENU.ContPress 	= 0;
 80028a6:	8090      	strh	r0, [r2, #4]
 80028a8:	e7d1      	b.n	800284e <HAL_TIM_PeriodElapsedCallback+0x8e>
			(BTN_DIR.ContPress <= DEF_CLICK_LONGO) ? (BTN_DIR.ContPress++) : 0;
 80028aa:	3201      	adds	r2, #1
 80028ac:	b292      	uxth	r2, r2
 80028ae:	809a      	strh	r2, [r3, #4]
			if(BTN_DIR.ContPress > DEF_CLICK_LONGO)
 80028b0:	2a33      	cmp	r2, #51	; 0x33
 80028b2:	d1de      	bne.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80028b4:	e7d7      	b.n	8002866 <HAL_TIM_PeriodElapsedCallback+0xa6>
			BTN_DIR.FLAG 		= 0;
 80028b6:	8018      	strh	r0, [r3, #0]
			BTN_DIR.ContPress 	= 0;
 80028b8:	8098      	strh	r0, [r3, #4]
 80028ba:	e7da      	b.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xb2>
			Cont_100ms++;
 80028bc:	7813      	ldrb	r3, [r2, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	b2db      	uxtb	r3, r3
			Cont_100ms=0;
 80028c2:	7013      	strb	r3, [r2, #0]
		if(Cont_500ms<50)
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80028c6:	8813      	ldrh	r3, [r2, #0]
 80028c8:	2b31      	cmp	r3, #49	; 0x31
 80028ca:	d901      	bls.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x110>
			Cont_500ms=0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e002      	b.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x116>
			Cont_500ms++;
 80028d0:	8813      	ldrh	r3, [r2, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b29b      	uxth	r3, r3
			Cont_500ms=0;
 80028d6:	8013      	strh	r3, [r2, #0]
		if(Cont_1000ms<100)
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80028da:	8813      	ldrh	r3, [r2, #0]
 80028dc:	2b63      	cmp	r3, #99	; 0x63
 80028de:	d904      	bls.n	80028ea <HAL_TIM_PeriodElapsedCallback+0x12a>
			Cont_1000ms=0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	8013      	strh	r3, [r2, #0]
			Callback_1000ms();
 80028e4:	f7ff fc96 	bl	8002214 <Callback_1000ms>
}
 80028e8:	e003      	b.n	80028f2 <HAL_TIM_PeriodElapsedCallback+0x132>
			Cont_1000ms++;
 80028ea:	8813      	ldrh	r3, [r2, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8013      	strh	r3, [r2, #0]
}
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	20000380 	.word	0x20000380
 80028f8:	20000288 	.word	0x20000288
 80028fc:	0000270f 	.word	0x0000270f
 8002900:	48000400 	.word	0x48000400
 8002904:	200001f8 	.word	0x200001f8
 8002908:	20000200 	.word	0x20000200
 800290c:	200001f0 	.word	0x200001f0
 8002910:	2000031e 	.word	0x2000031e
 8002914:	20000320 	.word	0x20000320
 8002918:	2000031c 	.word	0x2000031c

0800291c <Atualiza_Variaveis>:
void Atualiza_Variaveis (void){
 800291c:	b530      	push	{r4, r5, lr}
	VerificaMEM[0] = *(__IO uint32_t *)FLASH_USER_DIAMETRO;
 800291e:	4819      	ldr	r0, [pc, #100]	; (8002984 <Atualiza_Variaveis+0x68>)
void Atualiza_Variaveis (void){
 8002920:	b085      	sub	sp, #20
	VerificaMEM[0] = *(__IO uint32_t *)FLASH_USER_DIAMETRO;
 8002922:	6803      	ldr	r3, [r0, #0]
	VerificaMEM[1] = *(__IO uint32_t *)FLASH_USER_LARGURA;
 8002924:	4918      	ldr	r1, [pc, #96]	; (8002988 <Atualiza_Variaveis+0x6c>)
	VerificaMEM[0] = *(__IO uint32_t *)FLASH_USER_DIAMETRO;
 8002926:	9301      	str	r3, [sp, #4]
	VerificaMEM[1] = *(__IO uint32_t *)FLASH_USER_LARGURA;
 8002928:	680b      	ldr	r3, [r1, #0]
	VerificaMEM[2] = *(__IO uint32_t *)FLASH_USER_VEL_MIN;
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <Atualiza_Variaveis+0x70>)
	VerificaMEM[1] = *(__IO uint32_t *)FLASH_USER_LARGURA;
 800292c:	9302      	str	r3, [sp, #8]
	VerificaMEM[2] = *(__IO uint32_t *)FLASH_USER_VEL_MIN;
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	9303      	str	r3, [sp, #12]
	if( 	VerificaMEM[0] 	< DEF_LIMITE_DIAMETRO_MIN 	||		VerificaMEM[0]		> DEF_LIMITE_DIAMETRO_MAX 	||
 8002932:	9c01      	ldr	r4, [sp, #4]
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <Atualiza_Variaveis+0x74>)
 8002936:	2c27      	cmp	r4, #39	; 0x27
 8002938:	d912      	bls.n	8002960 <Atualiza_Variaveis+0x44>
 800293a:	24fa      	movs	r4, #250	; 0xfa
 800293c:	9d01      	ldr	r5, [sp, #4]
 800293e:	0064      	lsls	r4, r4, #1
 8002940:	42a5      	cmp	r5, r4
 8002942:	d80d      	bhi.n	8002960 <Atualiza_Variaveis+0x44>
			VerificaMEM[1] 	< DEF_LIMITE_LARGURA_MIN 	|| 	VerificaMEM[1] 	> DEF_LIMITE_LARGURA_MAX	||
 8002944:	9c02      	ldr	r4, [sp, #8]
	if( 	VerificaMEM[0] 	< DEF_LIMITE_DIAMETRO_MIN 	||		VerificaMEM[0]		> DEF_LIMITE_DIAMETRO_MAX 	||
 8002946:	2c27      	cmp	r4, #39	; 0x27
 8002948:	d90a      	bls.n	8002960 <Atualiza_Variaveis+0x44>
			VerificaMEM[1] 	< DEF_LIMITE_LARGURA_MIN 	|| 	VerificaMEM[1] 	> DEF_LIMITE_LARGURA_MAX	||
 800294a:	24c8      	movs	r4, #200	; 0xc8
 800294c:	9d02      	ldr	r5, [sp, #8]
 800294e:	0064      	lsls	r4, r4, #1
 8002950:	42a5      	cmp	r5, r4
 8002952:	d805      	bhi.n	8002960 <Atualiza_Variaveis+0x44>
			VerificaMEM[2] 	< DEF_VELOCIDADE_MIN			|| 	VerificaMEM[2]		> DEF_VELOCIDADE_MAX		  ){// reseta memoria
 8002954:	9c03      	ldr	r4, [sp, #12]
			VerificaMEM[1] 	< DEF_LIMITE_LARGURA_MIN 	|| 	VerificaMEM[1] 	> DEF_LIMITE_LARGURA_MAX	||
 8002956:	2c01      	cmp	r4, #1
 8002958:	d902      	bls.n	8002960 <Atualiza_Variaveis+0x44>
			VerificaMEM[2] 	< DEF_VELOCIDADE_MIN			|| 	VerificaMEM[2]		> DEF_VELOCIDADE_MAX		  ){// reseta memoria
 800295a:	9c03      	ldr	r4, [sp, #12]
 800295c:	2c1e      	cmp	r4, #30
 800295e:	d909      	bls.n	8002974 <Atualiza_Variaveis+0x58>
		Carro.Diametro_pneu  		= DEF_LIMITE_DIAMETRO_STD;
 8002960:	2264      	movs	r2, #100	; 0x64
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
		Carro.Comprimento_braco 	= DEF_LIMITE_LARGURA_STD;
 8002964:	1892      	adds	r2, r2, r2
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
		Carro.Velocidade_troca	   = DEF_VELOCIDADE_STD;
 8002968:	3abe      	subs	r2, #190	; 0xbe
 800296a:	649a      	str	r2, [r3, #72]	; 0x48
		Grava_memoria();
 800296c:	f7ff fe82 	bl	8002674 <Grava_memoria>
}
 8002970:	b005      	add	sp, #20
 8002972:	bd30      	pop	{r4, r5, pc}
		Carro.Diametro_pneu 			= *(__IO uint32_t *)FLASH_USER_DIAMETRO;
 8002974:	6800      	ldr	r0, [r0, #0]
 8002976:	6418      	str	r0, [r3, #64]	; 0x40
		Carro.Comprimento_braco		= *(__IO uint32_t *)FLASH_USER_LARGURA;
 8002978:	6809      	ldr	r1, [r1, #0]
 800297a:	6459      	str	r1, [r3, #68]	; 0x44
		Carro.Velocidade_troca		= *(__IO uint32_t *)FLASH_USER_VEL_MIN;
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002980:	e7f6      	b.n	8002970 <Atualiza_Variaveis+0x54>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	08007fdc 	.word	0x08007fdc
 8002988:	08007fe4 	.word	0x08007fe4
 800298c:	08007ffc 	.word	0x08007ffc
 8002990:	20000288 	.word	0x20000288

08002994 <main>:
{
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8002996:	f000 f9f5 	bl	8002d84 <HAL_Init>
  SystemClock_Config();
 800299a:	f7ff fbff 	bl	800219c <SystemClock_Config>
  MX_GPIO_Init();
 800299e:	f7ff fb3d 	bl	800201c <MX_GPIO_Init>
  MX_DMA_Init();
 80029a2:	f7ff fb25 	bl	8001ff0 <MX_DMA_Init>
  MX_ADC_Init();
 80029a6:	f7ff fa83 	bl	8001eb0 <MX_ADC_Init>
  MX_I2C1_Init();
 80029aa:	f7ff fb95 	bl	80020d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80029ae:	f000 f8cd 	bl	8002b4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80029b2:	f000 f907 	bl	8002bc4 <MX_TIM3_Init>
	HAL_TIM_Base_Start_IT	(&htim2) ;									// TIMER DE 10 MICRO segundos
 80029b6:	4826      	ldr	r0, [pc, #152]	; (8002a50 <main+0xbc>)
 80029b8:	f001 fd42 	bl	8004440 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA		(&hadc	,(uint32_t*)&ADC_buff_1, 3);		// ADC_DMA
 80029bc:	4e25      	ldr	r6, [pc, #148]	; (8002a54 <main+0xc0>)
 80029be:	2203      	movs	r2, #3
 80029c0:	0031      	movs	r1, r6
 80029c2:	4825      	ldr	r0, [pc, #148]	; (8002a58 <main+0xc4>)
 80029c4:	f000 fb0a 	bl	8002fdc <HAL_ADC_Start_DMA>
	HAL_TIM_IC_Start_IT	(&htim3	,TIM_CHANNEL_1	);				// LEITURA RPM
 80029c8:	2100      	movs	r1, #0
 80029ca:	4824      	ldr	r0, [pc, #144]	; (8002a5c <main+0xc8>)
 80029cc:	f002 f84a 	bl	8004a64 <HAL_TIM_IC_Start_IT>
	Atualiza_Variaveis();
 80029d0:	f7ff ffa4 	bl	800291c <Atualiza_Variaveis>
	HAL_Delay(200);
 80029d4:	20c8      	movs	r0, #200	; 0xc8
 80029d6:	f000 f9f7 	bl	8002dc8 <HAL_Delay>
			i = 1;
 80029da:	2501      	movs	r5, #1
	Inicia_display();
 80029dc:	f002 f8e2 	bl	8004ba4 <Inicia_display>
				Carro.TEMPERATURA = i*5;
 80029e0:	2705      	movs	r7, #5
		Controle_De_Telas();
 80029e2:	f7ff fdd9 	bl	8002598 <Controle_De_Telas>
		if(i < 22)
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <main+0xcc>)
 80029e8:	4c1e      	ldr	r4, [pc, #120]	; (8002a64 <main+0xd0>)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	2b15      	cmp	r3, #21
 80029ee:	dc0f      	bgt.n	8002a10 <main+0x7c>
			if(ADC_buff_1[2] > tabela_temp[(i-1)] && ADC_buff_1[2] < tabela_temp[i])
 80029f0:	68b1      	ldr	r1, [r6, #8]
 80029f2:	481d      	ldr	r0, [pc, #116]	; (8002a68 <main+0xd4>)
 80029f4:	468c      	mov	ip, r1
 80029f6:	1e59      	subs	r1, r3, #1
 80029f8:	0089      	lsls	r1, r1, #2
 80029fa:	5809      	ldr	r1, [r1, r0]
 80029fc:	458c      	cmp	ip, r1
 80029fe:	d909      	bls.n	8002a14 <main+0x80>
 8002a00:	68b1      	ldr	r1, [r6, #8]
 8002a02:	468c      	mov	ip, r1
 8002a04:	0099      	lsls	r1, r3, #2
 8002a06:	5809      	ldr	r1, [r1, r0]
 8002a08:	458c      	cmp	ip, r1
 8002a0a:	d203      	bcs.n	8002a14 <main+0x80>
				Carro.TEMPERATURA = i*5;
 8002a0c:	437b      	muls	r3, r7
 8002a0e:	60e3      	str	r3, [r4, #12]
			i = 1;
 8002a10:	6015      	str	r5, [r2, #0]
 8002a12:	e001      	b.n	8002a18 <main+0x84>
				i++;
 8002a14:	3301      	adds	r3, #1
 8002a16:	6013      	str	r3, [r2, #0]
		if(Carro.FLAG_bomba_2)
 8002a18:	0023      	movs	r3, r4
 8002a1a:	333c      	adds	r3, #60	; 0x3c
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	d012      	beq.n	8002a48 <main+0xb4>
			__NOP();
 8002a22:	46c0      	nop			; (mov r8, r8)
			M_BOMBA_2_ON
 8002a24:	002a      	movs	r2, r5
			M_BOMBA_2_OFF
 8002a26:	2090      	movs	r0, #144	; 0x90
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	05c0      	lsls	r0, r0, #23
		if(Carro.Switch_bomba_1)
 8002a2c:	3439      	adds	r4, #57	; 0x39
			M_BOMBA_2_OFF
 8002a2e:	f000 ff3b 	bl	80038a8 <HAL_GPIO_WritePin>
		if(Carro.Switch_bomba_1)
 8002a32:	7822      	ldrb	r2, [r4, #0]
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d009      	beq.n	8002a4c <main+0xb8>
			__NOP();
 8002a38:	46c0      	nop			; (mov r8, r8)
			M_BOMBA_1_ON
 8002a3a:	002a      	movs	r2, r5
			M_BOMBA_1_OFF
 8002a3c:	2090      	movs	r0, #144	; 0x90
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	05c0      	lsls	r0, r0, #23
 8002a42:	f000 ff31 	bl	80038a8 <HAL_GPIO_WritePin>
 8002a46:	e7cc      	b.n	80029e2 <main+0x4e>
			__NOP();
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	e7ec      	b.n	8002a26 <main+0x92>
			__NOP();
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	e7f5      	b.n	8002a3c <main+0xa8>
 8002a50:	20000380 	.word	0x20000380
 8002a54:	200001e4 	.word	0x200001e4
 8002a58:	20000114 	.word	0x20000114
 8002a5c:	200003c8 	.word	0x200003c8
 8002a60:	20000004 	.word	0x20000004
 8002a64:	20000288 	.word	0x20000288
 8002a68:	20000008 	.word	0x20000008

08002a6c <Error_Handler>:
 8002a6c:	b672      	cpsid	i
	while (1)
 8002a6e:	e7fe      	b.n	8002a6e <Error_Handler+0x2>

08002a70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a70:	2001      	movs	r0, #1
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_MspInit+0x2c>)
{
 8002a74:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	6999      	ldr	r1, [r3, #24]
 8002a78:	4301      	orrs	r1, r0
 8002a7a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	4002      	ands	r2, r0
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	400b      	ands	r3, r1
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	b002      	add	sp, #8
 8002a98:	4770      	bx	lr
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler>

08002aa2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler>

08002aa4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aaa:	f000 f97b 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aae:	bd10      	pop	{r4, pc}

08002ab0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002ab0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_ESQ_Pin);
 8002ab2:	2020      	movs	r0, #32
 8002ab4:	f000 fefe 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_MENU_Pin);
 8002ab8:	2040      	movs	r0, #64	; 0x40
 8002aba:	f000 fefb 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_DIR_Pin);
 8002abe:	2080      	movs	r0, #128	; 0x80
 8002ac0:	f000 fef8 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ac4:	bd10      	pop	{r4, pc}
	...

08002ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ac8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002aca:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Channel1_IRQHandler+0xc>)
 8002acc:	f000 fcd6 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	20000154 	.word	0x20000154

08002ad8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002ad8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002ada:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <ADC1_IRQHandler+0xc>)
 8002adc:	f000 fb18 	bl	8003110 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	20000114 	.word	0x20000114

08002ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ae8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aea:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM2_IRQHandler+0xc>)
 8002aec:	f001 fcee 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000380 	.word	0x20000380

08002af8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002af8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002afa:	4802      	ldr	r0, [pc, #8]	; (8002b04 <TIM3_IRQHandler+0xc>)
 8002afc:	f001 fce6 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	200003c8 	.word	0x200003c8

08002b08 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <_sbrk+0x30>)
 8002b0a:	490c      	ldr	r1, [pc, #48]	; (8002b3c <_sbrk+0x34>)
{
 8002b0c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b0e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <_sbrk+0x38>)
{
 8002b12:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002b14:	6810      	ldr	r0, [r2, #0]
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d101      	bne.n	8002b1e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002b1a:	480a      	ldr	r0, [pc, #40]	; (8002b44 <_sbrk+0x3c>)
 8002b1c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	6810      	ldr	r0, [r2, #0]
 8002b20:	18c3      	adds	r3, r0, r3
 8002b22:	428b      	cmp	r3, r1
 8002b24:	d906      	bls.n	8002b34 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002b26:	f003 fa73 	bl	8006010 <__errno>
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002b2e:	2001      	movs	r0, #1
 8002b30:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002b32:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002b34:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002b36:	e7fc      	b.n	8002b32 <_sbrk+0x2a>
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20001000 	.word	0x20001000
 8002b40:	2000037c 	.word	0x2000037c
 8002b44:	200004d8 	.word	0x200004d8

08002b48 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b48:	4770      	bx	lr
	...

08002b4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b50:	2210      	movs	r2, #16
 8002b52:	2100      	movs	r1, #0
 8002b54:	a802      	add	r0, sp, #8
 8002b56:	f003 fa8e 	bl	8006076 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4668      	mov	r0, sp
 8002b60:	f003 fa89 	bl	8006076 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	4c15      	ldr	r4, [pc, #84]	; (8002bbc <MX_TIM2_Init+0x70>)
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 4800-1;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <MX_TIM2_Init+0x74>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100-1;
 8002b6e:	2263      	movs	r2, #99	; 0x63
  htim2.Init.Prescaler = 4800-1;
 8002b70:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b72:	2300      	movs	r3, #0
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b74:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 100-1;
 8002b78:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b7e:	f001 fd91 	bl	80046a4 <HAL_TIM_Base_Init>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM2_Init+0x3e>
  {
    Error_Handler();
 8002b86:	f7ff ff71 	bl	8002a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b8c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b90:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b92:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b94:	f001 feb2 	bl	80048fc <HAL_TIM_ConfigClockSource>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b9c:	f7ff ff66 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ba2:	4669      	mov	r1, sp
 8002ba4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002baa:	f001 ffcd 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002bb2:	f7ff ff5b 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd10      	pop	{r4, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	20000380 	.word	0x20000380
 8002bc0:	000012bf 	.word	0x000012bf

08002bc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bc4:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 1000-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	2500      	movs	r5, #0
{
 8002bc8:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bca:	2208      	movs	r2, #8
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4668      	mov	r0, sp
 8002bd0:	f003 fa51 	bl	8006076 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	a802      	add	r0, sp, #8
 8002bda:	f003 fa4c 	bl	8006076 <memset>
  htim3.Instance = TIM3;
 8002bde:	4c15      	ldr	r4, [pc, #84]	; (8002c34 <MX_TIM3_Init+0x70>)
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <MX_TIM3_Init+0x74>)
  htim3.Init.Period = 0xFFFF-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002be2:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8002be4:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1000-1;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_TIM3_Init+0x78>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 1000-1;
 8002bea:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 0xFFFF-1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_TIM3_Init+0x7c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bee:	6125      	str	r5, [r4, #16]
  htim3.Init.Period = 0xFFFF-1;
 8002bf0:	60e3      	str	r3, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002bf4:	f001 fd7e 	bl	80046f4 <HAL_TIM_IC_Init>
 8002bf8:	42a8      	cmp	r0, r5
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0x3c>
  {
    Error_Handler();
 8002bfc:	f7ff ff36 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c00:	4669      	mov	r1, sp
 8002c02:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c04:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c08:	f001 ff9e 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002c10:	f7ff ff2c 	bl	8002a6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c14:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c16:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c18:	0020      	movs	r0, r4
 8002c1a:	a902      	add	r1, sp, #8
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c1c:	9202      	str	r2, [sp, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c1e:	9303      	str	r3, [sp, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c20:	9204      	str	r2, [sp, #16]
  sConfigIC.ICFilter = 0;
 8002c22:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c24:	f001 fdb6 	bl	8004794 <HAL_TIM_IC_ConfigChannel>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002c2c:	f7ff ff1e 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c30:	b007      	add	sp, #28
 8002c32:	bd30      	pop	{r4, r5, pc}
 8002c34:	200003c8 	.word	0x200003c8
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	000003e7 	.word	0x000003e7
 8002c40:	0000fffe 	.word	0x0000fffe

08002c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002c44:	2380      	movs	r3, #128	; 0x80
{
 8002c46:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8002c48:	6802      	ldr	r2, [r0, #0]
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10f      	bne.n	8002c70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c50:	2101      	movs	r1, #1
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_TIM_Base_MspInit+0x30>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002c54:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
 8002c5c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002c5e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c60:	400b      	ands	r3, r1
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002c66:	f000 fb49 	bl	80032fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c6a:	200f      	movs	r0, #15
 8002c6c:	f000 fb70 	bl	8003350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c70:	bd07      	pop	{r0, r1, r2, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	0004      	movs	r4, r0
 8002c7c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	2214      	movs	r2, #20
 8002c80:	2100      	movs	r1, #0
 8002c82:	a803      	add	r0, sp, #12
 8002c84:	f003 f9f7 	bl	8006076 <memset>
  if(tim_icHandle->Instance==TIM3)
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_TIM_IC_MspInit+0x64>)
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d122      	bne.n	8002cd6 <HAL_TIM_IC_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c90:	2202      	movs	r2, #2

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_TIM_IC_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	02c0      	lsls	r0, r0, #11
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c98:	69d9      	ldr	r1, [r3, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c9a:	2410      	movs	r4, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9c:	4311      	orrs	r1, r2
 8002c9e:	61d9      	str	r1, [r3, #28]
 8002ca0:	69d9      	ldr	r1, [r3, #28]
 8002ca2:	4011      	ands	r1, r2
 8002ca4:	9101      	str	r1, [sp, #4]
 8002ca6:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	4301      	orrs	r1, r0
 8002cac:	6159      	str	r1, [r3, #20]
 8002cae:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4003      	ands	r3, r0
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002cb8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	480a      	ldr	r0, [pc, #40]	; (8002ce4 <HAL_TIM_IC_MspInit+0x6c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002cbe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cc0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f000 fd3b 	bl	800373c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	0020      	movs	r0, r4
 8002cca:	0011      	movs	r1, r2
 8002ccc:	f000 fb16 	bl	80032fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fb3d 	bl	8003350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002cd6:	b008      	add	sp, #32
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	48000400 	.word	0x48000400

08002ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cee:	490e      	ldr	r1, [pc, #56]	; (8002d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <LoopForever+0xe>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d04:	4c0b      	ldr	r4, [pc, #44]	; (8002d34 <LoopForever+0x16>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d12:	f7ff ff19 	bl	8002b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d16:	f003 f981 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d1a:	f7ff fe3b 	bl	8002994 <main>

08002d1e <LoopForever>:

LoopForever:
    b LoopForever
 8002d1e:	e7fe      	b.n	8002d1e <LoopForever>
  ldr   r0, =_estack
 8002d20:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8002d2c:	0800752c 	.word	0x0800752c
  ldr r2, =_sbss
 8002d30:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002d34:	200004d8 	.word	0x200004d8

08002d38 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <DMA1_Channel2_3_IRQHandler>
	...

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d40:	20fa      	movs	r0, #250	; 0xfa
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_InitTick+0x3c>)
 8002d44:	0080      	lsls	r0, r0, #2
 8002d46:	7819      	ldrb	r1, [r3, #0]
 8002d48:	f7fd f9f2 	bl	8000130 <__udivsi3>
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_InitTick+0x40>)
 8002d4e:	0001      	movs	r1, r0
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	f7fd f9ed 	bl	8000130 <__udivsi3>
 8002d56:	f000 fb07 	bl	8003368 <HAL_SYSTICK_Config>
 8002d5a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d5e:	2c00      	cmp	r4, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	2d03      	cmp	r5, #3
 8002d64:	d807      	bhi.n	8002d76 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d66:	3802      	subs	r0, #2
 8002d68:	0022      	movs	r2, r4
 8002d6a:	0029      	movs	r1, r5
 8002d6c:	f000 fac6 	bl	80032fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	0020      	movs	r0, r4
 8002d72:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_InitTick+0x44>)
 8002d74:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	20000064 	.word	0x20000064
 8002d7c:	20000060 	.word	0x20000060
 8002d80:	20000068 	.word	0x20000068

08002d84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	2310      	movs	r3, #16
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_Init+0x1c>)
{
 8002d88:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d92:	f7ff ffd3 	bl	8002d3c <HAL_InitTick>
  HAL_MspInit();
 8002d96:	f7ff fe6b 	bl	8002a70 <HAL_MspInit>
}
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	40022000 	.word	0x40022000

08002da4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <HAL_IncTick+0x10>)
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_IncTick+0x14>)
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	185b      	adds	r3, r3, r1
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	4770      	bx	lr
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000410 	.word	0x20000410
 8002db8:	20000064 	.word	0x20000064

08002dbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_GetTick+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
}
 8002dc0:	4770      	bx	lr
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000410 	.word	0x20000410

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff fff6 	bl	8002dbc <HAL_GetTick>
 8002dd0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	1c63      	adds	r3, r4, #1
 8002dd4:	d002      	beq.n	8002ddc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <HAL_Delay+0x20>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	1b40      	subs	r0, r0, r5
 8002de2:	42a0      	cmp	r0, r4
 8002de4:	d3fa      	bcc.n	8002ddc <HAL_Delay+0x14>
  {
  }
}
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	20000064 	.word	0x20000064

08002dec <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002dec:	2300      	movs	r3, #0
{
 8002dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df0:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8002df2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df4:	6803      	ldr	r3, [r0, #0]
{
 8002df6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	d107      	bne.n	8002e10 <ADC_Enable+0x24>
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	4211      	tst	r1, r2
 8002e04:	d001      	beq.n	8002e0a <ADC_Enable+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e06:	2000      	movs	r0, #0
}
 8002e08:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	0412      	lsls	r2, r2, #16
 8002e0e:	d4fa      	bmi.n	8002e06 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <ADC_Enable+0x94>)
 8002e14:	4211      	tst	r1, r2
 8002e16:	d008      	beq.n	8002e2a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e18:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e24:	4303      	orrs	r3, r0
 8002e26:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002e28:	e7ee      	b.n	8002e08 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <ADC_Enable+0x98>)
 8002e34:	4914      	ldr	r1, [pc, #80]	; (8002e88 <ADC_Enable+0x9c>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	f7fd f97a 	bl	8000130 <__udivsi3>
 8002e3c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d119      	bne.n	8002e78 <ADC_Enable+0x8c>
    tickstart = HAL_GetTick();
 8002e44:	f7ff ffba 	bl	8002dbc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e48:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002e4a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	422b      	tst	r3, r5
 8002e52:	d1d8      	bne.n	8002e06 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e54:	f7ff ffb2 	bl	8002dbc <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	2802      	cmp	r0, #2
 8002e5c:	d9f6      	bls.n	8002e4c <ADC_Enable+0x60>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	422b      	tst	r3, r5
 8002e64:	d1f2      	bne.n	8002e4c <ADC_Enable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	2310      	movs	r3, #16
 8002e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8002e6a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e72:	431d      	orrs	r5, r3
 8002e74:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002e76:	e7c7      	b.n	8002e08 <ADC_Enable+0x1c>
      wait_loop_index--;
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	e7de      	b.n	8002e3e <ADC_Enable+0x52>
 8002e80:	80000017 	.word	0x80000017
 8002e84:	20000060 	.word	0x20000060
 8002e88:	000f4240 	.word	0x000f4240

08002e8c <HAL_ADC_Init>:
{
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002e90:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002e92:	2c00      	cmp	r4, #0
 8002e94:	d100      	bne.n	8002e98 <HAL_ADC_Init+0xc>
 8002e96:	e080      	b.n	8002f9a <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
 8002e9e:	0022      	movs	r2, r4
 8002ea0:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea2:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002ea4:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002ea6:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002ea8:	f7ff f850 	bl	8001f4c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eae:	06db      	lsls	r3, r3, #27
 8002eb0:	d500      	bpl.n	8002eb4 <HAL_ADC_Init+0x28>
 8002eb2:	e087      	b.n	8002fc4 <HAL_ADC_Init+0x138>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	0008      	movs	r0, r1
 8002ebc:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ebe:	4211      	tst	r1, r2
 8002ec0:	d000      	beq.n	8002ec4 <HAL_ADC_Init+0x38>
 8002ec2:	e07f      	b.n	8002fc4 <HAL_ADC_Init+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ec6:	4942      	ldr	r1, [pc, #264]	; (8002fd0 <HAL_ADC_Init+0x144>)
 8002ec8:	4011      	ands	r1, r2
 8002eca:	2202      	movs	r2, #2
 8002ecc:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ece:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	2a01      	cmp	r2, #1
 8002ed8:	d105      	bne.n	8002ee6 <HAL_ADC_Init+0x5a>
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	4211      	tst	r1, r2
 8002ede:	d10e      	bne.n	8002efe <HAL_ADC_Init+0x72>
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	0412      	lsls	r2, r2, #16
 8002ee4:	d40b      	bmi.n	8002efe <HAL_ADC_Init+0x72>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ee6:	2118      	movs	r1, #24
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	438a      	bics	r2, r1
 8002eec:	68a1      	ldr	r1, [r4, #8]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	6862      	ldr	r2, [r4, #4]
 8002ef6:	0089      	lsls	r1, r1, #2
 8002ef8:	0889      	lsrs	r1, r1, #2
 8002efa:	4311      	orrs	r1, r2
 8002efc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_ADC_Init+0x148>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f08:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f0a:	1e57      	subs	r7, r2, #1
 8002f0c:	1e7a      	subs	r2, r7, #1
 8002f0e:	4197      	sbcs	r7, r2
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f10:	7e61      	ldrb	r1, [r4, #25]
 8002f12:	68e2      	ldr	r2, [r4, #12]
 8002f14:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f16:	03b6      	lsls	r6, r6, #14
 8002f18:	430e      	orrs	r6, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f1a:	7ea5      	ldrb	r5, [r4, #26]
 8002f1c:	4316      	orrs	r6, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f1e:	6922      	ldr	r2, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f20:	0369      	lsls	r1, r5, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f22:	033f      	lsls	r7, r7, #12
 8002f24:	430e      	orrs	r6, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f26:	2a02      	cmp	r2, #2
 8002f28:	d100      	bne.n	8002f2c <HAL_ADC_Init+0xa0>
 8002f2a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002f2c:	1d62      	adds	r2, r4, #5
 8002f2e:	7fd2      	ldrb	r2, [r2, #31]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f30:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002f32:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f34:	4332      	orrs	r2, r6
 8002f36:	433a      	orrs	r2, r7
 8002f38:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f3a:	2901      	cmp	r1, #1
 8002f3c:	d104      	bne.n	8002f48 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	d12c      	bne.n	8002f9c <HAL_ADC_Init+0x110>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0249      	lsls	r1, r1, #9
 8002f46:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f48:	20c2      	movs	r0, #194	; 0xc2
 8002f4a:	69e1      	ldr	r1, [r4, #28]
 8002f4c:	30ff      	adds	r0, #255	; 0xff
 8002f4e:	4281      	cmp	r1, r0
 8002f50:	d002      	beq.n	8002f58 <HAL_ADC_Init+0xcc>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f52:	6a20      	ldr	r0, [r4, #32]
 8002f54:	4301      	orrs	r1, r0
 8002f56:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f58:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f5a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f5c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f64:	4281      	cmp	r1, r0
 8002f66:	d002      	beq.n	8002f6e <HAL_ADC_Init+0xe2>
 8002f68:	1e48      	subs	r0, r1, #1
 8002f6a:	2806      	cmp	r0, #6
 8002f6c:	d807      	bhi.n	8002f7e <HAL_ADC_Init+0xf2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f6e:	2507      	movs	r5, #7
 8002f70:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002f72:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f74:	43a8      	bics	r0, r5
 8002f76:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002f78:	6958      	ldr	r0, [r3, #20]
 8002f7a:	4301      	orrs	r1, r0
 8002f7c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4915      	ldr	r1, [pc, #84]	; (8002fd8 <HAL_ADC_Init+0x14c>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_ADC_Init+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002f8c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f90:	4393      	bics	r3, r2
 8002f92:	001a      	movs	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9c:	2020      	movs	r0, #32
 8002f9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002fa0:	4328      	orrs	r0, r5
 8002fa2:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fa6:	4301      	orrs	r1, r0
 8002fa8:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002faa:	e7cd      	b.n	8002f48 <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8002fac:	2212      	movs	r2, #18
 8002fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fbe:	4303      	orrs	r3, r0
 8002fc0:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002fc2:	e7ea      	b.n	8002f9a <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002fc8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002fce:	e7e4      	b.n	8002f9a <HAL_ADC_Init+0x10e>
 8002fd0:	fffffefd 	.word	0xfffffefd
 8002fd4:	fffe0219 	.word	0xfffe0219
 8002fd8:	833fffe7 	.word	0x833fffe7

08002fdc <HAL_ADC_Start_DMA>:
{
 8002fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fde:	6803      	ldr	r3, [r0, #0]
{
 8002fe0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fe2:	689b      	ldr	r3, [r3, #8]
{
 8002fe4:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 8002fe6:	2002      	movs	r0, #2
{
 8002fe8:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fea:	075b      	lsls	r3, r3, #29
 8002fec:	d430      	bmi.n	8003050 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8002fee:	0027      	movs	r7, r4
 8002ff0:	3734      	adds	r7, #52	; 0x34
 8002ff2:	783b      	ldrb	r3, [r7, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d02b      	beq.n	8003050 <HAL_ADC_Start_DMA+0x74>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	703b      	strb	r3, [r7, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ffc:	7e63      	ldrb	r3, [r4, #25]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d127      	bne.n	8003052 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8003002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003006:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003008:	401a      	ands	r2, r3
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4313      	orrs	r3, r2
 8003010:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8003012:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8003014:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003016:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800301a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800301c:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_ADC_Start_DMA+0x8c>)
 8003020:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_ADC_Start_DMA+0x90>)
 8003024:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003026:	231c      	movs	r3, #28
 8003028:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800302a:	684a      	ldr	r2, [r1, #4]
 800302c:	3b0c      	subs	r3, #12
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003032:	2301      	movs	r3, #1
 8003034:	68ca      	ldr	r2, [r1, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800303a:	0032      	movs	r2, r6
 800303c:	9b01      	ldr	r3, [sp, #4]
 800303e:	3140      	adds	r1, #64	; 0x40
 8003040:	f000 f9de 	bl	8003400 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003044:	2304      	movs	r3, #4
 8003046:	0028      	movs	r0, r5
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	6891      	ldr	r1, [r2, #8]
 800304c:	430b      	orrs	r3, r1
 800304e:	6093      	str	r3, [r2, #8]
}
 8003050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003052:	0020      	movs	r0, r4
 8003054:	f7ff feca 	bl	8002dec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003058:	2800      	cmp	r0, #0
 800305a:	d0d2      	beq.n	8003002 <HAL_ADC_Start_DMA+0x26>
 800305c:	e7f8      	b.n	8003050 <HAL_ADC_Start_DMA+0x74>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	fffff0fe 	.word	0xfffff0fe
 8003064:	08003075 	.word	0x08003075
 8003068:	080030e7 	.word	0x080030e7
 800306c:	080030f5 	.word	0x080030f5

08003070 <HAL_ADC_ConvCpltCallback>:
 8003070:	4770      	bx	lr
	...

08003074 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003074:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003076:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003078:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800307a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800307c:	4211      	tst	r1, r2
 800307e:	d12a      	bne.n	80030d6 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003080:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003082:	32b1      	adds	r2, #177	; 0xb1
 8003084:	32ff      	adds	r2, #255	; 0xff
 8003086:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003088:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	0109      	lsls	r1, r1, #4
 8003090:	68d0      	ldr	r0, [r2, #12]
 8003092:	4208      	tst	r0, r1
 8003094:	d112      	bne.n	80030bc <ADC_DMAConvCplt+0x48>
 8003096:	7e99      	ldrb	r1, [r3, #26]
 8003098:	2900      	cmp	r1, #0
 800309a:	d10f      	bne.n	80030bc <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	0709      	lsls	r1, r1, #28
 80030a0:	d50c      	bpl.n	80030bc <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030a2:	6891      	ldr	r1, [r2, #8]
 80030a4:	0749      	lsls	r1, r1, #29
 80030a6:	d40d      	bmi.n	80030c4 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030a8:	200c      	movs	r0, #12
 80030aa:	6851      	ldr	r1, [r2, #4]
 80030ac:	4381      	bics	r1, r0
 80030ae:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b2:	490b      	ldr	r1, [pc, #44]	; (80030e0 <ADC_DMAConvCplt+0x6c>)
 80030b4:	4011      	ands	r1, r2
 80030b6:	2201      	movs	r2, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030bc:	0018      	movs	r0, r3
 80030be:	f7ff ffd7 	bl	8003070 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80030c2:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	2220      	movs	r2, #32
 80030c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030c8:	430a      	orrs	r2, r1
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	2201      	movs	r2, #1
 80030ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030d0:	430a      	orrs	r2, r1
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80030d4:	e7f2      	b.n	80030bc <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4798      	blx	r3
}
 80030dc:	e7f1      	b.n	80030c2 <ADC_DMAConvCplt+0x4e>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	fffffefe 	.word	0xfffffefe

080030e4 <HAL_ADC_ConvHalfCpltCallback>:
 80030e4:	4770      	bx	lr

080030e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030e6:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80030e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80030ea:	f7ff fffb 	bl	80030e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ee:	bd10      	pop	{r4, pc}

080030f0 <HAL_ADC_LevelOutOfWindowCallback>:
 80030f0:	4770      	bx	lr

080030f2 <HAL_ADC_ErrorCallback>:
 80030f2:	4770      	bx	lr

080030f4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030f4:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80030f8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80030fc:	4313      	orrs	r3, r2
 80030fe:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003100:	2304      	movs	r3, #4
 8003102:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003104:	4313      	orrs	r3, r2
 8003106:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003108:	f7ff fff3 	bl	80030f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800310c:	bd10      	pop	{r4, pc}
	...

08003110 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003110:	2204      	movs	r2, #4
 8003112:	6803      	ldr	r3, [r0, #0]
{
 8003114:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003116:	6819      	ldr	r1, [r3, #0]
{
 8003118:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800311a:	4211      	tst	r1, r2
 800311c:	d002      	beq.n	8003124 <HAL_ADC_IRQHandler+0x14>
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	4211      	tst	r1, r2
 8003122:	d106      	bne.n	8003132 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003124:	2208      	movs	r2, #8
 8003126:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003128:	4211      	tst	r1, r2
 800312a:	d028      	beq.n	800317e <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	4211      	tst	r1, r2
 8003130:	d025      	beq.n	800317e <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003132:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003134:	06d2      	lsls	r2, r2, #27
 8003136:	d404      	bmi.n	8003142 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	430a      	orrs	r2, r1
 8003140:	63a2      	str	r2, [r4, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003142:	22c0      	movs	r2, #192	; 0xc0
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	4211      	tst	r1, r2
 800314a:	d112      	bne.n	8003172 <HAL_ADC_IRQHandler+0x62>
 800314c:	7ea2      	ldrb	r2, [r4, #26]
 800314e:	2a00      	cmp	r2, #0
 8003150:	d10f      	bne.n	8003172 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	0712      	lsls	r2, r2, #28
 8003156:	d50c      	bpl.n	8003172 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	0752      	lsls	r2, r2, #29
 800315c:	d43c      	bmi.n	80031d8 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800315e:	210c      	movs	r1, #12
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	438a      	bics	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_ADC_IRQHandler+0xdc>)
 800316a:	401a      	ands	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	4313      	orrs	r3, r2
 8003170:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 8003172:	0020      	movs	r0, r4
 8003174:	f7ff ff7c 	bl	8003070 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003178:	220c      	movs	r2, #12
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800317e:	2580      	movs	r5, #128	; 0x80
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	422a      	tst	r2, r5
 8003186:	d00c      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x92>
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	422b      	tst	r3, r5
 800318c:	d009      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003192:	025b      	lsls	r3, r3, #9
 8003194:	4313      	orrs	r3, r2
 8003196:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003198:	0020      	movs	r0, r4
 800319a:	f7ff ffa9 	bl	80030f0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80031a2:	2210      	movs	r2, #16
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	4211      	tst	r1, r2
 80031aa:	d014      	beq.n	80031d6 <HAL_ADC_IRQHandler+0xc6>
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	4211      	tst	r1, r2
 80031b0:	d011      	beq.n	80031d6 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80031b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	d002      	beq.n	80031be <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80031b8:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80031ba:	07d2      	lsls	r2, r2, #31
 80031bc:	d508      	bpl.n	80031d0 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031be:	2202      	movs	r2, #2
 80031c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      HAL_ADC_ErrorCallback(hadc);
 80031c2:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031c4:	430a      	orrs	r2, r1
 80031c6:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031c8:	2210      	movs	r2, #16
 80031ca:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80031cc:	f7ff ff91 	bl	80030f2 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031d0:	2210      	movs	r2, #16
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	2320      	movs	r3, #32
 80031da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031dc:	4313      	orrs	r3, r2
 80031de:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	2301      	movs	r3, #1
 80031e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80031e4:	4313      	orrs	r3, r2
 80031e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80031e8:	e7c3      	b.n	8003172 <HAL_ADC_IRQHandler+0x62>
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	fffffefe 	.word	0xfffffefe

080031f0 <HAL_ADC_ConfigChannel>:
{
 80031f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80031f2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80031f4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80031f6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80031f8:	3434      	adds	r4, #52	; 0x34
 80031fa:	7822      	ldrb	r2, [r4, #0]
{
 80031fc:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031fe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8003200:	2002      	movs	r0, #2
 8003202:	2a01      	cmp	r2, #1
 8003204:	d02b      	beq.n	800325e <HAL_ADC_ConfigChannel+0x6e>
 8003206:	3801      	subs	r0, #1
 8003208:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6896      	ldr	r6, [r2, #8]
 800320e:	0776      	lsls	r6, r6, #29
 8003210:	d461      	bmi.n	80032d6 <HAL_ADC_ConfigChannel+0xe6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003212:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8003214:	4f32      	ldr	r7, [pc, #200]	; (80032e0 <HAL_ADC_ConfigChannel+0xf0>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003216:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003218:	001e      	movs	r6, r3
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800321a:	4684      	mov	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 800321c:	6848      	ldr	r0, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800321e:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8003220:	42b8      	cmp	r0, r7
 8003222:	d040      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003224:	4660      	mov	r0, ip
 8003226:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8003228:	4338      	orrs	r0, r7
 800322a:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800322c:	2080      	movs	r0, #128	; 0x80
 800322e:	0540      	lsls	r0, r0, #21
 8003230:	4285      	cmp	r5, r0
 8003232:	d00f      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x64>
 8003234:	3d01      	subs	r5, #1
 8003236:	2d06      	cmp	r5, #6
 8003238:	d90c      	bls.n	8003254 <HAL_ADC_ConfigChannel+0x64>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800323a:	2007      	movs	r0, #7
 800323c:	6955      	ldr	r5, [r2, #20]
 800323e:	6889      	ldr	r1, [r1, #8]
 8003240:	4005      	ands	r5, r0
 8003242:	42a9      	cmp	r1, r5
 8003244:	d006      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x64>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003246:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003248:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800324a:	4385      	bics	r5, r0
 800324c:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800324e:	6955      	ldr	r5, [r2, #20]
 8003250:	4329      	orrs	r1, r5
 8003252:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003254:	2e02      	cmp	r6, #2
 8003256:	d903      	bls.n	8003260 <HAL_ADC_ConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800325a:	2300      	movs	r3, #0
 800325c:	7023      	strb	r3, [r4, #0]
}
 800325e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003260:	4820      	ldr	r0, [pc, #128]	; (80032e4 <HAL_ADC_ConfigChannel+0xf4>)
 8003262:	6801      	ldr	r1, [r0, #0]
 8003264:	2b10      	cmp	r3, #16
 8003266:	d01b      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0xb0>
 8003268:	001a      	movs	r2, r3
 800326a:	3a11      	subs	r2, #17
 800326c:	4255      	negs	r5, r2
 800326e:	416a      	adcs	r2, r5
 8003270:	4d1d      	ldr	r5, [pc, #116]	; (80032e8 <HAL_ADC_ConfigChannel+0xf8>)
 8003272:	4252      	negs	r2, r2
 8003274:	402a      	ands	r2, r5
 8003276:	2580      	movs	r5, #128	; 0x80
 8003278:	046d      	lsls	r5, r5, #17
 800327a:	1952      	adds	r2, r2, r5
 800327c:	430a      	orrs	r2, r1
 800327e:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003280:	2b10      	cmp	r3, #16
 8003282:	d1e9      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_ADC_ConfigChannel+0xfc>)
 8003286:	491a      	ldr	r1, [pc, #104]	; (80032f0 <HAL_ADC_ConfigChannel+0x100>)
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	f7fc ff51 	bl	8000130 <__udivsi3>
 800328e:	230a      	movs	r3, #10
 8003290:	4343      	muls	r3, r0
            wait_loop_index--;
 8003292:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003294:	9b01      	ldr	r3, [sp, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0de      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x68>
            wait_loop_index--;
 800329a:	9b01      	ldr	r3, [sp, #4]
 800329c:	3b01      	subs	r3, #1
 800329e:	e7f8      	b.n	8003292 <HAL_ADC_ConfigChannel+0xa2>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	0412      	lsls	r2, r2, #16
 80032a4:	e7ea      	b.n	800327c <HAL_ADC_ConfigChannel+0x8c>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032a6:	4660      	mov	r0, ip
 80032a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032aa:	4381      	bics	r1, r0
 80032ac:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032ae:	2e02      	cmp	r6, #2
 80032b0:	d8d2      	bhi.n	8003258 <HAL_ADC_ConfigChannel+0x68>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_ADC_ConfigChannel+0xf4>)
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d00b      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0xe2>
 80032ba:	3b11      	subs	r3, #17
 80032bc:	4258      	negs	r0, r3
 80032be:	4143      	adcs	r3, r0
 80032c0:	20c0      	movs	r0, #192	; 0xc0
 80032c2:	425b      	negs	r3, r3
 80032c4:	0400      	lsls	r0, r0, #16
 80032c6:	4003      	ands	r3, r0
 80032c8:	480a      	ldr	r0, [pc, #40]	; (80032f4 <HAL_ADC_ConfigChannel+0x104>)
 80032ca:	181b      	adds	r3, r3, r0
 80032cc:	400b      	ands	r3, r1
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e7c2      	b.n	8003258 <HAL_ADC_ConfigChannel+0x68>
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_ADC_ConfigChannel+0x108>)
 80032d4:	e7fa      	b.n	80032cc <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d6:	2220      	movs	r2, #32
 80032d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032da:	430a      	orrs	r2, r1
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80032de:	e7bc      	b.n	800325a <HAL_ADC_ConfigChannel+0x6a>
 80032e0:	00001001 	.word	0x00001001
 80032e4:	40012708 	.word	0x40012708
 80032e8:	ff400000 	.word	0xff400000
 80032ec:	20000060 	.word	0x20000060
 80032f0:	000f4240 	.word	0x000f4240
 80032f4:	feffffff 	.word	0xfeffffff
 80032f8:	ff7fffff 	.word	0xff7fffff

080032fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fc:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fe:	25ff      	movs	r5, #255	; 0xff
 8003300:	2403      	movs	r4, #3
 8003302:	002a      	movs	r2, r5
 8003304:	4004      	ands	r4, r0
 8003306:	00e4      	lsls	r4, r4, #3
 8003308:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330a:	0189      	lsls	r1, r1, #6
 800330c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003310:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003312:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003314:	2800      	cmp	r0, #0
 8003316:	db0a      	blt.n	800332e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003318:	24c0      	movs	r4, #192	; 0xc0
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_NVIC_SetPriority+0x4c>)
 800331c:	0880      	lsrs	r0, r0, #2
 800331e:	0080      	lsls	r0, r0, #2
 8003320:	18c0      	adds	r0, r0, r3
 8003322:	00a4      	lsls	r4, r4, #2
 8003324:	5903      	ldr	r3, [r0, r4]
 8003326:	401a      	ands	r2, r3
 8003328:	4311      	orrs	r1, r2
 800332a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800332c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800332e:	200f      	movs	r0, #15
 8003330:	4003      	ands	r3, r0
 8003332:	3b08      	subs	r3, #8
 8003334:	4805      	ldr	r0, [pc, #20]	; (800334c <HAL_NVIC_SetPriority+0x50>)
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	181b      	adds	r3, r3, r0
 800333c:	69d8      	ldr	r0, [r3, #28]
 800333e:	4002      	ands	r2, r0
 8003340:	4311      	orrs	r1, r2
 8003342:	61d9      	str	r1, [r3, #28]
 8003344:	e7f2      	b.n	800332c <HAL_NVIC_SetPriority+0x30>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003350:	2800      	cmp	r0, #0
 8003352:	db05      	blt.n	8003360 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003354:	231f      	movs	r3, #31
 8003356:	4018      	ands	r0, r3
 8003358:	3b1e      	subs	r3, #30
 800335a:	4083      	lsls	r3, r0
 800335c:	4a01      	ldr	r2, [pc, #4]	; (8003364 <HAL_NVIC_EnableIRQ+0x14>)
 800335e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003360:	4770      	bx	lr
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	e000e100 	.word	0xe000e100

08003368 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	1e43      	subs	r3, r0, #1
 800336c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800336e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	4293      	cmp	r3, r2
 8003372:	d20d      	bcs.n	8003390 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003374:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003378:	4807      	ldr	r0, [pc, #28]	; (8003398 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800337c:	6a03      	ldr	r3, [r0, #32]
 800337e:	0609      	lsls	r1, r1, #24
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	430b      	orrs	r3, r1
 8003386:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003390:	4770      	bx	lr
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	e000e010 	.word	0xe000e010
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
  if(NULL == hdma)
 80033a2:	2c00      	cmp	r4, #0
 80033a4:	d024      	beq.n	80033f0 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	1ca5      	adds	r5, r4, #2
 80033aa:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033ac:	6820      	ldr	r0, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 80033b0:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033b2:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033b4:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	68e1      	ldr	r1, [r4, #12]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6921      	ldr	r1, [r4, #16]
 80033c0:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c2:	6961      	ldr	r1, [r4, #20]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	69a1      	ldr	r1, [r4, #24]
 80033c8:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ca:	69e1      	ldr	r1, [r4, #28]
 80033cc:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80033ce:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80033d0:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_DMA_Init+0x5c>)
 80033d4:	2114      	movs	r1, #20
 80033d6:	18c0      	adds	r0, r0, r3
 80033d8:	f7fc feaa 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033de:	0080      	lsls	r0, r0, #2
 80033e0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033e2:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80033e6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e8:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80033ea:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80033ec:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80033ee:	77e0      	strb	r0, [r4, #31]
}  
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	ffffc00f 	.word	0xffffc00f
 80033f8:	bffdfff8 	.word	0xbffdfff8
 80033fc:	40020000 	.word	0x40020000

08003400 <HAL_DMA_Start_IT>:
{
 8003400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003402:	1c45      	adds	r5, r0, #1
{
 8003404:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003406:	7feb      	ldrb	r3, [r5, #31]
{
 8003408:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800340a:	2002      	movs	r0, #2
 800340c:	2b01      	cmp	r3, #1
 800340e:	d027      	beq.n	8003460 <HAL_DMA_Start_IT+0x60>
 8003410:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003412:	1827      	adds	r7, r4, r0
  __HAL_LOCK(hdma);
 8003414:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2600      	movs	r6, #0
 800341a:	469c      	mov	ip, r3
 800341c:	4660      	mov	r0, ip
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2801      	cmp	r0, #1
 8003422:	d128      	bne.n	8003476 <HAL_DMA_Start_IT+0x76>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003424:	3001      	adds	r0, #1
 8003426:	77f8      	strb	r0, [r7, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003428:	6820      	ldr	r0, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342a:	63a6      	str	r6, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800342c:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800342e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003430:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003432:	40b3      	lsls	r3, r6
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003434:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003436:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003438:	606b      	str	r3, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 800343a:	9b01      	ldr	r3, [sp, #4]
 800343c:	6043      	str	r3, [r0, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	2b10      	cmp	r3, #16
 8003442:	d10e      	bne.n	8003462 <HAL_DMA_Start_IT+0x62>
    hdma->Instance->CPAR = DstAddress;
 8003444:	6082      	str	r2, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003446:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800344a:	6802      	ldr	r2, [r0, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003450:	230e      	movs	r3, #14
 8003452:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003454:	6003      	str	r3, [r0, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003456:	2301      	movs	r3, #1
 8003458:	6802      	ldr	r2, [r0, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800345e:	2000      	movs	r0, #0
} 
 8003460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8003462:	6081      	str	r1, [r0, #8]
    hdma->Instance->CMAR = DstAddress;
 8003464:	60c2      	str	r2, [r0, #12]
 8003466:	e7ef      	b.n	8003448 <HAL_DMA_Start_IT+0x48>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003468:	230a      	movs	r3, #10
 800346a:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800346c:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800346e:	6003      	str	r3, [r0, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003470:	6803      	ldr	r3, [r0, #0]
 8003472:	4393      	bics	r3, r2
 8003474:	e7ee      	b.n	8003454 <HAL_DMA_Start_IT+0x54>
    status = HAL_BUSY;
 8003476:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma); 
 8003478:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800347a:	e7f1      	b.n	8003460 <HAL_DMA_Start_IT+0x60>

0800347c <HAL_DMA_IRQHandler>:
{
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800347e:	2704      	movs	r7, #4
 8003480:	003e      	movs	r6, r7
 8003482:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003486:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003488:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800348a:	6803      	ldr	r3, [r0, #0]
 800348c:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800348e:	4235      	tst	r5, r6
 8003490:	d00d      	beq.n	80034ae <HAL_DMA_IRQHandler+0x32>
 8003492:	423c      	tst	r4, r7
 8003494:	d00b      	beq.n	80034ae <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	0689      	lsls	r1, r1, #26
 800349a:	d402      	bmi.n	80034a2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	43b9      	bics	r1, r7
 80034a0:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034a4:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d019      	beq.n	80034de <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 80034aa:	4798      	blx	r3
}  
 80034ac:	e017      	b.n	80034de <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80034ae:	2702      	movs	r7, #2
 80034b0:	003e      	movs	r6, r7
 80034b2:	408e      	lsls	r6, r1
 80034b4:	4235      	tst	r5, r6
 80034b6:	d013      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x64>
 80034b8:	423c      	tst	r4, r7
 80034ba:	d011      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	0689      	lsls	r1, r1, #26
 80034c0:	d406      	bmi.n	80034d0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80034c2:	240a      	movs	r4, #10
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	43a1      	bics	r1, r4
 80034c8:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80034ca:	2101      	movs	r1, #1
 80034cc:	19c3      	adds	r3, r0, r7
 80034ce:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034d0:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80034d2:	2200      	movs	r2, #0
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80034d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d1e5      	bne.n	80034aa <HAL_DMA_IRQHandler+0x2e>
}  
 80034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034e0:	2608      	movs	r6, #8
 80034e2:	0037      	movs	r7, r6
 80034e4:	408f      	lsls	r7, r1
 80034e6:	423d      	tst	r5, r7
 80034e8:	d0f9      	beq.n	80034de <HAL_DMA_IRQHandler+0x62>
 80034ea:	4234      	tst	r4, r6
 80034ec:	d0f7      	beq.n	80034de <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034ee:	250e      	movs	r5, #14
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	43ac      	bics	r4, r5
 80034f4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034f6:	2301      	movs	r3, #1
 80034f8:	001c      	movs	r4, r3
 80034fa:	408c      	lsls	r4, r1
 80034fc:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80034fe:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003500:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003502:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8003504:	2200      	movs	r2, #0
 8003506:	18c3      	adds	r3, r0, r3
 8003508:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 800350a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800350c:	e7e5      	b.n	80034da <HAL_DMA_IRQHandler+0x5e>
	...

08003510 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003510:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <FLASH_SetErrorCode+0x34>)
 8003512:	2110      	movs	r1, #16
 8003514:	68d0      	ldr	r0, [r2, #12]
{
 8003516:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003518:	0003      	movs	r3, r0
 800351a:	400b      	ands	r3, r1
 800351c:	4208      	tst	r0, r1
 800351e:	d005      	beq.n	800352c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003520:	2302      	movs	r3, #2
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <FLASH_SetErrorCode+0x38>)
 8003524:	69c4      	ldr	r4, [r0, #28]
 8003526:	4323      	orrs	r3, r4
 8003528:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800352a:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800352c:	2004      	movs	r0, #4
 800352e:	68d1      	ldr	r1, [r2, #12]
 8003530:	4201      	tst	r1, r0
 8003532:	d005      	beq.n	8003540 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003534:	2101      	movs	r1, #1
 8003536:	4c04      	ldr	r4, [pc, #16]	; (8003548 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8003538:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800353a:	69e5      	ldr	r5, [r4, #28]
 800353c:	4329      	orrs	r1, r5
 800353e:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003540:	60d3      	str	r3, [r2, #12]
}  
 8003542:	bd30      	pop	{r4, r5, pc}
 8003544:	40022000 	.word	0x40022000
 8003548:	20000418 	.word	0x20000418

0800354c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	0612      	lsls	r2, r2, #24
 8003554:	d506      	bpl.n	8003564 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_FLASH_Unlock+0x20>)
 8003558:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_FLASH_Unlock+0x24>)
 800355c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800355e:	6918      	ldr	r0, [r3, #16]
 8003560:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	0fc0      	lsrs	r0, r0, #31
}
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	40022000 	.word	0x40022000
 800356c:	45670123 	.word	0x45670123
 8003570:	cdef89ab 	.word	0xcdef89ab

08003574 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <HAL_FLASH_Lock+0x10>)
}
 8003578:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800357a:	6911      	ldr	r1, [r2, #16]
 800357c:	430b      	orrs	r3, r1
 800357e:	6113      	str	r3, [r2, #16]
}
 8003580:	4770      	bx	lr
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	40022000 	.word	0x40022000

08003588 <FLASH_WaitForLastOperation>:
{
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff fc16 	bl	8002dbc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003590:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8003592:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <FLASH_WaitForLastOperation+0x50>)
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4232      	tst	r2, r6
 800359a:	d111      	bne.n	80035c0 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800359c:	2220      	movs	r2, #32
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	4211      	tst	r1, r2
 80035a2:	d000      	beq.n	80035a6 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035a4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80035a6:	68d9      	ldr	r1, [r3, #12]
 80035a8:	2210      	movs	r2, #16
 80035aa:	0008      	movs	r0, r1
 80035ac:	4010      	ands	r0, r2
 80035ae:	4211      	tst	r1, r2
 80035b0:	d102      	bne.n	80035b8 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80035b2:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80035b4:	075b      	lsls	r3, r3, #29
 80035b6:	d508      	bpl.n	80035ca <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 80035b8:	f7ff ffaa 	bl	8003510 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
 80035be:	e004      	b.n	80035ca <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	1c62      	adds	r2, r4, #1
 80035c2:	d0e8      	beq.n	8003596 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035c4:	2c00      	cmp	r4, #0
 80035c6:	d101      	bne.n	80035cc <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80035c8:	2003      	movs	r0, #3
}
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035cc:	f7ff fbf6 	bl	8002dbc <HAL_GetTick>
 80035d0:	1b40      	subs	r0, r0, r5
 80035d2:	42a0      	cmp	r0, r4
 80035d4:	d9de      	bls.n	8003594 <FLASH_WaitForLastOperation+0xc>
 80035d6:	e7f7      	b.n	80035c8 <FLASH_WaitForLastOperation+0x40>
 80035d8:	40022000 	.word	0x40022000

080035dc <HAL_FLASH_Program>:
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b085      	sub	sp, #20
 80035e0:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_FLASH_Program+0x78>)
{
 80035e4:	9101      	str	r1, [sp, #4]
 80035e6:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 80035e8:	7e1a      	ldrb	r2, [r3, #24]
{
 80035ea:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80035ec:	2002      	movs	r0, #2
 80035ee:	2a01      	cmp	r2, #1
 80035f0:	d02e      	beq.n	8003650 <HAL_FLASH_Program+0x74>
 80035f2:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035f4:	4818      	ldr	r0, [pc, #96]	; (8003658 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 80035f6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035f8:	f7ff ffc6 	bl	8003588 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d124      	bne.n	800364a <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 8003600:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003602:	2c01      	cmp	r4, #1
 8003604:	d002      	beq.n	800360c <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003606:	2c02      	cmp	r4, #2
 8003608:	d000      	beq.n	800360c <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 800360a:	2604      	movs	r6, #4
 800360c:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800360e:	9802      	ldr	r0, [sp, #8]
 8003610:	9903      	ldr	r1, [sp, #12]
 8003612:	0122      	lsls	r2, r4, #4
 8003614:	f7fc ff02 	bl	800041c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003618:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800361a:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800361e:	4d0f      	ldr	r5, [pc, #60]	; (800365c <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003620:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003622:	692b      	ldr	r3, [r5, #16]
 8003624:	9a01      	ldr	r2, [sp, #4]
 8003626:	433b      	orrs	r3, r7
 8003628:	612b      	str	r3, [r5, #16]
 800362a:	0063      	lsls	r3, r4, #1
 800362c:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800362e:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8003630:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003632:	4809      	ldr	r0, [pc, #36]	; (8003658 <HAL_FLASH_Program+0x7c>)
 8003634:	f7ff ffa8 	bl	8003588 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003638:	692b      	ldr	r3, [r5, #16]
 800363a:	43bb      	bics	r3, r7
 800363c:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 800363e:	2800      	cmp	r0, #0
 8003640:	d103      	bne.n	800364a <HAL_FLASH_Program+0x6e>
    for (index = 0U; index < nbiterations; index++)
 8003642:	19e4      	adds	r4, r4, r7
 8003644:	b2e3      	uxtb	r3, r4
 8003646:	429e      	cmp	r6, r3
 8003648:	d8e1      	bhi.n	800360e <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 800364a:	2200      	movs	r2, #0
 800364c:	4b01      	ldr	r3, [pc, #4]	; (8003654 <HAL_FLASH_Program+0x78>)
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	b005      	add	sp, #20
 8003652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003654:	20000418 	.word	0x20000418
 8003658:	0000c350 	.word	0x0000c350
 800365c:	40022000 	.word	0x40022000

08003660 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003660:	2200      	movs	r2, #0
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <FLASH_MassErase+0x1c>)
 8003664:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <FLASH_MassErase+0x20>)
 8003668:	3204      	adds	r2, #4
 800366a:	6919      	ldr	r1, [r3, #16]
 800366c:	430a      	orrs	r2, r1
 800366e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	6919      	ldr	r1, [r3, #16]
 8003674:	430a      	orrs	r2, r1
 8003676:	611a      	str	r2, [r3, #16]
}
 8003678:	4770      	bx	lr
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	20000418 	.word	0x20000418
 8003680:	40022000 	.word	0x40022000

08003684 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003684:	2200      	movs	r2, #0
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <FLASH_PageErase+0x1c>)
 8003688:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <FLASH_PageErase+0x20>)
 800368c:	3202      	adds	r2, #2
 800368e:	6919      	ldr	r1, [r3, #16]
 8003690:	430a      	orrs	r2, r1
 8003692:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003694:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8003696:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003698:	6919      	ldr	r1, [r3, #16]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
}
 800369e:	4770      	bx	lr
 80036a0:	20000418 	.word	0x20000418
 80036a4:	40022000 	.word	0x40022000

080036a8 <HAL_FLASHEx_Erase>:
{
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80036aa:	4f21      	ldr	r7, [pc, #132]	; (8003730 <HAL_FLASHEx_Erase+0x88>)
{
 80036ac:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80036ae:	7e3b      	ldrb	r3, [r7, #24]
{
 80036b0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80036b2:	2002      	movs	r0, #2
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d00c      	beq.n	80036d2 <HAL_FLASHEx_Erase+0x2a>
 80036b8:	2301      	movs	r3, #1
 80036ba:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80036bc:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80036be:	481d      	ldr	r0, [pc, #116]	; (8003734 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d112      	bne.n	80036ea <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80036c4:	f7ff ff60 	bl	8003588 <FLASH_WaitForLastOperation>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80036ce:	2300      	movs	r3, #0
 80036d0:	763b      	strb	r3, [r7, #24]
}
 80036d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80036d4:	f7ff ffc4 	bl	8003660 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036d8:	4816      	ldr	r0, [pc, #88]	; (8003734 <HAL_FLASHEx_Erase+0x8c>)
 80036da:	f7ff ff55 	bl	8003588 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80036de:	2104      	movs	r1, #4
 80036e0:	4a15      	ldr	r2, [pc, #84]	; (8003738 <HAL_FLASHEx_Erase+0x90>)
 80036e2:	6913      	ldr	r3, [r2, #16]
 80036e4:	438b      	bics	r3, r1
 80036e6:	6113      	str	r3, [r2, #16]
 80036e8:	e7f1      	b.n	80036ce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80036ea:	f7ff ff4d 	bl	8003588 <FLASH_WaitForLastOperation>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d1ec      	bne.n	80036cc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80036f2:	2301      	movs	r3, #1
 80036f4:	425b      	negs	r3, r3
 80036f6:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80036f8:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036fa:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80036fc:	68a3      	ldr	r3, [r4, #8]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 8003704:	42ab      	cmp	r3, r5
 8003706:	d9e2      	bls.n	80036ce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8003708:	0028      	movs	r0, r5
 800370a:	f7ff ffbb 	bl	8003684 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800370e:	4809      	ldr	r0, [pc, #36]	; (8003734 <HAL_FLASHEx_Erase+0x8c>)
 8003710:	f7ff ff3a 	bl	8003588 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003714:	2102      	movs	r1, #2
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_FLASHEx_Erase+0x90>)
 8003718:	6913      	ldr	r3, [r2, #16]
 800371a:	438b      	bics	r3, r1
 800371c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800371e:	2800      	cmp	r0, #0
 8003720:	d001      	beq.n	8003726 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8003722:	6035      	str	r5, [r6, #0]
            break;
 8003724:	e7d3      	b.n	80036ce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	18ed      	adds	r5, r5, r3
 800372c:	e7e6      	b.n	80036fc <HAL_FLASHEx_Erase+0x54>
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20000418 	.word	0x20000418
 8003734:	0000c350 	.word	0x0000c350
 8003738:	40022000 	.word	0x40022000

0800373c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800373c:	2300      	movs	r3, #0
{
 800373e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003740:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003742:	680a      	ldr	r2, [r1, #0]
 8003744:	0014      	movs	r4, r2
 8003746:	40dc      	lsrs	r4, r3
 8003748:	d101      	bne.n	800374e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800374a:	b007      	add	sp, #28
 800374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800374e:	2501      	movs	r5, #1
 8003750:	0014      	movs	r4, r2
 8003752:	409d      	lsls	r5, r3
 8003754:	402c      	ands	r4, r5
 8003756:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8003758:	422a      	tst	r2, r5
 800375a:	d100      	bne.n	800375e <HAL_GPIO_Init+0x22>
 800375c:	e091      	b.n	8003882 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800375e:	684a      	ldr	r2, [r1, #4]
 8003760:	005e      	lsls	r6, r3, #1
 8003762:	4694      	mov	ip, r2
 8003764:	2203      	movs	r2, #3
 8003766:	4664      	mov	r4, ip
 8003768:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800376a:	2403      	movs	r4, #3
 800376c:	40b4      	lsls	r4, r6
 800376e:	43e4      	mvns	r4, r4
 8003770:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003772:	1e54      	subs	r4, r2, #1
 8003774:	2c01      	cmp	r4, #1
 8003776:	d82a      	bhi.n	80037ce <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8003778:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800377a:	9c02      	ldr	r4, [sp, #8]
 800377c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800377e:	68cc      	ldr	r4, [r1, #12]
 8003780:	40b4      	lsls	r4, r6
 8003782:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8003784:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003786:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003788:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378a:	43ac      	bics	r4, r5
 800378c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800378e:	4664      	mov	r4, ip
 8003790:	0924      	lsrs	r4, r4, #4
 8003792:	403c      	ands	r4, r7
 8003794:	409c      	lsls	r4, r3
 8003796:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003798:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800379a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800379c:	9c02      	ldr	r4, [sp, #8]
 800379e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037a0:	688c      	ldr	r4, [r1, #8]
 80037a2:	40b4      	lsls	r4, r6
 80037a4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80037a6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a8:	2a02      	cmp	r2, #2
 80037aa:	d112      	bne.n	80037d2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 80037ac:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ae:	2507      	movs	r5, #7
 80037b0:	00a4      	lsls	r4, r4, #2
 80037b2:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 80037b4:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b6:	9403      	str	r4, [sp, #12]
 80037b8:	240f      	movs	r4, #15
 80037ba:	401d      	ands	r5, r3
 80037bc:	00ad      	lsls	r5, r5, #2
 80037be:	40ac      	lsls	r4, r5
 80037c0:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c2:	690c      	ldr	r4, [r1, #16]
 80037c4:	40ac      	lsls	r4, r5
 80037c6:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 80037c8:	9c03      	ldr	r4, [sp, #12]
 80037ca:	6227      	str	r7, [r4, #32]
 80037cc:	e001      	b.n	80037d2 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ce:	2a03      	cmp	r2, #3
 80037d0:	d1e3      	bne.n	800379a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 80037d2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037d4:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037d6:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037d8:	4025      	ands	r5, r4
 80037da:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037dc:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80037de:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e0:	24c0      	movs	r4, #192	; 0xc0
 80037e2:	4662      	mov	r2, ip
 80037e4:	02a4      	lsls	r4, r4, #10
 80037e6:	4222      	tst	r2, r4
 80037e8:	d04b      	beq.n	8003882 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2501      	movs	r5, #1
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ee:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f0:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037f2:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f4:	432c      	orrs	r4, r5
 80037f6:	6194      	str	r4, [r2, #24]
 80037f8:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80037fa:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fc:	402a      	ands	r2, r5
 80037fe:	9205      	str	r2, [sp, #20]
 8003800:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <HAL_GPIO_Init+0x150>)
 8003804:	00a4      	lsls	r4, r4, #2
 8003806:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003808:	220f      	movs	r2, #15
 800380a:	3502      	adds	r5, #2
 800380c:	401d      	ands	r5, r3
 800380e:	00ad      	lsls	r5, r5, #2
 8003810:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8003812:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003814:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003816:	2200      	movs	r2, #0
 8003818:	42b8      	cmp	r0, r7
 800381a:	d008      	beq.n	800382e <HAL_GPIO_Init+0xf2>
 800381c:	4f1c      	ldr	r7, [pc, #112]	; (8003890 <HAL_GPIO_Init+0x154>)
 800381e:	3201      	adds	r2, #1
 8003820:	42b8      	cmp	r0, r7
 8003822:	d004      	beq.n	800382e <HAL_GPIO_Init+0xf2>
 8003824:	4f1b      	ldr	r7, [pc, #108]	; (8003894 <HAL_GPIO_Init+0x158>)
 8003826:	3201      	adds	r2, #1
 8003828:	42b8      	cmp	r0, r7
 800382a:	d000      	beq.n	800382e <HAL_GPIO_Init+0xf2>
 800382c:	3203      	adds	r2, #3
 800382e:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003830:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003832:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003834:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8003838:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800383a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800383c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 800383e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003840:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003842:	03ff      	lsls	r7, r7, #15
 8003844:	d401      	bmi.n	800384a <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8003846:	0035      	movs	r5, r6
 8003848:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800384a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800384c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800384e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003850:	9d01      	ldr	r5, [sp, #4]
 8003852:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003854:	03bf      	lsls	r7, r7, #14
 8003856:	d401      	bmi.n	800385c <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8003858:	0035      	movs	r5, r6
 800385a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800385c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800385e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003860:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003862:	9d01      	ldr	r5, [sp, #4]
 8003864:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003866:	02ff      	lsls	r7, r7, #11
 8003868:	d401      	bmi.n	800386e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800386a:	0035      	movs	r5, r6
 800386c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800386e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8003870:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003872:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003874:	9e01      	ldr	r6, [sp, #4]
 8003876:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003878:	02bf      	lsls	r7, r7, #10
 800387a:	d401      	bmi.n	8003880 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 800387c:	4025      	ands	r5, r4
 800387e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003880:	60d6      	str	r6, [r2, #12]
    position++;
 8003882:	3301      	adds	r3, #1
 8003884:	e75d      	b.n	8003742 <HAL_GPIO_Init+0x6>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	40021000 	.word	0x40021000
 800388c:	40010000 	.word	0x40010000
 8003890:	48000400 	.word	0x48000400
 8003894:	48000800 	.word	0x48000800
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800389c:	6900      	ldr	r0, [r0, #16]
 800389e:	4008      	ands	r0, r1
 80038a0:	1e43      	subs	r3, r0, #1
 80038a2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80038a4:	b2c0      	uxtb	r0, r0
  }
 80038a6:	4770      	bx	lr

080038a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80038b2:	e7fc      	b.n	80038ae <HAL_GPIO_WritePin+0x6>

080038b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80038b6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	4210      	tst	r0, r2
 80038bc:	d002      	beq.n	80038c4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c0:	f7fe ff3a 	bl	8002738 <HAL_GPIO_EXTI_Callback>
  }
}
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40010400 	.word	0x40010400

080038cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038cc:	6803      	ldr	r3, [r0, #0]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	0792      	lsls	r2, r2, #30
 80038d2:	d501      	bpl.n	80038d8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	2201      	movs	r2, #1
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	4211      	tst	r1, r2
 80038de:	d102      	bne.n	80038e6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
  }
}
 80038e6:	4770      	bx	lr

080038e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038e8:	b530      	push	{r4, r5, lr}
 80038ea:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038ec:	0412      	lsls	r2, r2, #16
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	4322      	orrs	r2, r4
 80038f2:	431a      	orrs	r2, r3
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <I2C_TransferConfig+0x24>)
 80038f6:	6845      	ldr	r5, [r0, #4]
 80038f8:	0589      	lsls	r1, r1, #22
 80038fa:	0d64      	lsrs	r4, r4, #21
 80038fc:	0d89      	lsrs	r1, r1, #22
 80038fe:	431c      	orrs	r4, r3
 8003900:	43a5      	bics	r5, r4
 8003902:	430a      	orrs	r2, r1
 8003904:	432a      	orrs	r2, r5
 8003906:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003908:	bd30      	pop	{r4, r5, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	03ff63ff 	.word	0x03ff63ff

08003910 <I2C_IsAcknowledgeFailed>:
{
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003912:	6803      	ldr	r3, [r0, #0]
{
 8003914:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003916:	699a      	ldr	r2, [r3, #24]
{
 8003918:	0004      	movs	r4, r0
 800391a:	000d      	movs	r5, r1
  return HAL_OK;
 800391c:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391e:	06d2      	lsls	r2, r2, #27
 8003920:	d536      	bpl.n	8003990 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	0192      	lsls	r2, r2, #6
 8003926:	d404      	bmi.n	8003932 <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	01d2      	lsls	r2, r2, #7
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003932:	2720      	movs	r7, #32
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	423a      	tst	r2, r7
 800393a:	d012      	beq.n	8003962 <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800393e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003942:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003944:	f7ff ffc2 	bl	80038cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	4912      	ldr	r1, [pc, #72]	; (8003994 <I2C_IsAcknowledgeFailed+0x84>)
 800394c:	6853      	ldr	r3, [r2, #4]
 800394e:	400b      	ands	r3, r1
 8003950:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003952:	2304      	movs	r3, #4
 8003954:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003956:	4313      	orrs	r3, r2
 8003958:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	0023      	movs	r3, r4
 800395c:	3341      	adds	r3, #65	; 0x41
 800395e:	701f      	strb	r7, [r3, #0]
 8003960:	e00f      	b.n	8003982 <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8003962:	1c6a      	adds	r2, r5, #1
 8003964:	d0e7      	beq.n	8003936 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7ff fa29 	bl	8002dbc <HAL_GetTick>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	4285      	cmp	r5, r0
 800396e:	d301      	bcc.n	8003974 <I2C_IsAcknowledgeFailed+0x64>
 8003970:	2d00      	cmp	r5, #0
 8003972:	d1df      	bne.n	8003934 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	2220      	movs	r2, #32
 8003976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003978:	4313      	orrs	r3, r2
 800397a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800397c:	0023      	movs	r3, r4
 800397e:	3341      	adds	r3, #65	; 0x41
 8003980:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	0022      	movs	r2, r4
 8003984:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003986:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800398a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800398e:	7023      	strb	r3, [r4, #0]
}
 8003990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	fe00e800 	.word	0xfe00e800

08003998 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	0004      	movs	r4, r0
 800399c:	000d      	movs	r5, r1
 800399e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039a0:	2702      	movs	r7, #2
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	423b      	tst	r3, r7
 80039a8:	d001      	beq.n	80039ae <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80039aa:	2000      	movs	r0, #0
}
 80039ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ae:	0032      	movs	r2, r6
 80039b0:	0029      	movs	r1, r5
 80039b2:	0020      	movs	r0, r4
 80039b4:	f7ff ffac 	bl	8003910 <I2C_IsAcknowledgeFailed>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d115      	bne.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	1c6b      	adds	r3, r5, #1
 80039be:	d0f0      	beq.n	80039a2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7ff f9fc 	bl	8002dbc <HAL_GetTick>
 80039c4:	1b80      	subs	r0, r0, r6
 80039c6:	42a8      	cmp	r0, r5
 80039c8:	d801      	bhi.n	80039ce <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	d1e9      	bne.n	80039a2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	2220      	movs	r2, #32
 80039d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039d2:	4313      	orrs	r3, r2
 80039d4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	0023      	movs	r3, r4
 80039d8:	3341      	adds	r3, #65	; 0x41
 80039da:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	0022      	movs	r2, r4
 80039de:	2300      	movs	r3, #0
 80039e0:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80039e2:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80039e6:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1
 80039ea:	e7df      	b.n	80039ac <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080039ec <I2C_WaitOnFlagUntilTimeout>:
{
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	0004      	movs	r4, r0
 80039f0:	000e      	movs	r6, r1
 80039f2:	0017      	movs	r7, r2
 80039f4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	6993      	ldr	r3, [r2, #24]
 80039fa:	4033      	ands	r3, r6
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	4259      	negs	r1, r3
 8003a00:	414b      	adcs	r3, r1
 8003a02:	42bb      	cmp	r3, r7
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003a06:	2000      	movs	r0, #0
 8003a08:	e017      	b.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	1c6b      	adds	r3, r5, #1
 8003a0c:	d0f4      	beq.n	80039f8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7ff f9d5 	bl	8002dbc <HAL_GetTick>
 8003a12:	9b06      	ldr	r3, [sp, #24]
 8003a14:	1ac0      	subs	r0, r0, r3
 8003a16:	42a8      	cmp	r0, r5
 8003a18:	d801      	bhi.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x32>
 8003a1a:	2d00      	cmp	r5, #0
 8003a1c:	d1eb      	bne.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	2220      	movs	r2, #32
 8003a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a22:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	4313      	orrs	r3, r2
 8003a26:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	0023      	movs	r3, r4
 8003a2a:	3341      	adds	r3, #65	; 0x41
 8003a2c:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	0022      	movs	r2, r4
 8003a30:	2300      	movs	r3, #0
 8003a32:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003a34:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003a38:	7023      	strb	r3, [r4, #0]
}
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a3c <I2C_RequestMemoryWrite>:
{
 8003a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a3e:	0014      	movs	r4, r2
 8003a40:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <I2C_RequestMemoryWrite+0x64>)
{
 8003a46:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2380      	movs	r3, #128	; 0x80
{
 8003a4c:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a4e:	045b      	lsls	r3, r3, #17
 8003a50:	f7ff ff4a 	bl	80038e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a54:	0039      	movs	r1, r7
 8003a56:	0028      	movs	r0, r5
 8003a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a5a:	f7ff ff9d 	bl	8003998 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
}
 8003a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a66:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a68:	2e01      	cmp	r6, #1
 8003a6a:	d10d      	bne.n	8003a88 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6c:	b2e4      	uxtb	r4, r4
 8003a6e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a72:	2200      	movs	r2, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	003b      	movs	r3, r7
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	f7ff ffb6 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003a80:	1e43      	subs	r3, r0, #1
 8003a82:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003a84:	b2c0      	uxtb	r0, r0
 8003a86:	e7ed      	b.n	8003a64 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	0a22      	lsrs	r2, r4, #8
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	0039      	movs	r1, r7
 8003a8e:	0028      	movs	r0, r5
 8003a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a92:	f7ff ff81 	bl	8003998 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d1e3      	bne.n	8003a62 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	e7e6      	b.n	8003a6c <I2C_RequestMemoryWrite+0x30>
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	80002000 	.word	0x80002000

08003aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	0004      	movs	r4, r0
 8003aa8:	000d      	movs	r5, r1
 8003aaa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aac:	2720      	movs	r7, #32
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	423b      	tst	r3, r7
 8003ab4:	d001      	beq.n	8003aba <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
}
 8003ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	0032      	movs	r2, r6
 8003abc:	0029      	movs	r1, r5
 8003abe:	0020      	movs	r0, r4
 8003ac0:	f7ff ff26 	bl	8003910 <I2C_IsAcknowledgeFailed>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d113      	bne.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7ff f978 	bl	8002dbc <HAL_GetTick>
 8003acc:	1b80      	subs	r0, r0, r6
 8003ace:	42a8      	cmp	r0, r5
 8003ad0:	d801      	bhi.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	d1eb      	bne.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ada:	4313      	orrs	r3, r2
 8003adc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	0023      	movs	r3, r4
 8003ae0:	3341      	adds	r3, #65	; 0x41
 8003ae2:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	0022      	movs	r2, r4
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003aea:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003aee:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003af0:	2001      	movs	r0, #1
 8003af2:	e7e1      	b.n	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003af4 <HAL_I2C_Init>:
{
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	d03f      	beq.n	8003b7e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afe:	0025      	movs	r5, r4
 8003b00:	3541      	adds	r5, #65	; 0x41
 8003b02:	782b      	ldrb	r3, [r5, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003b0a:	0023      	movs	r3, r4
 8003b0c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003b0e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003b10:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003b12:	f7fe fb0f 	bl	8002134 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b16:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003b18:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003b1c:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1e:	481d      	ldr	r0, [pc, #116]	; (8003b94 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003b20:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b22:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	438a      	bics	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b28:	6861      	ldr	r1, [r4, #4]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_I2C_Init+0xa4>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4002      	ands	r2, r0
 8003b34:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b36:	68e2      	ldr	r2, [r4, #12]
 8003b38:	2a01      	cmp	r2, #1
 8003b3a:	d121      	bne.n	8003b80 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0209      	lsls	r1, r1, #8
 8003b40:	4331      	orrs	r1, r6
 8003b42:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4915      	ldr	r1, [pc, #84]	; (8003b9c <HAL_I2C_Init+0xa8>)
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b4c:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b4e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b50:	4002      	ands	r2, r0
 8003b52:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b54:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b56:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b58:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b5a:	69a1      	ldr	r1, [r4, #24]
 8003b5c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b62:	6a21      	ldr	r1, [r4, #32]
 8003b64:	69e2      	ldr	r2, [r4, #28]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b78:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	3442      	adds	r4, #66	; 0x42
 8003b7c:	7020      	strb	r0, [r4, #0]
}
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b80:	2184      	movs	r1, #132	; 0x84
 8003b82:	0209      	lsls	r1, r1, #8
 8003b84:	4331      	orrs	r1, r6
 8003b86:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b88:	2a02      	cmp	r2, #2
 8003b8a:	d1db      	bne.n	8003b44 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e7d7      	b.n	8003b44 <HAL_I2C_Init+0x50>
 8003b94:	ffff7fff 	.word	0xffff7fff
 8003b98:	f0ffffff 	.word	0xf0ffffff
 8003b9c:	02008000 	.word	0x02008000

08003ba0 <HAL_I2C_Mem_Write>:
{
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	9307      	str	r3, [sp, #28]
 8003ba6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ba8:	9206      	str	r2, [sp, #24]
 8003baa:	cb04      	ldmia	r3!, {r2}
 8003bac:	0004      	movs	r4, r0
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	9203      	str	r2, [sp, #12]
 8003bb2:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	3341      	adds	r3, #65	; 0x41
 8003bb8:	9305      	str	r3, [sp, #20]
 8003bba:	781b      	ldrb	r3, [r3, #0]
{
 8003bbc:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003bbe:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d108      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_I2C_Mem_Write+0x2e>
 8003bc8:	9b04      	ldr	r3, [sp, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
}
 8003bd6:	b009      	add	sp, #36	; 0x24
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003bda:	0023      	movs	r3, r4
 8003bdc:	3340      	adds	r3, #64	; 0x40
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8003be2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d0f6      	beq.n	8003bd6 <HAL_I2C_Mem_Write+0x36>
 8003be8:	2201      	movs	r2, #1
 8003bea:	9b02      	ldr	r3, [sp, #8]
 8003bec:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003bee:	f7ff f8e5 	bl	8002dbc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003bf6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf8:	2319      	movs	r3, #25
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	0020      	movs	r0, r4
 8003bfe:	0209      	lsls	r1, r1, #8
 8003c00:	f7ff fef4 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003c04:	1e06      	subs	r6, r0, #0
 8003c06:	d1e5      	bne.n	8003bd4 <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c08:	2321      	movs	r3, #33	; 0x21
 8003c0a:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0c:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c0e:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c10:	0023      	movs	r3, r4
 8003c12:	3342      	adds	r3, #66	; 0x42
 8003c14:	9305      	str	r3, [sp, #20]
 8003c16:	2340      	movs	r3, #64	; 0x40
 8003c18:	9a05      	ldr	r2, [sp, #20]
 8003c1a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8003c1c:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c20:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c22:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 8003c24:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003c26:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	9a06      	ldr	r2, [sp, #24]
 8003c30:	9b07      	ldr	r3, [sp, #28]
 8003c32:	9501      	str	r5, [sp, #4]
 8003c34:	f7ff ff02 	bl	8003a3c <I2C_RequestMemoryWrite>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8003c3c:	9b02      	ldr	r3, [sp, #8]
 8003c3e:	701e      	strb	r6, [r3, #0]
 8003c40:	e7c8      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c44:	2bff      	cmp	r3, #255	; 0xff
 8003c46:	d954      	bls.n	8003cf2 <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c48:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c4a:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c4e:	045b      	lsls	r3, r3, #17
 8003c50:	9000      	str	r0, [sp, #0]
 8003c52:	0039      	movs	r1, r7
 8003c54:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c56:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c58:	f7ff fe46 	bl	80038e8 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5c:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5e:	002a      	movs	r2, r5
 8003c60:	0020      	movs	r0, r4
 8003c62:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003c64:	f7ff fe98 	bl	8003998 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d1b3      	bne.n	8003bd4 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003c72:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c74:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003c76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c82:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c86:	b292      	uxth	r2, r2
 8003c88:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d017      	beq.n	8003cbe <HAL_I2C_Mem_Write+0x11e>
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d115      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	0020      	movs	r0, r4
 8003c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c98:	9500      	str	r5, [sp, #0]
 8003c9a:	f7ff fea7 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d000      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x104>
 8003ca2:	e797      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ca6:	2bff      	cmp	r3, #255	; 0xff
 8003ca8:	d92b      	bls.n	8003d02 <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003caa:	23ff      	movs	r3, #255	; 0xff
 8003cac:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	9000      	str	r0, [sp, #0]
 8003cb4:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cb6:	0039      	movs	r1, r7
 8003cb8:	0020      	movs	r0, r4
 8003cba:	f7ff fe15 	bl	80038e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003cbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cc      	bne.n	8003c5e <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	002a      	movs	r2, r5
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003cca:	f7ff feeb 	bl	8003aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d000      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x134>
 8003cd2:	e77f      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003cd8:	4d0d      	ldr	r5, [pc, #52]	; (8003d10 <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cda:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	402a      	ands	r2, r5
 8003ce0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	0023      	movs	r3, r4
 8003ce4:	3341      	adds	r3, #65	; 0x41
 8003ce6:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ce8:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 8003cea:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cec:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003cee:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003cf0:	e771      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf2:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8003cf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf6:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	9000      	str	r0, [sp, #0]
 8003d00:	e7a7      	b.n	8003c52 <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 8003d02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d04:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8003d06:	b292      	uxth	r2, r2
 8003d08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	9000      	str	r0, [sp, #0]
 8003d0e:	e7d2      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x116>
 8003d10:	fe00e800 	.word	0xfe00e800

08003d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	0004      	movs	r4, r0
 8003d18:	3441      	adds	r4, #65	; 0x41
 8003d1a:	7822      	ldrb	r2, [r4, #0]
{
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	b2d6      	uxtb	r6, r2
 8003d24:	2a20      	cmp	r2, #32
 8003d26:	d118      	bne.n	8003d5a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003d28:	001d      	movs	r5, r3
 8003d2a:	3540      	adds	r5, #64	; 0x40
 8003d2c:	782a      	ldrb	r2, [r5, #0]
 8003d2e:	2a01      	cmp	r2, #1
 8003d30:	d013      	beq.n	8003d5a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3a23      	subs	r2, #35	; 0x23
 8003d3a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d3c:	4807      	ldr	r0, [pc, #28]	; (8003d5c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003d3e:	4391      	bics	r1, r2
 8003d40:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003d46:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d48:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	4339      	orrs	r1, r7
 8003d4e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003d58:	7028      	strb	r0, [r5, #0]
  }
}
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	ffffefff 	.word	0xffffefff

08003d60 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	0002      	movs	r2, r0
{
 8003d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d64:	3241      	adds	r2, #65	; 0x41
 8003d66:	7814      	ldrb	r4, [r2, #0]
{
 8003d68:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6e:	2c20      	cmp	r4, #32
 8003d70:	d117      	bne.n	8003da2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003d72:	001c      	movs	r4, r3
 8003d74:	3440      	adds	r4, #64	; 0x40
 8003d76:	7826      	ldrb	r6, [r4, #0]
 8003d78:	2e01      	cmp	r6, #1
 8003d7a:	d012      	beq.n	8003da2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	3022      	adds	r0, #34	; 0x22
 8003d7e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3823      	subs	r0, #35	; 0x23
 8003d84:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003d86:	4f07      	ldr	r7, [pc, #28]	; (8003da4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003d88:	4386      	bics	r6, r0
 8003d8a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003d8c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003d8e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003d90:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003d92:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003d94:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	4308      	orrs	r0, r1
 8003d9a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003d9c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003da0:	7020      	strb	r0, [r4, #0]
  }
}
 8003da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da4:	fffff0ff 	.word	0xfffff0ff

08003da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d045      	beq.n	8003e3e <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	6803      	ldr	r3, [r0, #0]
 8003db4:	07db      	lsls	r3, r3, #31
 8003db6:	d42f      	bmi.n	8003e18 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	079b      	lsls	r3, r3, #30
 8003dbc:	d500      	bpl.n	8003dc0 <HAL_RCC_OscConfig+0x18>
 8003dbe:	e081      	b.n	8003ec4 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	071b      	lsls	r3, r3, #28
 8003dc4:	d500      	bpl.n	8003dc8 <HAL_RCC_OscConfig+0x20>
 8003dc6:	e0bc      	b.n	8003f42 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	075b      	lsls	r3, r3, #29
 8003dcc:	d500      	bpl.n	8003dd0 <HAL_RCC_OscConfig+0x28>
 8003dce:	e0df      	b.n	8003f90 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	06db      	lsls	r3, r3, #27
 8003dd4:	d51a      	bpl.n	8003e0c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003dd6:	6962      	ldr	r2, [r4, #20]
 8003dd8:	2304      	movs	r3, #4
 8003dda:	4db5      	ldr	r5, [pc, #724]	; (80040b0 <HAL_RCC_OscConfig+0x308>)
 8003ddc:	2a01      	cmp	r2, #1
 8003dde:	d000      	beq.n	8003de2 <HAL_RCC_OscConfig+0x3a>
 8003de0:	e14a      	b.n	8004078 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003de2:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003de4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003de6:	430b      	orrs	r3, r1
 8003de8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003dea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003dec:	431a      	orrs	r2, r3
 8003dee:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003df0:	f7fe ffe4 	bl	8002dbc <HAL_GetTick>
 8003df4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003df6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003df8:	423b      	tst	r3, r7
 8003dfa:	d100      	bne.n	8003dfe <HAL_RCC_OscConfig+0x56>
 8003dfc:	e135      	b.n	800406a <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dfe:	21f8      	movs	r1, #248	; 0xf8
 8003e00:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003e02:	69a3      	ldr	r3, [r4, #24]
 8003e04:	438a      	bics	r2, r1
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0c:	6a23      	ldr	r3, [r4, #32]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d000      	beq.n	8003e14 <HAL_RCC_OscConfig+0x6c>
 8003e12:	e159      	b.n	80040c8 <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8003e14:	2000      	movs	r0, #0
 8003e16:	e02a      	b.n	8003e6e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e18:	210c      	movs	r1, #12
 8003e1a:	4da5      	ldr	r5, [pc, #660]	; (80040b0 <HAL_RCC_OscConfig+0x308>)
 8003e1c:	686a      	ldr	r2, [r5, #4]
 8003e1e:	400a      	ands	r2, r1
 8003e20:	2a04      	cmp	r2, #4
 8003e22:	d006      	beq.n	8003e32 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e24:	686b      	ldr	r3, [r5, #4]
 8003e26:	400b      	ands	r3, r1
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d10a      	bne.n	8003e42 <HAL_RCC_OscConfig+0x9a>
 8003e2c:	686b      	ldr	r3, [r5, #4]
 8003e2e:	03db      	lsls	r3, r3, #15
 8003e30:	d507      	bpl.n	8003e42 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e32:	682b      	ldr	r3, [r5, #0]
 8003e34:	039b      	lsls	r3, r3, #14
 8003e36:	d5bf      	bpl.n	8003db8 <HAL_RCC_OscConfig+0x10>
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1bc      	bne.n	8003db8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8003e3e:	2001      	movs	r0, #1
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d114      	bne.n	8003e72 <HAL_RCC_OscConfig+0xca>
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	682a      	ldr	r2, [r5, #0]
 8003e4c:	025b      	lsls	r3, r3, #9
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e52:	f7fe ffb3 	bl	8002dbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003e58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	02bf      	lsls	r7, r7, #10
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	423b      	tst	r3, r7
 8003e60:	d1aa      	bne.n	8003db8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e62:	f7fe ffab 	bl	8002dbc <HAL_GetTick>
 8003e66:	1b80      	subs	r0, r0, r6
 8003e68:	2864      	cmp	r0, #100	; 0x64
 8003e6a:	d9f7      	bls.n	8003e5c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8003e6c:	2003      	movs	r0, #3
}
 8003e6e:	b005      	add	sp, #20
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xfc>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	4a8e      	ldr	r2, [pc, #568]	; (80040b4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	4a8d      	ldr	r2, [pc, #564]	; (80040b8 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e84:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e86:	4013      	ands	r3, r2
 8003e88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e8a:	f7fe ff97 	bl	8002dbc <HAL_GetTick>
 8003e8e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	423b      	tst	r3, r7
 8003e94:	d100      	bne.n	8003e98 <HAL_RCC_OscConfig+0xf0>
 8003e96:	e78f      	b.n	8003db8 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe ff90 	bl	8002dbc <HAL_GetTick>
 8003e9c:	1b80      	subs	r0, r0, r6
 8003e9e:	2864      	cmp	r0, #100	; 0x64
 8003ea0:	d9f6      	bls.n	8003e90 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e7e3      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x10c>
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	682a      	ldr	r2, [r5, #0]
 8003eac:	02db      	lsls	r3, r3, #11
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	e7c9      	b.n	8003e48 <HAL_RCC_OscConfig+0xa0>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	4a7f      	ldr	r2, [pc, #508]	; (80040b4 <HAL_RCC_OscConfig+0x30c>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	4a7e      	ldr	r2, [pc, #504]	; (80040b8 <HAL_RCC_OscConfig+0x310>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	e7c5      	b.n	8003e50 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ec4:	220c      	movs	r2, #12
 8003ec6:	4d7a      	ldr	r5, [pc, #488]	; (80040b0 <HAL_RCC_OscConfig+0x308>)
 8003ec8:	686b      	ldr	r3, [r5, #4]
 8003eca:	4213      	tst	r3, r2
 8003ecc:	d006      	beq.n	8003edc <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ece:	686b      	ldr	r3, [r5, #4]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d110      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x150>
 8003ed6:	686b      	ldr	r3, [r5, #4]
 8003ed8:	03db      	lsls	r3, r3, #15
 8003eda:	d40d      	bmi.n	8003ef8 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	079b      	lsls	r3, r3, #30
 8003ee0:	d502      	bpl.n	8003ee8 <HAL_RCC_OscConfig+0x140>
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d1aa      	bne.n	8003e3e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	21f8      	movs	r1, #248	; 0xf8
 8003eea:	682a      	ldr	r2, [r5, #0]
 8003eec:	6923      	ldr	r3, [r4, #16]
 8003eee:	438a      	bics	r2, r1
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	e763      	b.n	8003dc0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef8:	68e2      	ldr	r2, [r4, #12]
 8003efa:	2301      	movs	r3, #1
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d00f      	beq.n	8003f20 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8003f00:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4313      	orrs	r3, r2
 8003f06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f08:	f7fe ff58 	bl	8002dbc <HAL_GetTick>
 8003f0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	423b      	tst	r3, r7
 8003f12:	d1e9      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fe ff52 	bl	8002dbc <HAL_GetTick>
 8003f18:	1b80      	subs	r0, r0, r6
 8003f1a:	2802      	cmp	r0, #2
 8003f1c:	d9f7      	bls.n	8003f0e <HAL_RCC_OscConfig+0x166>
 8003f1e:	e7a5      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8003f20:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003f24:	439a      	bics	r2, r3
 8003f26:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003f28:	f7fe ff48 	bl	8002dbc <HAL_GetTick>
 8003f2c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	423b      	tst	r3, r7
 8003f32:	d100      	bne.n	8003f36 <HAL_RCC_OscConfig+0x18e>
 8003f34:	e744      	b.n	8003dc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe ff41 	bl	8002dbc <HAL_GetTick>
 8003f3a:	1b80      	subs	r0, r0, r6
 8003f3c:	2802      	cmp	r0, #2
 8003f3e:	d9f6      	bls.n	8003f2e <HAL_RCC_OscConfig+0x186>
 8003f40:	e794      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f42:	69e2      	ldr	r2, [r4, #28]
 8003f44:	2301      	movs	r3, #1
 8003f46:	4d5a      	ldr	r5, [pc, #360]	; (80040b0 <HAL_RCC_OscConfig+0x308>)
 8003f48:	2a00      	cmp	r2, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8003f4c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003f50:	4313      	orrs	r3, r2
 8003f52:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003f54:	f7fe ff32 	bl	8002dbc <HAL_GetTick>
 8003f58:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f5c:	423b      	tst	r3, r7
 8003f5e:	d000      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1ba>
 8003f60:	e732      	b.n	8003dc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fe ff2b 	bl	8002dbc <HAL_GetTick>
 8003f66:	1b80      	subs	r0, r0, r6
 8003f68:	2802      	cmp	r0, #2
 8003f6a:	d9f6      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1b2>
 8003f6c:	e77e      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8003f6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003f72:	439a      	bics	r2, r3
 8003f74:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003f76:	f7fe ff21 	bl	8002dbc <HAL_GetTick>
 8003f7a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f7e:	423b      	tst	r3, r7
 8003f80:	d100      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1dc>
 8003f82:	e721      	b.n	8003dc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe ff1a 	bl	8002dbc <HAL_GetTick>
 8003f88:	1b80      	subs	r0, r0, r6
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d9f6      	bls.n	8003f7c <HAL_RCC_OscConfig+0x1d4>
 8003f8e:	e76d      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f90:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f94:	4d46      	ldr	r5, [pc, #280]	; (80040b0 <HAL_RCC_OscConfig+0x308>)
 8003f96:	0552      	lsls	r2, r2, #21
 8003f98:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9c:	4213      	tst	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	69eb      	ldr	r3, [r5, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61eb      	str	r3, [r5, #28]
 8003fa6:	69eb      	ldr	r3, [r5, #28]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	2780      	movs	r7, #128	; 0x80
 8003fb4:	4e41      	ldr	r6, [pc, #260]	; (80040bc <HAL_RCC_OscConfig+0x314>)
 8003fb6:	007f      	lsls	r7, r7, #1
 8003fb8:	6833      	ldr	r3, [r6, #0]
 8003fba:	423b      	tst	r3, r7
 8003fbc:	d006      	beq.n	8003fcc <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d113      	bne.n	8003fec <HAL_RCC_OscConfig+0x244>
 8003fc4:	6a2a      	ldr	r2, [r5, #32]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	622b      	str	r3, [r5, #32]
 8003fca:	e030      	b.n	800402e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fcc:	6833      	ldr	r3, [r6, #0]
 8003fce:	433b      	orrs	r3, r7
 8003fd0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fef3 	bl	8002dbc <HAL_GetTick>
 8003fd6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	423b      	tst	r3, r7
 8003fdc:	d1ef      	bne.n	8003fbe <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe feed 	bl	8002dbc <HAL_GetTick>
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	1ac0      	subs	r0, r0, r3
 8003fe6:	2864      	cmp	r0, #100	; 0x64
 8003fe8:	d9f6      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x230>
 8003fea:	e73f      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	2201      	movs	r2, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d114      	bne.n	800401c <HAL_RCC_OscConfig+0x274>
 8003ff2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	622b      	str	r3, [r5, #32]
 8003ffa:	6a2b      	ldr	r3, [r5, #32]
 8003ffc:	3203      	adds	r2, #3
 8003ffe:	4393      	bics	r3, r2
 8004000:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004002:	f7fe fedb 	bl	8002dbc <HAL_GetTick>
 8004006:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	6a2b      	ldr	r3, [r5, #32]
 800400a:	423b      	tst	r3, r7
 800400c:	d016      	beq.n	800403c <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe fed5 	bl	8002dbc <HAL_GetTick>
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x318>)
 8004014:	1b80      	subs	r0, r0, r6
 8004016:	4298      	cmp	r0, r3
 8004018:	d9f6      	bls.n	8004008 <HAL_RCC_OscConfig+0x260>
 800401a:	e727      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	2b05      	cmp	r3, #5
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x2a6>
 8004020:	6a29      	ldr	r1, [r5, #32]
 8004022:	3b01      	subs	r3, #1
 8004024:	430b      	orrs	r3, r1
 8004026:	622b      	str	r3, [r5, #32]
 8004028:	6a2b      	ldr	r3, [r5, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800402e:	f7fe fec5 	bl	8002dbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8004034:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	6a2b      	ldr	r3, [r5, #32]
 8004038:	423b      	tst	r3, r7
 800403a:	d00f      	beq.n	800405c <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 800403c:	9b00      	ldr	r3, [sp, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d000      	beq.n	8004044 <HAL_RCC_OscConfig+0x29c>
 8004042:	e6c5      	b.n	8003dd0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	69eb      	ldr	r3, [r5, #28]
 8004046:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <HAL_RCC_OscConfig+0x31c>)
 8004048:	4013      	ands	r3, r2
 800404a:	61eb      	str	r3, [r5, #28]
 800404c:	e6c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404e:	6a2b      	ldr	r3, [r5, #32]
 8004050:	4393      	bics	r3, r2
 8004052:	2204      	movs	r2, #4
 8004054:	622b      	str	r3, [r5, #32]
 8004056:	6a2b      	ldr	r3, [r5, #32]
 8004058:	4393      	bics	r3, r2
 800405a:	e7b5      	b.n	8003fc8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe feae 	bl	8002dbc <HAL_GetTick>
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <HAL_RCC_OscConfig+0x318>)
 8004062:	1b80      	subs	r0, r0, r6
 8004064:	4298      	cmp	r0, r3
 8004066:	d9e6      	bls.n	8004036 <HAL_RCC_OscConfig+0x28e>
 8004068:	e700      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800406a:	f7fe fea7 	bl	8002dbc <HAL_GetTick>
 800406e:	1b80      	subs	r0, r0, r6
 8004070:	2802      	cmp	r0, #2
 8004072:	d800      	bhi.n	8004076 <HAL_RCC_OscConfig+0x2ce>
 8004074:	e6bf      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e>
 8004076:	e6f9      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004078:	3205      	adds	r2, #5
 800407a:	d103      	bne.n	8004084 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 800407c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800407e:	439a      	bics	r2, r3
 8004080:	636a      	str	r2, [r5, #52]	; 0x34
 8004082:	e6bc      	b.n	8003dfe <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004084:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004086:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004088:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800408a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800408c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800408e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004090:	4393      	bics	r3, r2
 8004092:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004094:	f7fe fe92 	bl	8002dbc <HAL_GetTick>
 8004098:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800409a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800409c:	423b      	tst	r3, r7
 800409e:	d100      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2fa>
 80040a0:	e6b4      	b.n	8003e0c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040a2:	f7fe fe8b 	bl	8002dbc <HAL_GetTick>
 80040a6:	1b80      	subs	r0, r0, r6
 80040a8:	2802      	cmp	r0, #2
 80040aa:	d9f6      	bls.n	800409a <HAL_RCC_OscConfig+0x2f2>
 80040ac:	e6de      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	fffeffff 	.word	0xfffeffff
 80040b8:	fffbffff 	.word	0xfffbffff
 80040bc:	40007000 	.word	0x40007000
 80040c0:	00001388 	.word	0x00001388
 80040c4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	210c      	movs	r1, #12
 80040ca:	4d34      	ldr	r5, [pc, #208]	; (800419c <HAL_RCC_OscConfig+0x3f4>)
 80040cc:	686a      	ldr	r2, [r5, #4]
 80040ce:	400a      	ands	r2, r1
 80040d0:	2a08      	cmp	r2, #8
 80040d2:	d047      	beq.n	8004164 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d4:	4a32      	ldr	r2, [pc, #200]	; (80041a0 <HAL_RCC_OscConfig+0x3f8>)
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d132      	bne.n	8004140 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 80040da:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80040de:	4013      	ands	r3, r2
 80040e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040e2:	f7fe fe6b 	bl	8002dbc <HAL_GetTick>
 80040e6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	04bf      	lsls	r7, r7, #18
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	423b      	tst	r3, r7
 80040ee:	d121      	bne.n	8004134 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f0:	220f      	movs	r2, #15
 80040f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	4393      	bics	r3, r2
 80040f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040fa:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004100:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004104:	686a      	ldr	r2, [r5, #4]
 8004106:	430b      	orrs	r3, r1
 8004108:	4926      	ldr	r1, [pc, #152]	; (80041a4 <HAL_RCC_OscConfig+0x3fc>)
 800410a:	400a      	ands	r2, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	682a      	ldr	r2, [r5, #0]
 8004114:	045b      	lsls	r3, r3, #17
 8004116:	4313      	orrs	r3, r2
 8004118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800411a:	f7fe fe4f 	bl	8002dbc <HAL_GetTick>
 800411e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	4233      	tst	r3, r6
 8004124:	d000      	beq.n	8004128 <HAL_RCC_OscConfig+0x380>
 8004126:	e675      	b.n	8003e14 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fe48 	bl	8002dbc <HAL_GetTick>
 800412c:	1b00      	subs	r0, r0, r4
 800412e:	2802      	cmp	r0, #2
 8004130:	d9f6      	bls.n	8004120 <HAL_RCC_OscConfig+0x378>
 8004132:	e69b      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004134:	f7fe fe42 	bl	8002dbc <HAL_GetTick>
 8004138:	1b80      	subs	r0, r0, r6
 800413a:	2802      	cmp	r0, #2
 800413c:	d9d5      	bls.n	80040ea <HAL_RCC_OscConfig+0x342>
 800413e:	e695      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8004140:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004142:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004144:	4013      	ands	r3, r2
 8004146:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004148:	f7fe fe38 	bl	8002dbc <HAL_GetTick>
 800414c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414e:	04b6      	lsls	r6, r6, #18
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	4233      	tst	r3, r6
 8004154:	d100      	bne.n	8004158 <HAL_RCC_OscConfig+0x3b0>
 8004156:	e65d      	b.n	8003e14 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fe30 	bl	8002dbc <HAL_GetTick>
 800415c:	1b00      	subs	r0, r0, r4
 800415e:	2802      	cmp	r0, #2
 8004160:	d9f6      	bls.n	8004150 <HAL_RCC_OscConfig+0x3a8>
 8004162:	e683      	b.n	8003e6c <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8004164:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004166:	2b01      	cmp	r3, #1
 8004168:	d100      	bne.n	800416c <HAL_RCC_OscConfig+0x3c4>
 800416a:	e680      	b.n	8003e6e <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 800416e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004170:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004172:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8004174:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	4019      	ands	r1, r3
 8004178:	4281      	cmp	r1, r0
 800417a:	d000      	beq.n	800417e <HAL_RCC_OscConfig+0x3d6>
 800417c:	e65f      	b.n	8003e3e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800417e:	210f      	movs	r1, #15
 8004180:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004184:	428a      	cmp	r2, r1
 8004186:	d000      	beq.n	800418a <HAL_RCC_OscConfig+0x3e2>
 8004188:	e659      	b.n	8003e3e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800418a:	22f0      	movs	r2, #240	; 0xf0
 800418c:	0392      	lsls	r2, r2, #14
 800418e:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004190:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004192:	4293      	cmp	r3, r2
 8004194:	d100      	bne.n	8004198 <HAL_RCC_OscConfig+0x3f0>
 8004196:	e63d      	b.n	8003e14 <HAL_RCC_OscConfig+0x6c>
 8004198:	e651      	b.n	8003e3e <HAL_RCC_OscConfig+0x96>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	40021000 	.word	0x40021000
 80041a0:	feffffff 	.word	0xfeffffff
 80041a4:	ffc2ffff 	.word	0xffc2ffff

080041a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80041ac:	2210      	movs	r2, #16
 80041ae:	4912      	ldr	r1, [pc, #72]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80041b0:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80041b2:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80041b4:	f001 ff56 	bl	8006064 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80041b8:	2210      	movs	r2, #16
 80041ba:	0028      	movs	r0, r5
 80041bc:	490f      	ldr	r1, [pc, #60]	; (80041fc <HAL_RCC_GetSysClockFreq+0x54>)
 80041be:	f001 ff51 	bl	8006064 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041c2:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80041c4:	4e0e      	ldr	r6, [pc, #56]	; (8004200 <HAL_RCC_GetSysClockFreq+0x58>)
 80041c6:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80041c8:	401a      	ands	r2, r3
 80041ca:	2a08      	cmp	r2, #8
 80041cc:	d111      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041ce:	200f      	movs	r0, #15
 80041d0:	466a      	mov	r2, sp
 80041d2:	0c99      	lsrs	r1, r3, #18
 80041d4:	4001      	ands	r1, r0
 80041d6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041d8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80041da:	4002      	ands	r2, r0
 80041dc:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041de:	03db      	lsls	r3, r3, #15
 80041e0:	d505      	bpl.n	80041ee <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e2:	4808      	ldr	r0, [pc, #32]	; (8004204 <HAL_RCC_GetSysClockFreq+0x5c>)
 80041e4:	f7fb ffa4 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041e8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80041ea:	b008      	add	sp, #32
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041ee:	4806      	ldr	r0, [pc, #24]	; (8004208 <HAL_RCC_GetSysClockFreq+0x60>)
 80041f0:	e7fa      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 80041f2:	4804      	ldr	r0, [pc, #16]	; (8004204 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80041f4:	e7f9      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x42>
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	08006ab8 	.word	0x08006ab8
 80041fc:	08006ac9 	.word	0x08006ac9
 8004200:	40021000 	.word	0x40021000
 8004204:	007a1200 	.word	0x007a1200
 8004208:	003d0900 	.word	0x003d0900

0800420c <HAL_RCC_ClockConfig>:
{
 800420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800420e:	0004      	movs	r4, r0
 8004210:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004212:	2800      	cmp	r0, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004216:	2001      	movs	r0, #1
}
 8004218:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421a:	2201      	movs	r2, #1
 800421c:	4d37      	ldr	r5, [pc, #220]	; (80042fc <HAL_RCC_ClockConfig+0xf0>)
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	4013      	ands	r3, r2
 8004222:	428b      	cmp	r3, r1
 8004224:	d31c      	bcc.n	8004260 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004226:	6821      	ldr	r1, [r4, #0]
 8004228:	078b      	lsls	r3, r1, #30
 800422a:	d422      	bmi.n	8004272 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422c:	07cb      	lsls	r3, r1, #31
 800422e:	d42f      	bmi.n	8004290 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	2301      	movs	r3, #1
 8004232:	682a      	ldr	r2, [r5, #0]
 8004234:	401a      	ands	r2, r3
 8004236:	42b2      	cmp	r2, r6
 8004238:	d851      	bhi.n	80042de <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	4d30      	ldr	r5, [pc, #192]	; (8004300 <HAL_RCC_ClockConfig+0xf4>)
 800423e:	075b      	lsls	r3, r3, #29
 8004240:	d454      	bmi.n	80042ec <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004242:	f7ff ffb1 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004246:	686b      	ldr	r3, [r5, #4]
 8004248:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <HAL_RCC_ClockConfig+0xf8>)
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	0f1b      	lsrs	r3, r3, #28
 800424e:	5cd3      	ldrb	r3, [r2, r3]
 8004250:	40d8      	lsrs	r0, r3
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_ClockConfig+0xfc>)
 8004254:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004256:	2003      	movs	r0, #3
 8004258:	f7fe fd70 	bl	8002d3c <HAL_InitTick>
  return HAL_OK;
 800425c:	2000      	movs	r0, #0
 800425e:	e7db      	b.n	8004218 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	4393      	bics	r3, r2
 8004264:	430b      	orrs	r3, r1
 8004266:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	4013      	ands	r3, r2
 800426c:	428b      	cmp	r3, r1
 800426e:	d1d2      	bne.n	8004216 <HAL_RCC_ClockConfig+0xa>
 8004270:	e7d9      	b.n	8004226 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004272:	4a23      	ldr	r2, [pc, #140]	; (8004300 <HAL_RCC_ClockConfig+0xf4>)
 8004274:	074b      	lsls	r3, r1, #29
 8004276:	d504      	bpl.n	8004282 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004278:	23e0      	movs	r3, #224	; 0xe0
 800427a:	6850      	ldr	r0, [r2, #4]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4303      	orrs	r3, r0
 8004280:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004282:	20f0      	movs	r0, #240	; 0xf0
 8004284:	6853      	ldr	r3, [r2, #4]
 8004286:	4383      	bics	r3, r0
 8004288:	68a0      	ldr	r0, [r4, #8]
 800428a:	4303      	orrs	r3, r0
 800428c:	6053      	str	r3, [r2, #4]
 800428e:	e7cd      	b.n	800422c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004290:	4f1b      	ldr	r7, [pc, #108]	; (8004300 <HAL_RCC_ClockConfig+0xf4>)
 8004292:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004294:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	2a01      	cmp	r2, #1
 8004298:	d119      	bne.n	80042ce <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	039b      	lsls	r3, r3, #14
 800429c:	d5bb      	bpl.n	8004216 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429e:	2103      	movs	r1, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	438b      	bics	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 80042a8:	f7fe fd88 	bl	8002dbc <HAL_GetTick>
 80042ac:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	230c      	movs	r3, #12
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	401a      	ands	r2, r3
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0b9      	beq.n	8004230 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe fd7e 	bl	8002dbc <HAL_GetTick>
 80042c0:	9b01      	ldr	r3, [sp, #4]
 80042c2:	1ac0      	subs	r0, r0, r3
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_RCC_ClockConfig+0x100>)
 80042c6:	4298      	cmp	r0, r3
 80042c8:	d9f1      	bls.n	80042ae <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80042ca:	2003      	movs	r0, #3
 80042cc:	e7a4      	b.n	8004218 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ce:	2a02      	cmp	r2, #2
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	019b      	lsls	r3, r3, #6
 80042d4:	d4e3      	bmi.n	800429e <HAL_RCC_ClockConfig+0x92>
 80042d6:	e79e      	b.n	8004216 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	079b      	lsls	r3, r3, #30
 80042da:	d4e0      	bmi.n	800429e <HAL_RCC_ClockConfig+0x92>
 80042dc:	e79b      	b.n	8004216 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	682a      	ldr	r2, [r5, #0]
 80042e0:	439a      	bics	r2, r3
 80042e2:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e4:	682a      	ldr	r2, [r5, #0]
 80042e6:	421a      	tst	r2, r3
 80042e8:	d0a7      	beq.n	800423a <HAL_RCC_ClockConfig+0x2e>
 80042ea:	e794      	b.n	8004216 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	686b      	ldr	r3, [r5, #4]
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <HAL_RCC_ClockConfig+0x104>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	68e2      	ldr	r2, [r4, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	606b      	str	r3, [r5, #4]
 80042f8:	e7a3      	b.n	8004242 <HAL_RCC_ClockConfig+0x36>
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	40022000 	.word	0x40022000
 8004300:	40021000 	.word	0x40021000
 8004304:	08006aa0 	.word	0x08006aa0
 8004308:	20000060 	.word	0x20000060
 800430c:	00001388 	.word	0x00001388
 8004310:	fffff8ff 	.word	0xfffff8ff

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	055b      	lsls	r3, r3, #21
 800431c:	0f5b      	lsrs	r3, r3, #29
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004322:	6810      	ldr	r0, [r2, #0]
 8004324:	40d8      	lsrs	r0, r3
}    
 8004326:	4770      	bx	lr
 8004328:	40021000 	.word	0x40021000
 800432c:	08006ab0 	.word	0x08006ab0
 8004330:	20000060 	.word	0x20000060

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004336:	6803      	ldr	r3, [r0, #0]
{
 8004338:	0005      	movs	r5, r0
 800433a:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800433c:	03db      	lsls	r3, r3, #15
 800433e:	d52a      	bpl.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004340:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004342:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004344:	4c38      	ldr	r4, [pc, #224]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8004346:	0552      	lsls	r2, r2, #21
 8004348:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800434a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434c:	4213      	tst	r3, r2
 800434e:	d108      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	69e3      	ldr	r3, [r4, #28]
 8004352:	4313      	orrs	r3, r2
 8004354:	61e3      	str	r3, [r4, #28]
 8004356:	69e3      	ldr	r3, [r4, #28]
 8004358:	4013      	ands	r3, r2
 800435a:	9303      	str	r3, [sp, #12]
 800435c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	2780      	movs	r7, #128	; 0x80
 8004364:	4e31      	ldr	r6, [pc, #196]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004366:	007f      	lsls	r7, r7, #1
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	423b      	tst	r3, r7
 800436c:	d028      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436e:	6a22      	ldr	r2, [r4, #32]
 8004370:	23c0      	movs	r3, #192	; 0xc0
 8004372:	0011      	movs	r1, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4e2e      	ldr	r6, [pc, #184]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004378:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800437a:	421a      	tst	r2, r3
 800437c:	d132      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437e:	6a23      	ldr	r3, [r4, #32]
 8004380:	401e      	ands	r6, r3
 8004382:	686b      	ldr	r3, [r5, #4]
 8004384:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004386:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004388:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800438a:	2b01      	cmp	r3, #1
 800438c:	d103      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	69e3      	ldr	r3, [r4, #28]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004392:	4013      	ands	r3, r2
 8004394:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004396:	682a      	ldr	r2, [r5, #0]
 8004398:	07d3      	lsls	r3, r2, #31
 800439a:	d506      	bpl.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800439c:	2003      	movs	r0, #3
 800439e:	4922      	ldr	r1, [pc, #136]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80043a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80043a2:	4383      	bics	r3, r0
 80043a4:	68a8      	ldr	r0, [r5, #8]
 80043a6:	4303      	orrs	r3, r0
 80043a8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043aa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ac:	0693      	lsls	r3, r2, #26
 80043ae:	d517      	bpl.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b0:	2110      	movs	r1, #16
 80043b2:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80043b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80043b6:	438b      	bics	r3, r1
 80043b8:	68e9      	ldr	r1, [r5, #12]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	e00f      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	433b      	orrs	r3, r7
 80043c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043c6:	f7fe fcf9 	bl	8002dbc <HAL_GetTick>
 80043ca:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	6833      	ldr	r3, [r6, #0]
 80043ce:	423b      	tst	r3, r7
 80043d0:	d1cd      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fe fcf3 	bl	8002dbc <HAL_GetTick>
 80043d6:	9b01      	ldr	r3, [sp, #4]
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	2864      	cmp	r0, #100	; 0x64
 80043dc:	d9f6      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 80043de:	2003      	movs	r0, #3
}
 80043e0:	b005      	add	sp, #20
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e4:	686a      	ldr	r2, [r5, #4]
 80043e6:	4013      	ands	r3, r2
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d0c8      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ec:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ee:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f2:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	4303      	orrs	r3, r0
 80043f8:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	6a23      	ldr	r3, [r4, #32]
 80043fc:	480e      	ldr	r0, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fe:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004400:	4003      	ands	r3, r0
 8004402:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8004404:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004406:	07d3      	lsls	r3, r2, #31
 8004408:	d5b9      	bpl.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 800440a:	f7fe fcd7 	bl	8002dbc <HAL_GetTick>
 800440e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	2202      	movs	r2, #2
 8004412:	6a23      	ldr	r3, [r4, #32]
 8004414:	4213      	tst	r3, r2
 8004416:	d1b2      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fe fcd0 	bl	8002dbc <HAL_GetTick>
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800441e:	1bc0      	subs	r0, r0, r7
 8004420:	4298      	cmp	r0, r3
 8004422:	d9f5      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004424:	e7db      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
 8004430:	fffffcff 	.word	0xfffffcff
 8004434:	efffffff 	.word	0xefffffff
 8004438:	fffeffff 	.word	0xfffeffff
 800443c:	00001388 	.word	0x00001388

08004440 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	0002      	movs	r2, r0
{
 8004442:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8004444:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004446:	323d      	adds	r2, #61	; 0x3d
 8004448:	7811      	ldrb	r1, [r2, #0]
 800444a:	4281      	cmp	r1, r0
 800444c:	d119      	bne.n	8004482 <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444e:	2102      	movs	r1, #2
 8004450:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4302      	orrs	r2, r0
 8004458:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445a:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <HAL_TIM_Base_Start_IT+0x50>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d006      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x2e>
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	05d2      	lsls	r2, r2, #23
 8004464:	4293      	cmp	r3, r2
 8004466:	d002      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x2e>
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_TIM_Base_Start_IT+0x54>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10a      	bne.n	8004484 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446e:	2107      	movs	r1, #7
 8004470:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	2a06      	cmp	r2, #6
 8004478:	d003      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 800447a:	2201      	movs	r2, #1
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4310      	orrs	r0, r2
 8004488:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800448a:	2000      	movs	r0, #0
 800448c:	e7f9      	b.n	8004482 <HAL_TIM_Base_Start_IT+0x42>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40000400 	.word	0x40000400

08004498 <HAL_TIM_ReadCapturedValue>:
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
  uint32_t tmpreg = 0U;

  switch (Channel)
 8004498:	2908      	cmp	r1, #8
 800449a:	d011      	beq.n	80044c0 <HAL_TIM_ReadCapturedValue+0x28>
 800449c:	d805      	bhi.n	80044aa <HAL_TIM_ReadCapturedValue+0x12>
 800449e:	2900      	cmp	r1, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_TIM_ReadCapturedValue+0x1c>
 80044a2:	2904      	cmp	r1, #4
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_ReadCapturedValue+0x22>
 80044a6:	2000      	movs	r0, #0
    default:
      break;
  }

  return tmpreg;
}
 80044a8:	4770      	bx	lr
  switch (Channel)
 80044aa:	290c      	cmp	r1, #12
 80044ac:	d1fb      	bne.n	80044a6 <HAL_TIM_ReadCapturedValue+0xe>
      tmpreg =   htim->Instance->CCR4;
 80044ae:	6803      	ldr	r3, [r0, #0]
 80044b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
  return tmpreg;
 80044b2:	e7f9      	b.n	80044a8 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =  htim->Instance->CCR1;
 80044b4:	6803      	ldr	r3, [r0, #0]
 80044b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 80044b8:	e7f6      	b.n	80044a8 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =   htim->Instance->CCR2;
 80044ba:	6803      	ldr	r3, [r0, #0]
 80044bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 80044be:	e7f3      	b.n	80044a8 <HAL_TIM_ReadCapturedValue+0x10>
      tmpreg =   htim->Instance->CCR3;
 80044c0:	6803      	ldr	r3, [r0, #0]
 80044c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 80044c4:	e7f0      	b.n	80044a8 <HAL_TIM_ReadCapturedValue+0x10>

080044c6 <HAL_TIM_OC_DelayElapsedCallback>:
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_TriggerCallback>:
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044cc:	2202      	movs	r2, #2
 80044ce:	6803      	ldr	r3, [r0, #0]
{
 80044d0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d2:	6919      	ldr	r1, [r3, #16]
{
 80044d4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d6:	4211      	tst	r1, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	4211      	tst	r1, r2
 80044de:	d00b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e0:	3a05      	subs	r2, #5
 80044e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e4:	3204      	adds	r2, #4
 80044e6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	079b      	lsls	r3, r3, #30
 80044ec:	d100      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x24>
 80044ee:	e079      	b.n	80045e4 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80044f0:	f7fd fff8 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f4:	2300      	movs	r3, #0
 80044f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f8:	2204      	movs	r2, #4
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	4211      	tst	r1, r2
 8004500:	d010      	beq.n	8004524 <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	4211      	tst	r1, r2
 8004506:	d00d      	beq.n	8004524 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004508:	3a09      	subs	r2, #9
 800450a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800450c:	3207      	adds	r2, #7
 800450e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	23c0      	movs	r3, #192	; 0xc0
 8004514:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004518:	421a      	tst	r2, r3
 800451a:	d069      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	f7fd ffe2 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004520:	2300      	movs	r3, #0
 8004522:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004524:	2208      	movs	r2, #8
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	6919      	ldr	r1, [r3, #16]
 800452a:	4211      	tst	r1, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800452e:	68d9      	ldr	r1, [r3, #12]
 8004530:	4211      	tst	r1, r2
 8004532:	d00b      	beq.n	800454c <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004534:	3a11      	subs	r2, #17
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004538:	320d      	adds	r2, #13
 800453a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	079b      	lsls	r3, r3, #30
 8004542:	d05b      	beq.n	80045fc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004544:	f7fd ffce 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	2300      	movs	r3, #0
 800454a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454c:	2210      	movs	r2, #16
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	6919      	ldr	r1, [r3, #16]
 8004552:	4211      	tst	r1, r2
 8004554:	d010      	beq.n	8004578 <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004556:	68d9      	ldr	r1, [r3, #12]
 8004558:	4211      	tst	r1, r2
 800455a:	d00d      	beq.n	8004578 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800455c:	3a21      	subs	r2, #33	; 0x21
 800455e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004560:	3219      	adds	r2, #25
 8004562:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	23c0      	movs	r3, #192	; 0xc0
 8004568:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456c:	421a      	tst	r2, r3
 800456e:	d04b      	beq.n	8004608 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8004570:	f7fd ffb8 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	2300      	movs	r3, #0
 8004576:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004578:	2201      	movs	r2, #1
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	6919      	ldr	r1, [r3, #16]
 800457e:	4211      	tst	r1, r2
 8004580:	d007      	beq.n	8004592 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004582:	68d9      	ldr	r1, [r3, #12]
 8004584:	4211      	tst	r1, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800458c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800458e:	f7fe f917 	bl	80027c0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	6919      	ldr	r1, [r3, #16]
 8004598:	4211      	tst	r1, r2
 800459a:	d008      	beq.n	80045ae <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	4211      	tst	r1, r2
 80045a0:	d005      	beq.n	80045ae <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a2:	3a02      	subs	r2, #2
 80045a4:	3aff      	subs	r2, #255	; 0xff
      HAL_TIMEx_BreakCallback(htim);
 80045a6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	f000 fafa 	bl	8004ba2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ae:	2240      	movs	r2, #64	; 0x40
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	6919      	ldr	r1, [r3, #16]
 80045b4:	4211      	tst	r1, r2
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	4211      	tst	r1, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045be:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 80045c0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045c4:	f7ff ff81 	bl	80044ca <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c8:	2220      	movs	r2, #32
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	4211      	tst	r1, r2
 80045d0:	d007      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	4211      	tst	r1, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d8:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80045da:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80045de:	f000 fadf 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
}
 80045e2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e4:	f7ff ff6f 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	0020      	movs	r0, r4
 80045ea:	f7ff ff6d 	bl	80044c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80045ee:	e781      	b.n	80044f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f0:	f7ff ff69 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	0020      	movs	r0, r4
 80045f6:	f7ff ff67 	bl	80044c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80045fa:	e791      	b.n	8004520 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fc:	f7ff ff63 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	0020      	movs	r0, r4
 8004602:	f7ff ff61 	bl	80044c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004606:	e79f      	b.n	8004548 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004608:	f7ff ff5d 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	0020      	movs	r0, r4
 800460e:	f7ff ff5b 	bl	80044c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004612:	e7af      	b.n	8004574 <HAL_TIM_IRQHandler+0xa8>

08004614 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_Base_SetConfig+0x78>)
{
 8004616:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004618:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461a:	4290      	cmp	r0, r2
 800461c:	d006      	beq.n	800462c <TIM_Base_SetConfig+0x18>
 800461e:	2480      	movs	r4, #128	; 0x80
 8004620:	05e4      	lsls	r4, r4, #23
 8004622:	42a0      	cmp	r0, r4
 8004624:	d002      	beq.n	800462c <TIM_Base_SetConfig+0x18>
 8004626:	4c1a      	ldr	r4, [pc, #104]	; (8004690 <TIM_Base_SetConfig+0x7c>)
 8004628:	42a0      	cmp	r0, r4
 800462a:	d10c      	bne.n	8004646 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800462c:	2470      	movs	r4, #112	; 0x70
 800462e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004630:	684c      	ldr	r4, [r1, #4]
 8004632:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004634:	4290      	cmp	r0, r2
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x44>
 8004638:	2480      	movs	r4, #128	; 0x80
 800463a:	05e4      	lsls	r4, r4, #23
 800463c:	42a0      	cmp	r0, r4
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x44>
 8004640:	4c13      	ldr	r4, [pc, #76]	; (8004690 <TIM_Base_SetConfig+0x7c>)
 8004642:	42a0      	cmp	r0, r4
 8004644:	d008      	beq.n	8004658 <TIM_Base_SetConfig+0x44>
 8004646:	4c13      	ldr	r4, [pc, #76]	; (8004694 <TIM_Base_SetConfig+0x80>)
 8004648:	42a0      	cmp	r0, r4
 800464a:	d005      	beq.n	8004658 <TIM_Base_SetConfig+0x44>
 800464c:	4c12      	ldr	r4, [pc, #72]	; (8004698 <TIM_Base_SetConfig+0x84>)
 800464e:	42a0      	cmp	r0, r4
 8004650:	d002      	beq.n	8004658 <TIM_Base_SetConfig+0x44>
 8004652:	4c12      	ldr	r4, [pc, #72]	; (800469c <TIM_Base_SetConfig+0x88>)
 8004654:	42a0      	cmp	r0, r4
 8004656:	d103      	bne.n	8004660 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004658:	4c11      	ldr	r4, [pc, #68]	; (80046a0 <TIM_Base_SetConfig+0x8c>)
 800465a:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465c:	68cc      	ldr	r4, [r1, #12]
 800465e:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	2480      	movs	r4, #128	; 0x80
 8004662:	43a3      	bics	r3, r4
 8004664:	694c      	ldr	r4, [r1, #20]
 8004666:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8004668:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466a:	688b      	ldr	r3, [r1, #8]
 800466c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800466e:	680b      	ldr	r3, [r1, #0]
 8004670:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004672:	4290      	cmp	r0, r2
 8004674:	d005      	beq.n	8004682 <TIM_Base_SetConfig+0x6e>
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <TIM_Base_SetConfig+0x84>)
 8004678:	4298      	cmp	r0, r3
 800467a:	d002      	beq.n	8004682 <TIM_Base_SetConfig+0x6e>
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <TIM_Base_SetConfig+0x88>)
 800467e:	4298      	cmp	r0, r3
 8004680:	d101      	bne.n	8004686 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004686:	2301      	movs	r3, #1
 8004688:	6143      	str	r3, [r0, #20]
}
 800468a:	bd10      	pop	{r4, pc}
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40002000 	.word	0x40002000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800
 80046a0:	fffffcff 	.word	0xfffffcff

080046a4 <HAL_TIM_Base_Init>:
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80046a8:	2001      	movs	r0, #1
  if (htim == NULL)
 80046aa:	2c00      	cmp	r4, #0
 80046ac:	d021      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	0025      	movs	r5, r4
 80046b0:	353d      	adds	r5, #61	; 0x3d
 80046b2:	782b      	ldrb	r3, [r5, #0]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80046ba:	0023      	movs	r3, r4
 80046bc:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80046be:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80046c0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80046c2:	f7fe fabf 	bl	8002c44 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	1d21      	adds	r1, r4, #4
 80046ce:	f7ff ffa1 	bl	8004614 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d2:	0022      	movs	r2, r4
 80046d4:	2301      	movs	r3, #1
  return HAL_OK;
 80046d6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	3246      	adds	r2, #70	; 0x46
 80046da:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	3a08      	subs	r2, #8
 80046e0:	7013      	strb	r3, [r2, #0]
 80046e2:	7053      	strb	r3, [r2, #1]
 80046e4:	7093      	strb	r3, [r2, #2]
 80046e6:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	7113      	strb	r3, [r2, #4]
 80046ea:	7153      	strb	r3, [r2, #5]
 80046ec:	7193      	strb	r3, [r2, #6]
 80046ee:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	702b      	strb	r3, [r5, #0]
}
 80046f2:	bd70      	pop	{r4, r5, r6, pc}

080046f4 <HAL_TIM_IC_Init>:
{
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
  if (htim == NULL)
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	d021      	beq.n	8004742 <HAL_TIM_IC_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	0025      	movs	r5, r4
 8004700:	353d      	adds	r5, #61	; 0x3d
 8004702:	782b      	ldrb	r3, [r5, #0]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800470a:	0023      	movs	r3, r4
 800470c:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800470e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004710:	701a      	strb	r2, [r3, #0]
    HAL_TIM_IC_MspInit(htim);
 8004712:	f7fe fab1 	bl	8002c78 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1d21      	adds	r1, r4, #4
 800471e:	f7ff ff79 	bl	8004614 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004722:	0022      	movs	r2, r4
 8004724:	2301      	movs	r3, #1
  return HAL_OK;
 8004726:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	3246      	adds	r2, #70	; 0x46
 800472a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	3a08      	subs	r2, #8
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	7053      	strb	r3, [r2, #1]
 8004734:	7093      	strb	r3, [r2, #2]
 8004736:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	7113      	strb	r3, [r2, #4]
 800473a:	7153      	strb	r3, [r2, #5]
 800473c:	7193      	strb	r3, [r2, #6]
 800473e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004740:	702b      	strb	r3, [r5, #0]
}
 8004742:	bd70      	pop	{r4, r5, r6, pc}

08004744 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	2601      	movs	r6, #1
 8004748:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800474a:	4f10      	ldr	r7, [pc, #64]	; (800478c <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474c:	43b4      	bics	r4, r6
 800474e:	6204      	str	r4, [r0, #32]
{
 8004750:	0015      	movs	r5, r2
  tmpccmr1 = TIMx->CCMR1;
 8004752:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004754:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004756:	42b8      	cmp	r0, r7
 8004758:	d014      	beq.n	8004784 <TIM_TI1_SetConfig+0x40>
 800475a:	2780      	movs	r7, #128	; 0x80
 800475c:	05ff      	lsls	r7, r7, #23
 800475e:	42b8      	cmp	r0, r7
 8004760:	d010      	beq.n	8004784 <TIM_TI1_SetConfig+0x40>
 8004762:	4f0b      	ldr	r7, [pc, #44]	; (8004790 <TIM_TI1_SetConfig+0x4c>)
 8004764:	42b8      	cmp	r0, r7
 8004766:	d00d      	beq.n	8004784 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004768:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476a:	25f0      	movs	r5, #240	; 0xf0
 800476c:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	350f      	adds	r5, #15
 8004772:	402b      	ands	r3, r5
 8004774:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	230a      	movs	r3, #10
 8004778:	439c      	bics	r4, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800477a:	4019      	ands	r1, r3
 800477c:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004780:	6201      	str	r1, [r0, #32]
}
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004784:	2603      	movs	r6, #3
 8004786:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 8004788:	432a      	orrs	r2, r5
 800478a:	e7ee      	b.n	800476a <TIM_TI1_SetConfig+0x26>
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40000400 	.word	0x40000400

08004794 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004794:	0003      	movs	r3, r0
{
 8004796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004798:	333c      	adds	r3, #60	; 0x3c
{
 800479a:	9001      	str	r0, [sp, #4]
 800479c:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800479e:	781a      	ldrb	r2, [r3, #0]
{
 80047a0:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80047a2:	2002      	movs	r0, #2
 80047a4:	2a01      	cmp	r2, #1
 80047a6:	d019      	beq.n	80047dc <HAL_TIM_IC_ConfigChannel+0x48>
 80047a8:	3801      	subs	r0, #1
 80047aa:	7018      	strb	r0, [r3, #0]
  if (Channel == TIM_CHANNEL_1)
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	d116      	bne.n	80047de <HAL_TIM_IC_ConfigChannel+0x4a>
    TIM_TI1_SetConfig(htim->Instance,
 80047b0:	9801      	ldr	r0, [sp, #4]
 80047b2:	68cb      	ldr	r3, [r1, #12]
 80047b4:	684a      	ldr	r2, [r1, #4]
 80047b6:	6800      	ldr	r0, [r0, #0]
 80047b8:	6809      	ldr	r1, [r1, #0]
 80047ba:	f7ff ffc3 	bl	8004744 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047be:	210c      	movs	r1, #12
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	438a      	bics	r2, r1
 80047c8:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047ce:	430a      	orrs	r2, r1
 80047d0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80047d4:	2300      	movs	r3, #0
 80047d6:	9d01      	ldr	r5, [sp, #4]
 80047d8:	353c      	adds	r5, #60	; 0x3c
 80047da:	702b      	strb	r3, [r5, #0]
}
 80047dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80047de:	2e04      	cmp	r6, #4
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e2:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	6809      	ldr	r1, [r1, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6862      	ldr	r2, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ec:	6a18      	ldr	r0, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80047ee:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f0:	43b8      	bics	r0, r7
 80047f2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f4:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047f6:	4d34      	ldr	r5, [pc, #208]	; (80048c8 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047f8:	0736      	lsls	r6, r6, #28
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047fa:	4005      	ands	r5, r0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047fc:	0210      	lsls	r0, r2, #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047fe:	4a33      	ldr	r2, [pc, #204]	; (80048cc <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004800:	4328      	orrs	r0, r5
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004802:	4010      	ands	r0, r2
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004804:	0c36      	lsrs	r6, r6, #16
 8004806:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004808:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800480a:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800480c:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480e:	43b7      	bics	r7, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004810:	4032      	ands	r2, r6
 8004812:	433a      	orrs	r2, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004814:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8004816:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <HAL_TIM_IC_ConfigChannel+0x13c>)
 800481c:	400a      	ands	r2, r1
 800481e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004820:	68a2      	ldr	r2, [r4, #8]
 8004822:	6999      	ldr	r1, [r3, #24]
 8004824:	0212      	lsls	r2, r2, #8
 8004826:	e7d2      	b.n	80047ce <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8004828:	2e08      	cmp	r6, #8
 800482a:	d125      	bne.n	8004878 <HAL_TIM_IC_ConfigChannel+0xe4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800482c:	2503      	movs	r5, #3
    TIM_TI3_SetConfig(htim->Instance,
 800482e:	9b01      	ldr	r3, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004830:	4f28      	ldr	r7, [pc, #160]	; (80048d4 <HAL_TIM_IC_ConfigChannel+0x140>)
    TIM_TI3_SetConfig(htim->Instance,
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6809      	ldr	r1, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004836:	6a1a      	ldr	r2, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8004838:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800483a:	403a      	ands	r2, r7
    TIM_TI3_SetConfig(htim->Instance,
 800483c:	68e0      	ldr	r0, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800483e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004840:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004842:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004844:	43af      	bics	r7, r5
  tmpccmr2 |= TIM_ICSelection;
 8004846:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004848:	27f0      	movs	r7, #240	; 0xf0
 800484a:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800484c:	370f      	adds	r7, #15
 800484e:	4038      	ands	r0, r7
  tmpccer = TIMx->CCER;
 8004850:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004852:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004854:	4e20      	ldr	r6, [pc, #128]	; (80048d8 <HAL_TIM_IC_ConfigChannel+0x144>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004856:	61d8      	str	r0, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004858:	4016      	ands	r6, r2
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800485a:	020a      	lsls	r2, r1, #8
 800485c:	21a0      	movs	r1, #160	; 0xa0
 800485e:	0109      	lsls	r1, r1, #4
 8004860:	400a      	ands	r2, r1
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004862:	210c      	movs	r1, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004864:	4332      	orrs	r2, r6
  TIMx->CCER = tmpccer;
 8004866:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	438a      	bics	r2, r1
 800486c:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004872:	430a      	orrs	r2, r1
 8004874:	61da      	str	r2, [r3, #28]
 8004876:	e7ac      	b.n	80047d2 <HAL_TIM_IC_ConfigChannel+0x3e>
  else if (Channel == TIM_CHANNEL_4)
 8004878:	2e0c      	cmp	r6, #12
 800487a:	d1ab      	bne.n	80047d4 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI4_SetConfig(htim->Instance,
 800487c:	9b01      	ldr	r3, [sp, #4]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487e:	4817      	ldr	r0, [pc, #92]	; (80048dc <HAL_TIM_IC_ConfigChannel+0x148>)
    TIM_TI4_SetConfig(htim->Instance,
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6809      	ldr	r1, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004884:	6a1a      	ldr	r2, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8004886:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004888:	4002      	ands	r2, r0
    TIM_TI4_SetConfig(htim->Instance,
 800488a:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800488e:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004890:	4d0d      	ldr	r5, [pc, #52]	; (80048c8 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004892:	0736      	lsls	r6, r6, #28
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004894:	4005      	ands	r5, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004896:	0238      	lsls	r0, r7, #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004898:	4f0c      	ldr	r7, [pc, #48]	; (80048cc <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800489a:	4328      	orrs	r0, r5
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800489c:	0c36      	lsrs	r6, r6, #16
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800489e:	4038      	ands	r0, r7
  tmpccer = TIMx->CCER;
 80048a0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048a2:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048a4:	4e0e      	ldr	r6, [pc, #56]	; (80048e0 <HAL_TIM_IC_ConfigChannel+0x14c>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048a6:	61d8      	str	r0, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048a8:	4016      	ands	r6, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048aa:	030a      	lsls	r2, r1, #12
 80048ac:	21a0      	movs	r1, #160	; 0xa0
 80048ae:	0209      	lsls	r1, r1, #8
 80048b0:	400a      	ands	r2, r1
 80048b2:	4332      	orrs	r2, r6
  TIMx->CCER = tmpccer ;
 80048b4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	4905      	ldr	r1, [pc, #20]	; (80048d0 <HAL_TIM_IC_ConfigChannel+0x13c>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048be:	68a2      	ldr	r2, [r4, #8]
 80048c0:	69d9      	ldr	r1, [r3, #28]
 80048c2:	0212      	lsls	r2, r2, #8
 80048c4:	e7d5      	b.n	8004872 <HAL_TIM_IC_ConfigChannel+0xde>
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	fffffcff 	.word	0xfffffcff
 80048cc:	ffff0fff 	.word	0xffff0fff
 80048d0:	fffff3ff 	.word	0xfffff3ff
 80048d4:	fffffeff 	.word	0xfffffeff
 80048d8:	fffff5ff 	.word	0xfffff5ff
 80048dc:	ffffefff 	.word	0xffffefff
 80048e0:	ffff5fff 	.word	0xffff5fff

080048e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	4d03      	ldr	r5, [pc, #12]	; (80048f8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ea:	430a      	orrs	r2, r1
 80048ec:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ee:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	4313      	orrs	r3, r2
 80048f2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f4:	6083      	str	r3, [r0, #8]
}
 80048f6:	bd30      	pop	{r4, r5, pc}
 80048f8:	ffff00ff 	.word	0xffff00ff

080048fc <HAL_TIM_ConfigClockSource>:
{
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80048fe:	0005      	movs	r5, r0
 8004900:	2302      	movs	r3, #2
 8004902:	353c      	adds	r5, #60	; 0x3c
{
 8004904:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004906:	7828      	ldrb	r0, [r5, #0]
 8004908:	001a      	movs	r2, r3
 800490a:	2801      	cmp	r0, #1
 800490c:	d01d      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800490e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8004910:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004912:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8004914:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004916:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004918:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491a:	4a49      	ldr	r2, [pc, #292]	; (8004a40 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 800491c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004920:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004922:	680b      	ldr	r3, [r1, #0]
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d059      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0xe0>
 8004928:	d835      	bhi.n	8004996 <HAL_TIM_ConfigClockSource+0x9a>
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d100      	bne.n	8004930 <HAL_TIM_ConfigClockSource+0x34>
 800492e:	e06e      	b.n	8004a0e <HAL_TIM_ConfigClockSource+0x112>
 8004930:	d815      	bhi.n	800495e <HAL_TIM_ConfigClockSource+0x62>
 8004932:	2b20      	cmp	r3, #32
 8004934:	d00d      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x56>
 8004936:	d80a      	bhi.n	800494e <HAL_TIM_ConfigClockSource+0x52>
 8004938:	2210      	movs	r2, #16
 800493a:	0019      	movs	r1, r3
 800493c:	4391      	bics	r1, r2
 800493e:	d008      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x56>
 8004940:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 8004942:	2301      	movs	r3, #1
 8004944:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004946:	2300      	movs	r3, #0
 8004948:	702b      	strb	r3, [r5, #0]
}
 800494a:	0010      	movs	r0, r2
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d1f6      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004952:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004954:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004956:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004958:	4313      	orrs	r3, r2
 800495a:	2207      	movs	r2, #7
 800495c:	e018      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x94>
  switch (sClockSourceConfig->ClockSource)
 800495e:	2b50      	cmp	r3, #80	; 0x50
 8004960:	d1ee      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	68ca      	ldr	r2, [r1, #12]
 8004964:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8004966:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004968:	6a03      	ldr	r3, [r0, #32]
 800496a:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004970:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004972:	43bb      	bics	r3, r7
 8004974:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004976:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004978:	220a      	movs	r2, #10
 800497a:	4391      	bics	r1, r2
 800497c:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497e:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8004980:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8004982:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004984:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004986:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004988:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800498a:	4393      	bics	r3, r2
 800498c:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800498e:	2357      	movs	r3, #87	; 0x57
 8004990:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8004992:	6083      	str	r3, [r0, #8]
 8004994:	e016      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8004996:	2280      	movs	r2, #128	; 0x80
 8004998:	0152      	lsls	r2, r2, #5
 800499a:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 800499e:	4563      	cmp	r3, ip
 80049a0:	d0cf      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x46>
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	0192      	lsls	r2, r2, #6
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xcc>
 80049aa:	003a      	movs	r2, r7
 80049ac:	2b70      	cmp	r3, #112	; 0x70
 80049ae:	d1c8      	bne.n	8004942 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	68cb      	ldr	r3, [r1, #12]
 80049b2:	684a      	ldr	r2, [r1, #4]
 80049b4:	6889      	ldr	r1, [r1, #8]
 80049b6:	f7ff ff95 	bl	80048e4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ba:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2200      	movs	r2, #0
}
 80049c6:	e7bc      	b.n	8004942 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	68cb      	ldr	r3, [r1, #12]
 80049ca:	684a      	ldr	r2, [r1, #4]
 80049cc:	6889      	ldr	r1, [r1, #8]
 80049ce:	f7ff ff89 	bl	80048e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	6891      	ldr	r1, [r2, #8]
 80049da:	e7f1      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049dc:	684a      	ldr	r2, [r1, #4]
 80049de:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	2110      	movs	r1, #16
 80049e2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e4:	4c17      	ldr	r4, [pc, #92]	; (8004a44 <HAL_TIM_ConfigClockSource+0x148>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	438b      	bics	r3, r1
 80049e8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ea:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80049ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ee:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f0:	24a0      	movs	r4, #160	; 0xa0
 80049f2:	43a3      	bics	r3, r4
 80049f4:	001c      	movs	r4, r3
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f6:	0113      	lsls	r3, r2, #4
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f8:	2270      	movs	r2, #112	; 0x70
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fa:	033f      	lsls	r7, r7, #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fc:	4323      	orrs	r3, r4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fe:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8004a00:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a02:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004a04:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a06:	4393      	bics	r3, r2
 8004a08:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0a:	2367      	movs	r3, #103	; 0x67
 8004a0c:	e7c0      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x94>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	68ca      	ldr	r2, [r1, #12]
 8004a10:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8004a12:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a14:	6a03      	ldr	r3, [r0, #32]
 8004a16:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a18:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a1e:	43bb      	bics	r3, r7
 8004a20:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a22:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a24:	220a      	movs	r2, #10
 8004a26:	4391      	bics	r1, r2
 8004a28:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a2a:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8004a2c:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a30:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a32:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004a34:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a36:	4393      	bics	r3, r2
 8004a38:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a3a:	2347      	movs	r3, #71	; 0x47
 8004a3c:	e7a8      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x94>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	ffff0088 	.word	0xffff0088
 8004a44:	ffff0fff 	.word	0xffff0fff

08004a48 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a48:	231f      	movs	r3, #31
{
 8004a4a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4c:	2401      	movs	r4, #1
 8004a4e:	4019      	ands	r1, r3
 8004a50:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a52:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004a54:	6a03      	ldr	r3, [r0, #32]
 8004a56:	43a3      	bics	r3, r4
 8004a58:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a5a:	6a03      	ldr	r3, [r0, #32]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	6202      	str	r2, [r0, #32]
}
 8004a60:	bd10      	pop	{r4, pc}
	...

08004a64 <HAL_TIM_IC_Start_IT>:
{
 8004a64:	b510      	push	{r4, lr}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a66:	0003      	movs	r3, r0
{
 8004a68:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	d12f      	bne.n	8004ace <HAL_TIM_IC_Start_IT+0x6a>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a6e:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a70:	333e      	adds	r3, #62	; 0x3e
 8004a72:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a74:	3242      	adds	r2, #66	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a76:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a78:	7810      	ldrb	r0, [r2, #0]
 8004a7a:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d15a      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0xd2>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a80:	2801      	cmp	r0, #1
 8004a82:	d15a      	bne.n	8004b3a <HAL_TIM_IC_Start_IT+0xd6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a84:	0022      	movs	r2, r4
 8004a86:	3301      	adds	r3, #1
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d136      	bne.n	8004afa <HAL_TIM_IC_Start_IT+0x96>
 8004a8c:	323e      	adds	r2, #62	; 0x3e
 8004a8e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a90:	7113      	strb	r3, [r2, #4]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	68c2      	ldr	r2, [r0, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60c3      	str	r3, [r0, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	f7ff ffd3 	bl	8004a48 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_TIM_IC_Start_IT+0xdc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d006      	beq.n	8004ab8 <HAL_TIM_IC_Start_IT+0x54>
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	05d2      	lsls	r2, r2, #23
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d002      	beq.n	8004ab8 <HAL_TIM_IC_Start_IT+0x54>
 8004ab2:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <HAL_TIM_IC_Start_IT+0xe0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d138      	bne.n	8004b2a <HAL_TIM_IC_Start_IT+0xc6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab8:	2107      	movs	r1, #7
 8004aba:	689a      	ldr	r2, [r3, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abe:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	2a06      	cmp	r2, #6
 8004ac2:	d003      	beq.n	8004acc <HAL_TIM_IC_Start_IT+0x68>
        __HAL_TIM_ENABLE(htim);
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bd10      	pop	{r4, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ace:	2904      	cmp	r1, #4
 8004ad0:	d105      	bne.n	8004ade <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ad2:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ad4:	333f      	adds	r3, #63	; 0x3f
 8004ad6:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ad8:	3243      	adds	r2, #67	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ada:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004adc:	e7cc      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x14>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ade:	2908      	cmp	r1, #8
 8004ae0:	d105      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0x8a>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ae2:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ae4:	3340      	adds	r3, #64	; 0x40
 8004ae6:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ae8:	3244      	adds	r2, #68	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aea:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004aec:	e7c4      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x14>
 8004aee:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004af0:	3341      	adds	r3, #65	; 0x41
 8004af2:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004af4:	3245      	adds	r2, #69	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004af6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004af8:	e7be      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	2904      	cmp	r1, #4
 8004afc:	d107      	bne.n	8004b0e <HAL_TIM_IC_Start_IT+0xaa>
 8004afe:	323f      	adds	r2, #63	; 0x3f
 8004b00:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	7113      	strb	r3, [r2, #4]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	68d3      	ldr	r3, [r2, #12]
 8004b08:	430b      	orrs	r3, r1
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b0a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004b0c:	e7c5      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0e:	2908      	cmp	r1, #8
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_IC_Start_IT+0xb2>
 8004b12:	3240      	adds	r2, #64	; 0x40
 8004b14:	e7f4      	b.n	8004b00 <HAL_TIM_IC_Start_IT+0x9c>
 8004b16:	3241      	adds	r2, #65	; 0x41
 8004b18:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	7113      	strb	r3, [r2, #4]
  switch (Channel)
 8004b1c:	290c      	cmp	r1, #12
 8004b1e:	d1d5      	bne.n	8004acc <HAL_TIM_IC_Start_IT+0x68>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b20:	2310      	movs	r3, #16
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	68d0      	ldr	r0, [r2, #12]
 8004b26:	4303      	orrs	r3, r0
 8004b28:	e7ef      	b.n	8004b0a <HAL_TIM_IC_Start_IT+0xa6>
      __HAL_TIM_ENABLE(htim);
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	2000      	movs	r0, #0
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e7ca      	b.n	8004acc <HAL_TIM_IC_Start_IT+0x68>
    return HAL_ERROR;
 8004b36:	2001      	movs	r0, #1
 8004b38:	e7c8      	b.n	8004acc <HAL_TIM_IC_Start_IT+0x68>
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	e7c6      	b.n	8004acc <HAL_TIM_IC_Start_IT+0x68>
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400

08004b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b48:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4a:	0004      	movs	r4, r0
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	343c      	adds	r4, #60	; 0x3c
 8004b50:	7825      	ldrb	r5, [r4, #0]
{
 8004b52:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004b54:	0010      	movs	r0, r2
 8004b56:	2d01      	cmp	r5, #1
 8004b58:	d01d      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5c:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	353d      	adds	r5, #61	; 0x3d
 8004b60:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004b66:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b68:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	4809      	ldr	r0, [pc, #36]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004b72:	4283      	cmp	r3, r0
 8004b74:	d006      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004b76:	2080      	movs	r0, #128	; 0x80
 8004b78:	05c0      	lsls	r0, r0, #23
 8004b7a:	4283      	cmp	r3, r0
 8004b7c:	d002      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004b7e:	4807      	ldr	r0, [pc, #28]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004b80:	4283      	cmp	r3, r0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b84:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b86:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b88:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004b90:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b92:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004b94:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400

08004ba0 <HAL_TIMEx_CommutCallback>:
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIMEx_BreakCallback>:
 8004ba2:	4770      	bx	lr

08004ba4 <Inicia_display>:
		0x70  // ▐█··
};

//--FUNÇÃO DE INICIALIZAÇÃO DE DISPLAY ------------------------
uint8_t Inicia_display(void)//INICIALIZACAO DO DISPLAY OLED
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}
	uint8_t retorno;
	retorno = u8g_InitComFn(&u8g, &u8g_dev_ssd1306_128x64_i2c, u8g_com_arm_stm32_ssd_i2c_fn); //INICIA O DISPLAY EM I2C
 8004ba6:	4c0c      	ldr	r4, [pc, #48]	; (8004bd8 <Inicia_display+0x34>)
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <Inicia_display+0x38>)
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <Inicia_display+0x3c>)
 8004bac:	0020      	movs	r0, r4
 8004bae:	f000 ff3d 	bl	8005a2c <u8g_InitComFn>
 8004bb2:	0005      	movs	r5, r0
	HAL_Delay(50);
 8004bb4:	2032      	movs	r0, #50	; 0x32
 8004bb6:	f7fe f907 	bl	8002dc8 <HAL_Delay>
	u8g_SetRot180(&u8g);					//INVERTE 180
 8004bba:	0020      	movs	r0, r4
 8004bbc:	f001 fa16 	bl	8005fec <u8g_SetRot180>
	u8g_DisableCursor(&u8g);           		//DESABILITA O CURSOR
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	f000 fc77 	bl	80054b4 <u8g_DisableCursor>
	u8g_SetColorIndex(&u8g,1);				//SETA O PIXEL COMO POSITIVO
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	0020      	movs	r0, r4
 8004bca:	f000 ff78 	bl	8005abe <u8g_SetColorIndex>
	u8g_SetDefaultForegroundColor(&u8g);	//FUNDO PRETO   -   LETRA BRANCA
 8004bce:	0020      	movs	r0, r4
 8004bd0:	f000 ff81 	bl	8005ad6 <u8g_SetDefaultForegroundColor>

	return retorno;
}//																																																											//
 8004bd4:	0028      	movs	r0, r5
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	20000340 	.word	0x20000340
 8004bdc:	0800514d 	.word	0x0800514d
 8004be0:	2000006c 	.word	0x2000006c

08004be4 <Menu_bolas_display>:
	Menu_bolas_display(4, 4);
}

//---------- FUNÇÃO IMPRESSÃO INDICAÇÃO MENU ---------------------------
void Menu_bolas_display(uint8_t quantidade, uint8_t indice)
{
 8004be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be6:	0005      	movs	r5, r0
 8004be8:	000e      	movs	r6, r1

#define ALTURA_BOLA_INDICACAO 56
#define LARGURA_BOLA_INDICACAO 45
	for (int i = 1; i <= quantidade; ++i) {
 8004bea:	2401      	movs	r4, #1
 8004bec:	2705      	movs	r7, #5
 8004bee:	42a5      	cmp	r5, r4
 8004bf0:	da00      	bge.n	8004bf4 <Menu_bolas_display+0x10>
		if(i != indice)
			u8g_DrawBitmap(&u8g,LARGURA_BOLA_INDICACAO+8*(i-1),ALTURA_BOLA_INDICACAO,1,MENU_BMPWIDTH,Menu_vazio);
		else
			u8g_DrawBitmap(&u8g,LARGURA_BOLA_INDICACAO+8*(i-1),ALTURA_BOLA_INDICACAO,1,MENU_BMPWIDTH,Menu_cheio);
	}
}
 8004bf2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if(i != indice)
 8004bf4:	00e1      	lsls	r1, r4, #3
 8004bf6:	3125      	adds	r1, #37	; 0x25
 8004bf8:	4806      	ldr	r0, [pc, #24]	; (8004c14 <Menu_bolas_display+0x30>)
			u8g_DrawBitmap(&u8g,LARGURA_BOLA_INDICACAO+8*(i-1),ALTURA_BOLA_INDICACAO,1,MENU_BMPWIDTH,Menu_vazio);
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <Menu_bolas_display+0x34>)
 8004bfc:	b2c9      	uxtb	r1, r1
		if(i != indice)
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d100      	bne.n	8004c04 <Menu_bolas_display+0x20>
			u8g_DrawBitmap(&u8g,LARGURA_BOLA_INDICACAO+8*(i-1),ALTURA_BOLA_INDICACAO,1,MENU_BMPWIDTH,Menu_cheio);
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <Menu_bolas_display+0x38>)
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	2238      	movs	r2, #56	; 0x38
 8004c08:	2301      	movs	r3, #1
 8004c0a:	9700      	str	r7, [sp, #0]
 8004c0c:	f000 faff 	bl	800520e <u8g_DrawBitmap>
	for (int i = 1; i <= quantidade; ++i) {
 8004c10:	3401      	adds	r4, #1
 8004c12:	e7ec      	b.n	8004bee <Menu_bolas_display+0xa>
 8004c14:	20000340 	.word	0x20000340
 8004c18:	08006ba0 	.word	0x08006ba0
 8004c1c:	08006b9b 	.word	0x08006b9b

08004c20 <u8g_My_SetaFonte>:

//--SETA FONTE ------------------------------------------
void u8g_My_SetaFonte(const u8g_fntpgm_uint8_t  *font)
{
 8004c20:	b510      	push	{r4, lr}
	u8g_SetFont(&u8g, font);
 8004c22:	4c06      	ldr	r4, [pc, #24]	; (8004c3c <u8g_My_SetaFonte+0x1c>)
{
 8004c24:	0001      	movs	r1, r0
	u8g_SetFont(&u8g, font);
 8004c26:	0020      	movs	r0, r4
 8004c28:	f000 fdf6 	bl	8005818 <u8g_SetFont>
	u8g_SetFontRefHeightText(&u8g);
 8004c2c:	0020      	movs	r0, r4
 8004c2e:	f000 fdde 	bl	80057ee <u8g_SetFontRefHeightText>
	u8g_SetFontPosTop(&u8g);
 8004c32:	0020      	movs	r0, r4
 8004c34:	f000 fdea 	bl	800580c <u8g_SetFontPosTop>
}//
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	20000340 	.word	0x20000340

08004c40 <Draw_principal>:
{
 8004c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c42:	0005      	movs	r5, r0
	u8g_My_SetaFonte(u8g_font_8x13B);	//FUNCAO PARA DEFINI��O DE FONTE
 8004c44:	4855      	ldr	r0, [pc, #340]	; (8004d9c <Draw_principal+0x15c>)
 8004c46:	f7ff ffeb 	bl	8004c20 <u8g_My_SetaFonte>
	u8g_SetDefaultForegroundColor(&u8g);
 8004c4a:	4c55      	ldr	r4, [pc, #340]	; (8004da0 <Draw_principal+0x160>)
	u8g_DrawLine(&u8g,64, 0, 64, 32);	//LINHA VERTICAL MEIO SUPERIOR
 8004c4c:	2620      	movs	r6, #32
	u8g_SetDefaultForegroundColor(&u8g);
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f000 ff41 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	Hect = carro->Delta_Area / 10000;
 8004c54:	4953      	ldr	r1, [pc, #332]	; (8004da4 <Draw_principal+0x164>)
 8004c56:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004c58:	f7fb fddc 	bl	8000814 <__aeabi_fdiv>
 8004c5c:	f7fc fa76 	bl	800114c <__aeabi_f2iz>
	u8g_DrawLine(&u8g,64, 0, 64, 32);	//LINHA VERTICAL MEIO SUPERIOR
 8004c60:	2340      	movs	r3, #64	; 0x40
	Hect = carro->Delta_Area / 10000;
 8004c62:	4f51      	ldr	r7, [pc, #324]	; (8004da8 <Draw_principal+0x168>)
	u8g_DrawLine(&u8g,64, 0, 64, 32);	//LINHA VERTICAL MEIO SUPERIOR
 8004c64:	0019      	movs	r1, r3
	Hect = carro->Delta_Area / 10000;
 8004c66:	6038      	str	r0, [r7, #0]
	u8g_DrawLine(&u8g,64, 0, 64, 32);	//LINHA VERTICAL MEIO SUPERIOR
 8004c68:	2200      	movs	r2, #0
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	9600      	str	r6, [sp, #0]
 8004c6e:	f000 fde1 	bl	8005834 <u8g_DrawLine>
	u8g_DrawLine(&u8g,42, 32, 42, 64);	//LINHA VERTICAL INFERIOR ESQ
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	3b16      	subs	r3, #22
 8004c78:	0032      	movs	r2, r6
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	0020      	movs	r0, r4
 8004c7e:	f000 fdd9 	bl	8005834 <u8g_DrawLine>
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004c82:	2200      	movs	r2, #0
 8004c84:	230d      	movs	r3, #13
 8004c86:	0011      	movs	r1, r2
 8004c88:	0020      	movs	r0, r4
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	3372      	adds	r3, #114	; 0x72
 8004c8e:	f001 f895 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawBox(&u8g, 0, 32, 127, 13);  //BACKGROUND LINHA 2
 8004c92:	230d      	movs	r3, #13
 8004c94:	0032      	movs	r2, r6
 8004c96:	2100      	movs	r1, #0
 8004c98:	0020      	movs	r0, r4
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	3372      	adds	r3, #114	; 0x72
 8004c9e:	f001 f88d 	bl	8005dbc <u8g_DrawBox>
	sprintf(Buff_Display,"%2.1d,",(int)(carro->Delta_Area)/10000);
 8004ca2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004ca4:	f7fc fa52 	bl	800114c <__aeabi_f2iz>
 8004ca8:	4940      	ldr	r1, [pc, #256]	; (8004dac <Draw_principal+0x16c>)
 8004caa:	f7fb facb 	bl	8000244 <__divsi3>
 8004cae:	4e40      	ldr	r6, [pc, #256]	; (8004db0 <Draw_principal+0x170>)
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	4940      	ldr	r1, [pc, #256]	; (8004db4 <Draw_principal+0x174>)
 8004cb4:	0030      	movs	r0, r6
 8004cb6:	f001 f9e7 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 0, 16, Buff_Display);
 8004cba:	2210      	movs	r2, #16
 8004cbc:	0033      	movs	r3, r6
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	0020      	movs	r0, r4
 8004cc2:	f000 fd4d 	bl	8005760 <u8g_DrawStr>
	sprintf(Buff_Display,"%4.4d",(int)carro->Delta_Area % ((int)Hect*10000));
 8004cc6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004cc8:	f7fc fa40 	bl	800114c <__aeabi_f2iz>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4937      	ldr	r1, [pc, #220]	; (8004dac <Draw_principal+0x16c>)
 8004cd0:	4359      	muls	r1, r3
 8004cd2:	f7fb fb9d 	bl	8000410 <__aeabi_idivmod>
 8004cd6:	0030      	movs	r0, r6
 8004cd8:	000a      	movs	r2, r1
 8004cda:	4937      	ldr	r1, [pc, #220]	; (8004db8 <Draw_principal+0x178>)
 8004cdc:	f001 f9d4 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 26, 16, Buff_Display);
 8004ce0:	0033      	movs	r3, r6
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	211a      	movs	r1, #26
 8004ce6:	0020      	movs	r0, r4
 8004ce8:	f000 fd3a 	bl	8005760 <u8g_DrawStr>
	sprintf(Buff_Display,"%3.0dkm/h",(int)carro->Velocidade_kmh);
 8004cec:	6a28      	ldr	r0, [r5, #32]
 8004cee:	f7fc fa2d 	bl	800114c <__aeabi_f2iz>
 8004cf2:	4932      	ldr	r1, [pc, #200]	; (8004dbc <Draw_principal+0x17c>)
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	0030      	movs	r0, r6
 8004cf8:	f001 f9c6 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 68, 16, Buff_Display);
 8004cfc:	0033      	movs	r3, r6
 8004cfe:	2210      	movs	r2, #16
 8004d00:	2144      	movs	r1, #68	; 0x44
 8004d02:	0020      	movs	r0, r4
 8004d04:	f000 fd2c 	bl	8005760 <u8g_DrawStr>
	sprintf(Buff_Display,"%3.0d C",(int)carro->TEMPERATURA);
 8004d08:	68ea      	ldr	r2, [r5, #12]
 8004d0a:	492d      	ldr	r1, [pc, #180]	; (8004dc0 <Draw_principal+0x180>)
 8004d0c:	0030      	movs	r0, r6
 8004d0e:	f001 f9bb 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 0, 48, Buff_Display);
 8004d12:	0033      	movs	r3, r6
 8004d14:	2230      	movs	r2, #48	; 0x30
 8004d16:	2100      	movs	r1, #0
 8004d18:	0020      	movs	r0, r4
 8004d1a:	f000 fd21 	bl	8005760 <u8g_DrawStr>
	if(carro->Switch_bomba_2)
 8004d1e:	002b      	movs	r3, r5
 8004d20:	333a      	adds	r3, #58	; 0x3a
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d037      	beq.n	8004d98 <Draw_principal+0x158>
		if(carro->MODO)
 8004d28:	782b      	ldrb	r3, [r5, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <Draw_principal+0x120>
			u8g_DrawStr(&u8g, 50, 48,	"MANUAL");	//LINHA 1
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <Draw_principal+0x184>)
		u8g_DrawStr(&u8g, 50, 48,  "Desligado");	//LINHA 1
 8004d30:	2230      	movs	r2, #48	; 0x30
 8004d32:	2132      	movs	r1, #50	; 0x32
 8004d34:	0020      	movs	r0, r4
 8004d36:	f000 fd13 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultBackgroundColor(&u8g);
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	f000 feda 	bl	8005af4 <u8g_SetDefaultBackgroundColor>
	u8g_DrawStr(&u8g, 0, 0,	" Hect     Veloc");	//LINHA 1
 8004d40:	2200      	movs	r2, #0
 8004d42:	0020      	movs	r0, r4
 8004d44:	0011      	movs	r1, r2
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <Draw_principal+0x188>)
 8004d48:	f000 fd0a 	bl	8005760 <u8g_DrawStr>
	u8g_DrawStr(&u8g, 3, 32,"Temp	   STATUS");	//LINHA 1
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	2103      	movs	r1, #3
 8004d50:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <Draw_principal+0x18c>)
 8004d52:	0020      	movs	r0, r4
 8004d54:	f000 fd04 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultForegroundColor(&u8g);
 8004d58:	0020      	movs	r0, r4
 8004d5a:	f000 febc 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
}
 8004d5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		else if(carro->Nivel)
 8004d60:	002b      	movs	r3, r5
 8004d62:	3338      	adds	r3, #56	; 0x38
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <Draw_principal+0x12e>
			u8g_DrawStr(&u8g, 50, 48,	"liq.Baixo");	//LINHA 1
 8004d6a:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <Draw_principal+0x190>)
 8004d6c:	e7e0      	b.n	8004d30 <Draw_principal+0xf0>
		else if(carro->Velocidade_kmh < carro->Velocidade_troca)
 8004d6e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004d70:	f7fc fa0c 	bl	800118c <__aeabi_ui2f>
 8004d74:	6a2f      	ldr	r7, [r5, #32]
 8004d76:	1c06      	adds	r6, r0, #0
 8004d78:	1c01      	adds	r1, r0, #0
 8004d7a:	1c38      	adds	r0, r7, #0
 8004d7c:	f7fb fb6c 	bl	8000458 <__aeabi_fcmplt>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d001      	beq.n	8004d88 <Draw_principal+0x148>
			u8g_DrawStr(&u8g, 50, 48,	"Vel.Baixa");	//LINHA 1
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <Draw_principal+0x194>)
 8004d86:	e7d3      	b.n	8004d30 <Draw_principal+0xf0>
		else if(carro->Velocidade_kmh < carro->Velocidade_troca)
 8004d88:	6a29      	ldr	r1, [r5, #32]
 8004d8a:	1c30      	adds	r0, r6, #0
 8004d8c:	f7fb fb78 	bl	8000480 <__aeabi_fcmpgt>
			u8g_DrawStr(&u8g, 50, 48,	" Ativo");		//LINHA 1
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <Draw_principal+0x198>)
		else if(carro->Velocidade_kmh < carro->Velocidade_troca)
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0cc      	beq.n	8004d30 <Draw_principal+0xf0>
 8004d96:	e7f5      	b.n	8004d84 <Draw_principal+0x144>
		u8g_DrawStr(&u8g, 50, 48,  "Desligado");	//LINHA 1
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <Draw_principal+0x19c>)
 8004d9a:	e7c9      	b.n	8004d30 <Draw_principal+0xf0>
 8004d9c:	08006ba5 	.word	0x08006ba5
 8004da0:	20000340 	.word	0x20000340
 8004da4:	461c4000 	.word	0x461c4000
 8004da8:	20000438 	.word	0x20000438
 8004dac:	00002710 	.word	0x00002710
 8004db0:	20000208 	.word	0x20000208
 8004db4:	08006ada 	.word	0x08006ada
 8004db8:	08006ae1 	.word	0x08006ae1
 8004dbc:	08006ae7 	.word	0x08006ae7
 8004dc0:	08006af1 	.word	0x08006af1
 8004dc4:	08006b8d 	.word	0x08006b8d
 8004dc8:	08006b1e 	.word	0x08006b1e
 8004dcc:	08006b2e 	.word	0x08006b2e
 8004dd0:	08006af9 	.word	0x08006af9
 8004dd4:	08006b03 	.word	0x08006b03
 8004dd8:	08006b0d 	.word	0x08006b0d
 8004ddc:	08006b14 	.word	0x08006b14

08004de0 <Tela_Menu_Raio>:
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	9003      	str	r0, [sp, #12]
	u8g_My_SetaFonte(u8g_font_8x13B);	//FUNCAO PARA DEFINI��O DE FONTE
 8004de6:	482a      	ldr	r0, [pc, #168]	; (8004e90 <Tela_Menu_Raio+0xb0>)
 8004de8:	f7ff ff1a 	bl	8004c20 <u8g_My_SetaFonte>
	u8g_SetDefaultForegroundColor(&u8g);
 8004dec:	4c29      	ldr	r4, [pc, #164]	; (8004e94 <Tela_Menu_Raio+0xb4>)
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004dee:	260d      	movs	r6, #13
	u8g_SetDefaultForegroundColor(&u8g);
 8004df0:	0020      	movs	r0, r4
 8004df2:	f000 fe70 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004df6:	2200      	movs	r2, #0
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004df8:	2503      	movs	r5, #3
 8004dfa:	2715      	movs	r7, #21
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0020      	movs	r0, r4
 8004e00:	237f      	movs	r3, #127	; 0x7f
 8004e02:	9600      	str	r6, [sp, #0]
 8004e04:	f000 ffda 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004e08:	003b      	movs	r3, r7
 8004e0a:	0020      	movs	r0, r4
 8004e0c:	9501      	str	r5, [sp, #4]
 8004e0e:	2219      	movs	r2, #25
 8004e10:	2100      	movs	r1, #0
 8004e12:	9700      	str	r7, [sp, #0]
 8004e14:	f000 ffeb 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 4, 34, 13, 3); // sinal de menos
 8004e18:	0033      	movs	r3, r6
 8004e1a:	0020      	movs	r0, r4
 8004e1c:	9500      	str	r5, [sp, #0]
 8004e1e:	2222      	movs	r2, #34	; 0x22
 8004e20:	2104      	movs	r1, #4
 8004e22:	f000 ffcb 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 103, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004e26:	003b      	movs	r3, r7
 8004e28:	0020      	movs	r0, r4
 8004e2a:	9501      	str	r5, [sp, #4]
 8004e2c:	2219      	movs	r2, #25
 8004e2e:	2167      	movs	r1, #103	; 0x67
 8004e30:	9700      	str	r7, [sp, #0]
 8004e32:	f000 ffdc 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 107, 34, 13, 3); // sinal de mais horizontal
 8004e36:	0033      	movs	r3, r6
 8004e38:	0020      	movs	r0, r4
 8004e3a:	9500      	str	r5, [sp, #0]
 8004e3c:	2222      	movs	r2, #34	; 0x22
 8004e3e:	216b      	movs	r1, #107	; 0x6b
 8004e40:	f000 ffbc 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawBox(&u8g, 112, 29, 3, 13); // sinal de mais vertical
 8004e44:	002b      	movs	r3, r5
 8004e46:	221d      	movs	r2, #29
 8004e48:	2170      	movs	r1, #112	; 0x70
 8004e4a:	0020      	movs	r0, r4
 8004e4c:	9600      	str	r6, [sp, #0]
 8004e4e:	f000 ffb5 	bl	8005dbc <u8g_DrawBox>
	u8g_SetDefaultBackgroundColor(&u8g);
 8004e52:	0020      	movs	r0, r4
 8004e54:	f000 fe4e 	bl	8005af4 <u8g_SetDefaultBackgroundColor>
	u8g_DrawStr(&u8g, 0, 0,	" DIAMETRO PNEU ");	//LINHA
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <Tela_Menu_Raio+0xb8>)
 8004e5c:	0011      	movs	r1, r2
 8004e5e:	0020      	movs	r0, r4
 8004e60:	f000 fc7e 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultForegroundColor(&u8g);
 8004e64:	0020      	movs	r0, r4
 8004e66:	f000 fe36 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	sprintf(Buff_Display,"%3.0d cm",(int)Raio);
 8004e6a:	4d0c      	ldr	r5, [pc, #48]	; (8004e9c <Tela_Menu_Raio+0xbc>)
 8004e6c:	9a03      	ldr	r2, [sp, #12]
 8004e6e:	0028      	movs	r0, r5
 8004e70:	490b      	ldr	r1, [pc, #44]	; (8004ea0 <Tela_Menu_Raio+0xc0>)
 8004e72:	f001 f909 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 32, 30, Buff_Display);
 8004e76:	002b      	movs	r3, r5
 8004e78:	221e      	movs	r2, #30
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	0020      	movs	r0, r4
 8004e7e:	f000 fc6f 	bl	8005760 <u8g_DrawStr>
	Menu_bolas_display(4, 1);
 8004e82:	2101      	movs	r1, #1
 8004e84:	2004      	movs	r0, #4
 8004e86:	f7ff fead 	bl	8004be4 <Menu_bolas_display>
}
 8004e8a:	b005      	add	sp, #20
 8004e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	08006ba5 	.word	0x08006ba5
 8004e94:	20000340 	.word	0x20000340
 8004e98:	08006b3d 	.word	0x08006b3d
 8004e9c:	20000208 	.word	0x20000208
 8004ea0:	08006b4d 	.word	0x08006b4d

08004ea4 <Tela_Menu_braco>:
{
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	9003      	str	r0, [sp, #12]
	u8g_My_SetaFonte(u8g_font_8x13B);	//FUNCAO PARA DEFINI��O DE FONTE
 8004eaa:	482a      	ldr	r0, [pc, #168]	; (8004f54 <Tela_Menu_braco+0xb0>)
 8004eac:	f7ff feb8 	bl	8004c20 <u8g_My_SetaFonte>
	u8g_SetDefaultForegroundColor(&u8g);
 8004eb0:	4c29      	ldr	r4, [pc, #164]	; (8004f58 <Tela_Menu_braco+0xb4>)
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004eb2:	260d      	movs	r6, #13
	u8g_SetDefaultForegroundColor(&u8g);
 8004eb4:	0020      	movs	r0, r4
 8004eb6:	f000 fe0e 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004eba:	2200      	movs	r2, #0
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004ebc:	2503      	movs	r5, #3
 8004ebe:	2715      	movs	r7, #21
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004ec0:	0011      	movs	r1, r2
 8004ec2:	0020      	movs	r0, r4
 8004ec4:	237f      	movs	r3, #127	; 0x7f
 8004ec6:	9600      	str	r6, [sp, #0]
 8004ec8:	f000 ff78 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004ecc:	003b      	movs	r3, r7
 8004ece:	0020      	movs	r0, r4
 8004ed0:	9501      	str	r5, [sp, #4]
 8004ed2:	2219      	movs	r2, #25
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	9700      	str	r7, [sp, #0]
 8004ed8:	f000 ff89 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 4, 34, 13, 3); // sinal de menos
 8004edc:	0033      	movs	r3, r6
 8004ede:	0020      	movs	r0, r4
 8004ee0:	9500      	str	r5, [sp, #0]
 8004ee2:	2222      	movs	r2, #34	; 0x22
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	f000 ff69 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 103, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004eea:	003b      	movs	r3, r7
 8004eec:	0020      	movs	r0, r4
 8004eee:	9501      	str	r5, [sp, #4]
 8004ef0:	2219      	movs	r2, #25
 8004ef2:	2167      	movs	r1, #103	; 0x67
 8004ef4:	9700      	str	r7, [sp, #0]
 8004ef6:	f000 ff7a 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 107, 34, 13, 3); // sinal de mais horizontal
 8004efa:	0033      	movs	r3, r6
 8004efc:	0020      	movs	r0, r4
 8004efe:	9500      	str	r5, [sp, #0]
 8004f00:	2222      	movs	r2, #34	; 0x22
 8004f02:	216b      	movs	r1, #107	; 0x6b
 8004f04:	f000 ff5a 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawBox(&u8g, 112, 29, 3, 13); // sinal de mais vertical
 8004f08:	002b      	movs	r3, r5
 8004f0a:	221d      	movs	r2, #29
 8004f0c:	2170      	movs	r1, #112	; 0x70
 8004f0e:	0020      	movs	r0, r4
 8004f10:	9600      	str	r6, [sp, #0]
 8004f12:	f000 ff53 	bl	8005dbc <u8g_DrawBox>
	u8g_SetDefaultBackgroundColor(&u8g);
 8004f16:	0020      	movs	r0, r4
 8004f18:	f000 fdec 	bl	8005af4 <u8g_SetDefaultBackgroundColor>
	u8g_DrawStr(&u8g, 0, 0,	"  COMPRIMENTO L");	//LINHA
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <Tela_Menu_braco+0xb8>)
 8004f20:	0011      	movs	r1, r2
 8004f22:	0020      	movs	r0, r4
 8004f24:	f000 fc1c 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultForegroundColor(&u8g);
 8004f28:	0020      	movs	r0, r4
 8004f2a:	f000 fdd4 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	sprintf(Buff_Display,"%3.0d cm",(int)Braco);
 8004f2e:	4d0c      	ldr	r5, [pc, #48]	; (8004f60 <Tela_Menu_braco+0xbc>)
 8004f30:	9a03      	ldr	r2, [sp, #12]
 8004f32:	0028      	movs	r0, r5
 8004f34:	490b      	ldr	r1, [pc, #44]	; (8004f64 <Tela_Menu_braco+0xc0>)
 8004f36:	f001 f8a7 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 32, 30, Buff_Display);
 8004f3a:	002b      	movs	r3, r5
 8004f3c:	221e      	movs	r2, #30
 8004f3e:	2120      	movs	r1, #32
 8004f40:	0020      	movs	r0, r4
 8004f42:	f000 fc0d 	bl	8005760 <u8g_DrawStr>
	Menu_bolas_display(4, 2);
 8004f46:	2102      	movs	r1, #2
 8004f48:	2004      	movs	r0, #4
 8004f4a:	f7ff fe4b 	bl	8004be4 <Menu_bolas_display>
}
 8004f4e:	b005      	add	sp, #20
 8004f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	08006ba5 	.word	0x08006ba5
 8004f58:	20000340 	.word	0x20000340
 8004f5c:	08006b56 	.word	0x08006b56
 8004f60:	20000208 	.word	0x20000208
 8004f64:	08006b4d 	.word	0x08006b4d

08004f68 <Tela_Menu_Vel_troca>:
{
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	9003      	str	r0, [sp, #12]
	u8g_My_SetaFonte(u8g_font_8x13B);	//FUNCAO PARA DEFINI��O DE FONTE
 8004f6e:	482a      	ldr	r0, [pc, #168]	; (8005018 <Tela_Menu_Vel_troca+0xb0>)
 8004f70:	f7ff fe56 	bl	8004c20 <u8g_My_SetaFonte>
	u8g_SetDefaultForegroundColor(&u8g);
 8004f74:	4c29      	ldr	r4, [pc, #164]	; (800501c <Tela_Menu_Vel_troca+0xb4>)
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004f76:	260d      	movs	r6, #13
	u8g_SetDefaultForegroundColor(&u8g);
 8004f78:	0020      	movs	r0, r4
 8004f7a:	f000 fdac 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004f7e:	2200      	movs	r2, #0
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004f80:	2503      	movs	r5, #3
 8004f82:	2715      	movs	r7, #21
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8004f84:	0011      	movs	r1, r2
 8004f86:	0020      	movs	r0, r4
 8004f88:	9600      	str	r6, [sp, #0]
 8004f8a:	237f      	movs	r3, #127	; 0x7f
 8004f8c:	f000 ff16 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004f90:	003b      	movs	r3, r7
 8004f92:	0020      	movs	r0, r4
 8004f94:	2219      	movs	r2, #25
 8004f96:	2100      	movs	r1, #0
 8004f98:	9501      	str	r5, [sp, #4]
 8004f9a:	9700      	str	r7, [sp, #0]
 8004f9c:	f000 ff27 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 4, 34, 13, 3); // sinal de menos
 8004fa0:	0033      	movs	r3, r6
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	2222      	movs	r2, #34	; 0x22
 8004fa6:	2104      	movs	r1, #4
 8004fa8:	9500      	str	r5, [sp, #0]
 8004faa:	f000 ff07 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 103, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8004fae:	003b      	movs	r3, r7
 8004fb0:	0020      	movs	r0, r4
 8004fb2:	2219      	movs	r2, #25
 8004fb4:	2167      	movs	r1, #103	; 0x67
 8004fb6:	9501      	str	r5, [sp, #4]
 8004fb8:	9700      	str	r7, [sp, #0]
 8004fba:	f000 ff18 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 107, 34, 13, 3); // sinal de mais horizontal
 8004fbe:	0033      	movs	r3, r6
 8004fc0:	0020      	movs	r0, r4
 8004fc2:	2222      	movs	r2, #34	; 0x22
 8004fc4:	216b      	movs	r1, #107	; 0x6b
 8004fc6:	9500      	str	r5, [sp, #0]
 8004fc8:	f000 fef8 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawBox(&u8g, 112, 29, 3, 13); // sinal de mais vertical
 8004fcc:	002b      	movs	r3, r5
 8004fce:	221d      	movs	r2, #29
 8004fd0:	2170      	movs	r1, #112	; 0x70
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	9600      	str	r6, [sp, #0]
 8004fd6:	f000 fef1 	bl	8005dbc <u8g_DrawBox>
	u8g_SetDefaultBackgroundColor(&u8g);
 8004fda:	0020      	movs	r0, r4
 8004fdc:	f000 fd8a 	bl	8005af4 <u8g_SetDefaultBackgroundColor>
	u8g_DrawStr(&u8g, 0, 0,	"  VEL. MIN");	//LINHA
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <Tela_Menu_Vel_troca+0xb8>)
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f000 fbba 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultForegroundColor(&u8g);
 8004fec:	0020      	movs	r0, r4
 8004fee:	f000 fd72 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	sprintf(Buff_Display,"%3.0d km/h",(int)Velocidade);
 8004ff2:	4e0c      	ldr	r6, [pc, #48]	; (8005024 <Tela_Menu_Vel_troca+0xbc>)
 8004ff4:	9a03      	ldr	r2, [sp, #12]
 8004ff6:	0030      	movs	r0, r6
 8004ff8:	490b      	ldr	r1, [pc, #44]	; (8005028 <Tela_Menu_Vel_troca+0xc0>)
 8004ffa:	f001 f845 	bl	8006088 <siprintf>
	u8g_DrawStr(&u8g, 32, 30, Buff_Display);
 8004ffe:	0033      	movs	r3, r6
 8005000:	221e      	movs	r2, #30
 8005002:	2120      	movs	r1, #32
 8005004:	0020      	movs	r0, r4
 8005006:	f000 fbab 	bl	8005760 <u8g_DrawStr>
	Menu_bolas_display(4, 3);
 800500a:	0029      	movs	r1, r5
 800500c:	2004      	movs	r0, #4
 800500e:	f7ff fde9 	bl	8004be4 <Menu_bolas_display>
}
 8005012:	b005      	add	sp, #20
 8005014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	08006ba5 	.word	0x08006ba5
 800501c:	20000340 	.word	0x20000340
 8005020:	08006b66 	.word	0x08006b66
 8005024:	20000208 	.word	0x20000208
 8005028:	08006b71 	.word	0x08006b71

0800502c <Tela_Menu_Modo>:
{
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502e:	b085      	sub	sp, #20
 8005030:	9003      	str	r0, [sp, #12]
	u8g_My_SetaFonte(u8g_font_8x13B);	//FUNCAO PARA DEFINI��O DE FONTE
 8005032:	4829      	ldr	r0, [pc, #164]	; (80050d8 <Tela_Menu_Modo+0xac>)
 8005034:	f7ff fdf4 	bl	8004c20 <u8g_My_SetaFonte>
	u8g_SetDefaultForegroundColor(&u8g);
 8005038:	4c28      	ldr	r4, [pc, #160]	; (80050dc <Tela_Menu_Modo+0xb0>)
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 800503a:	270d      	movs	r7, #13
	u8g_SetDefaultForegroundColor(&u8g);
 800503c:	0020      	movs	r0, r4
 800503e:	f000 fd4a 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8005042:	2200      	movs	r2, #0
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8005044:	2503      	movs	r5, #3
 8005046:	2615      	movs	r6, #21
	u8g_DrawBox(&u8g, 0, 0, 127, 13);  	//BACKGROUND LINHA 1
 8005048:	0011      	movs	r1, r2
 800504a:	237f      	movs	r3, #127	; 0x7f
 800504c:	0020      	movs	r0, r4
 800504e:	9700      	str	r7, [sp, #0]
 8005050:	f000 feb4 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 0, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8005054:	0033      	movs	r3, r6
 8005056:	2219      	movs	r2, #25
 8005058:	2100      	movs	r1, #0
 800505a:	0020      	movs	r0, r4
 800505c:	9501      	str	r5, [sp, #4]
 800505e:	9600      	str	r6, [sp, #0]
 8005060:	f000 fec5 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 4, 34, 13, 3); // sinal de menos
 8005064:	003b      	movs	r3, r7
 8005066:	2222      	movs	r2, #34	; 0x22
 8005068:	2104      	movs	r1, #4
 800506a:	0020      	movs	r0, r4
 800506c:	9500      	str	r5, [sp, #0]
 800506e:	f000 fea5 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawRFrame(&u8g, 103, 25, 21, 21, 3); // frame para bota de sinal de subtraçao
 8005072:	0033      	movs	r3, r6
 8005074:	2219      	movs	r2, #25
 8005076:	2167      	movs	r1, #103	; 0x67
 8005078:	0020      	movs	r0, r4
 800507a:	9501      	str	r5, [sp, #4]
 800507c:	9600      	str	r6, [sp, #0]
 800507e:	f000 feb6 	bl	8005dee <u8g_DrawRFrame>
	u8g_DrawBox(&u8g, 107, 34, 13, 3); // sinal de mais horizontal
 8005082:	003b      	movs	r3, r7
 8005084:	2222      	movs	r2, #34	; 0x22
 8005086:	216b      	movs	r1, #107	; 0x6b
 8005088:	0020      	movs	r0, r4
 800508a:	9500      	str	r5, [sp, #0]
 800508c:	f000 fe96 	bl	8005dbc <u8g_DrawBox>
	u8g_DrawBox(&u8g, 112, 29, 3, 13); // sinal de mais vertical
 8005090:	002b      	movs	r3, r5
 8005092:	221d      	movs	r2, #29
 8005094:	2170      	movs	r1, #112	; 0x70
 8005096:	0020      	movs	r0, r4
 8005098:	9700      	str	r7, [sp, #0]
 800509a:	f000 fe8f 	bl	8005dbc <u8g_DrawBox>
	u8g_SetDefaultBackgroundColor(&u8g);
 800509e:	0020      	movs	r0, r4
 80050a0:	f000 fd28 	bl	8005af4 <u8g_SetDefaultBackgroundColor>
	u8g_DrawStr(&u8g, 0, 0,	"  MODO OPERACAO");	//LINHA
 80050a4:	2200      	movs	r2, #0
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <Tela_Menu_Modo+0xb4>)
 80050a8:	0011      	movs	r1, r2
 80050aa:	0020      	movs	r0, r4
 80050ac:	f000 fb58 	bl	8005760 <u8g_DrawStr>
	u8g_SetDefaultForegroundColor(&u8g);
 80050b0:	0020      	movs	r0, r4
 80050b2:	f000 fd10 	bl	8005ad6 <u8g_SetDefaultForegroundColor>
	if(Modo == 1)
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10b      	bne.n	80050d4 <Tela_Menu_Modo+0xa8>
		u8g_DrawStr(&u8g, 32, 30,	" MANUAL");	//LINHA
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <Tela_Menu_Modo+0xb8>)
		u8g_DrawStr(&u8g, 32, 30,	"  AUTO");	//LINHA
 80050be:	221e      	movs	r2, #30
 80050c0:	2120      	movs	r1, #32
 80050c2:	0020      	movs	r0, r4
 80050c4:	f000 fb4c 	bl	8005760 <u8g_DrawStr>
	Menu_bolas_display(4, 4);
 80050c8:	2104      	movs	r1, #4
 80050ca:	0008      	movs	r0, r1
 80050cc:	f7ff fd8a 	bl	8004be4 <Menu_bolas_display>
}
 80050d0:	b005      	add	sp, #20
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8g_DrawStr(&u8g, 32, 30,	"  AUTO");	//LINHA
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <Tela_Menu_Modo+0xbc>)
 80050d6:	e7f2      	b.n	80050be <Tela_Menu_Modo+0x92>
 80050d8:	08006ba5 	.word	0x08006ba5
 80050dc:	20000340 	.word	0x20000340
 80050e0:	08006b7c 	.word	0x08006b7c
 80050e4:	08006b8c 	.word	0x08006b8c
 80050e8:	08006b94 	.word	0x08006b94

080050ec <u8g_Delay>:
#define	STM32_HAL_I2C_TIMEOUT	100

uint8_t control = 0;
extern __IO int Erro_display;

void u8g_Delay(uint16_t val) {
 80050ec:	b510      	push	{r4, lr}
	HAL_Delay(val);
 80050ee:	f7fd fe6b 	bl	8002dc8 <HAL_Delay>
}
 80050f2:	bd10      	pop	{r4, pc}

080050f4 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	0004      	movs	r4, r0
	static uint32_t i, j;
	static uint32_t freq;
	freq = HAL_RCC_GetSysClockFreq() / 1000000;
 80050f8:	f7ff f856 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 80050fc:	490b      	ldr	r1, [pc, #44]	; (800512c <u8g_xMicroDelay+0x38>)
 80050fe:	f7fb f817 	bl	8000130 <__udivsi3>

	for (i = 0; i < val;) {
 8005102:	2300      	movs	r3, #0
 8005104:	1c42      	adds	r2, r0, #1
 8005106:	2001      	movs	r0, #1
 8005108:	001f      	movs	r7, r3
 800510a:	4d09      	ldr	r5, [pc, #36]	; (8005130 <u8g_xMicroDelay+0x3c>)
 800510c:	4909      	ldr	r1, [pc, #36]	; (8005134 <u8g_xMicroDelay+0x40>)
 800510e:	682e      	ldr	r6, [r5, #0]
 8005110:	600b      	str	r3, [r1, #0]
 8005112:	4382      	bics	r2, r0
 8005114:	429c      	cmp	r4, r3
 8005116:	d804      	bhi.n	8005122 <u8g_xMicroDelay+0x2e>
 8005118:	2f00      	cmp	r7, #0
 800511a:	d001      	beq.n	8005120 <u8g_xMicroDelay+0x2c>
 800511c:	602e      	str	r6, [r5, #0]
 800511e:	600c      	str	r4, [r1, #0]
		for (j = 0; j < freq; ++j) {
			++j;
		}
		++i;
	}
}
 8005120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (j = 0; j < freq; ++j) {
 8005122:	0016      	movs	r6, r2
	for (i = 0; i < val;) {
 8005124:	0007      	movs	r7, r0
 8005126:	3301      	adds	r3, #1
 8005128:	e7f4      	b.n	8005114 <u8g_xMicroDelay+0x20>
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	000f4240 	.word	0x000f4240
 8005130:	20000444 	.word	0x20000444
 8005134:	20000440 	.word	0x20000440

08005138 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 8005138:	b510      	push	{r4, lr}
	u8g_xMicroDelay(1);
 800513a:	2001      	movs	r0, #1
 800513c:	f7ff ffda 	bl	80050f4 <u8g_xMicroDelay>
}
 8005140:	bd10      	pop	{r4, pc}

08005142 <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 8005142:	b510      	push	{r4, lr}
	u8g_xMicroDelay(10);
 8005144:	200a      	movs	r0, #10
 8005146:	f7ff ffd5 	bl	80050f4 <u8g_xMicroDelay>
}
 800514a:	bd10      	pop	{r4, pc}

0800514c <u8g_com_arm_stm32_ssd_i2c_fn>:

uint8_t u8g_com_arm_stm32_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val,void *arg_ptr) {
 800514c:	b530      	push	{r4, r5, lr}
 800514e:	2417      	movs	r4, #23
 8005150:	b087      	sub	sp, #28
 8005152:	446c      	add	r4, sp



	switch (msg) {
 8005154:	1e48      	subs	r0, r1, #1
uint8_t u8g_com_arm_stm32_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val,void *arg_ptr) {
 8005156:	7022      	strb	r2, [r4, #0]
	switch (msg) {
 8005158:	2806      	cmp	r0, #6
 800515a:	d807      	bhi.n	800516c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>
 800515c:	f7fa ffd4 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005160:	06060904 	.word	0x06060904
 8005164:	2312      	.short	0x2312
 8005166:	23          	.byte	0x23
 8005167:	00          	.byte	0x00
	case U8G_COM_MSG_STOP:
		break;

	case U8G_COM_MSG_INIT:
		u8g_MicroDelay();
 8005168:	f7ff ffe6 	bl	8005138 <u8g_MicroDelay>
	}

		break;
	}
	return 1;
}
 800516c:	2001      	movs	r0, #1
 800516e:	b007      	add	sp, #28
 8005170:	bd30      	pop	{r4, r5, pc}
		if (arg_val == 0) {
 8005172:	7823      	ldrb	r3, [r4, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d000      	beq.n	800517a <u8g_com_arm_stm32_ssd_i2c_fn+0x2e>
			control = 0x40;
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <u8g_com_arm_stm32_ssd_i2c_fn+0x84>)
 800517c:	7013      	strb	r3, [r2, #0]
		u8g_10MicroDelay();
 800517e:	f7ff ffe0 	bl	8005142 <u8g_10MicroDelay>
		break;
 8005182:	e7f3      	b.n	800516c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>
		if(HAL_I2C_Mem_Write(&STM32_HAL_I2C_HANDLER, SSD1306_I2C_ADDRESS, control,	1, &arg_val, 1, STM32_HAL_I2C_TIMEOUT) != HAL_OK)
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <u8g_com_arm_stm32_ssd_i2c_fn+0x84>)
 8005186:	2501      	movs	r5, #1
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	2364      	movs	r3, #100	; 0x64
 800518c:	2178      	movs	r1, #120	; 0x78
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	4810      	ldr	r0, [pc, #64]	; (80051d4 <u8g_com_arm_stm32_ssd_i2c_fn+0x88>)
 8005192:	002b      	movs	r3, r5
 8005194:	9501      	str	r5, [sp, #4]
 8005196:	9400      	str	r4, [sp, #0]
 8005198:	f7fe fd02 	bl	8003ba0 <HAL_I2C_Mem_Write>
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <u8g_com_arm_stm32_ssd_i2c_fn+0x8c>)
 800519e:	2800      	cmp	r0, #0
 80051a0:	d013      	beq.n	80051ca <u8g_com_arm_stm32_ssd_i2c_fn+0x7e>
			Erro_display=1;
 80051a2:	601d      	str	r5, [r3, #0]
 80051a4:	e7e2      	b.n	800516c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>
		if(HAL_I2C_Mem_Write(&STM32_HAL_I2C_HANDLER, SSD1306_I2C_ADDRESS, control,	1, arg_ptr, arg_val, STM32_HAL_I2C_TIMEOUT) != HAL_OK)
 80051a6:	2164      	movs	r1, #100	; 0x64
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <u8g_com_arm_stm32_ssd_i2c_fn+0x84>)
 80051aa:	480a      	ldr	r0, [pc, #40]	; (80051d4 <u8g_com_arm_stm32_ssd_i2c_fn+0x88>)
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	9102      	str	r1, [sp, #8]
 80051b0:	7821      	ldrb	r1, [r4, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	9101      	str	r1, [sp, #4]
 80051b6:	2301      	movs	r3, #1
 80051b8:	2178      	movs	r1, #120	; 0x78
 80051ba:	f7fe fcf1 	bl	8003ba0 <HAL_I2C_Mem_Write>
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <u8g_com_arm_stm32_ssd_i2c_fn+0x8c>)
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d002      	beq.n	80051ca <u8g_com_arm_stm32_ssd_i2c_fn+0x7e>
			Erro_display=1;
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e7d0      	b.n	800516c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>
			Erro_display=0;
 80051ca:	6018      	str	r0, [r3, #0]
 80051cc:	e7ce      	b.n	800516c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	2000043c 	.word	0x2000043c
 80051d4:	20000198 	.word	0x20000198
 80051d8:	20000330 	.word	0x20000330

080051dc <u8g_DrawHBitmap>:
*/

#include "u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 80051dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051de:	0006      	movs	r6, r0
 80051e0:	000c      	movs	r4, r1
 80051e2:	0017      	movs	r7, r2
 80051e4:	b085      	sub	sp, #20
 80051e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80051e8:	18eb      	adds	r3, r5, r3
 80051ea:	9303      	str	r3, [sp, #12]
  while( cnt > 0 )
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	429d      	cmp	r5, r3
 80051f0:	d101      	bne.n	80051f6 <u8g_DrawHBitmap+0x1a>
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
    bitmap++;
    cnt--;
    x+=8;
  }
}
 80051f2:	b005      	add	sp, #20
 80051f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 80051f6:	782b      	ldrb	r3, [r5, #0]
 80051f8:	0021      	movs	r1, r4
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	003a      	movs	r2, r7
 80051fe:	2300      	movs	r3, #0
 8005200:	0030      	movs	r0, r6
    x+=8;
 8005202:	3408      	adds	r4, #8
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 8005204:	f000 fc4b 	bl	8005a9e <u8g_Draw8Pixel>
    bitmap++;
 8005208:	3501      	adds	r5, #1
    x+=8;
 800520a:	b2e4      	uxtb	r4, r4
 800520c:	e7ee      	b.n	80051ec <u8g_DrawHBitmap+0x10>

0800520e <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 800520e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005210:	001d      	movs	r5, r3
 8005212:	b085      	sub	sp, #20
 8005214:	ab0a      	add	r3, sp, #40	; 0x28
 8005216:	781e      	ldrb	r6, [r3, #0]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8005218:	00eb      	lsls	r3, r5, #3
{
 800521a:	0014      	movs	r4, r2
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 800521c:	9600      	str	r6, [sp, #0]
 800521e:	b2db      	uxtb	r3, r3
{
 8005220:	0007      	movs	r7, r0
 8005222:	9103      	str	r1, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8005224:	f000 f8a2 	bl	800536c <u8g_IsBBXIntersection>
 8005228:	19a6      	adds	r6, r4, r6
 800522a:	b2f6      	uxtb	r6, r6
 800522c:	2800      	cmp	r0, #0
 800522e:	d10e      	bne.n	800524e <u8g_DrawBitmap+0x40>
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
    bitmap += cnt;
    y++;
    h--;
  }
}
 8005230:	b005      	add	sp, #20
 8005232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 8005234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005236:	0022      	movs	r2, r4
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	0038      	movs	r0, r7
 800523c:	002b      	movs	r3, r5
 800523e:	9903      	ldr	r1, [sp, #12]
 8005240:	f7ff ffcc 	bl	80051dc <u8g_DrawHBitmap>
    bitmap += cnt;
 8005244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    y++;
 8005246:	3401      	adds	r4, #1
    bitmap += cnt;
 8005248:	195b      	adds	r3, r3, r5
 800524a:	930b      	str	r3, [sp, #44]	; 0x2c
    y++;
 800524c:	b2e4      	uxtb	r4, r4
  while( h > 0 )
 800524e:	42b4      	cmp	r4, r6
 8005250:	d1f0      	bne.n	8005234 <u8g_DrawBitmap+0x26>
 8005252:	e7ed      	b.n	8005230 <u8g_DrawBitmap+0x22>

08005254 <u8g_draw_circle_section>:
/*=========================================================================*/

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option) U8G_NOINLINE;

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option)
{
 8005254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005256:	001c      	movs	r4, r3
 8005258:	ab08      	add	r3, sp, #32
 800525a:	781f      	ldrb	r7, [r3, #0]
 800525c:	ab09      	add	r3, sp, #36	; 0x24
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	0006      	movs	r6, r0
 8005262:	000d      	movs	r5, r1
 8005264:	9200      	str	r2, [sp, #0]
 8005266:	9301      	str	r3, [sp, #4]
    /* upper right */
    if ( option & U8G_DRAW_UPPER_RIGHT )
 8005268:	07db      	lsls	r3, r3, #31
 800526a:	d50d      	bpl.n	8005288 <u8g_draw_circle_section+0x34>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 - y);
 800526c:	1aba      	subs	r2, r7, r2
 800526e:	1861      	adds	r1, r4, r1
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	b2c9      	uxtb	r1, r1
 8005274:	f000 fc0c 	bl	8005a90 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 - x);
 8005278:	9b00      	ldr	r3, [sp, #0]
 800527a:	1b7a      	subs	r2, r7, r5
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	0030      	movs	r0, r6
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	b2c9      	uxtb	r1, r1
 8005284:	f000 fc04 	bl	8005a90 <u8g_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G_DRAW_UPPER_LEFT )
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	079b      	lsls	r3, r3, #30
 800528c:	d50f      	bpl.n	80052ae <u8g_draw_circle_section+0x5a>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 - y);
 800528e:	9b00      	ldr	r3, [sp, #0]
 8005290:	1b61      	subs	r1, r4, r5
 8005292:	1afa      	subs	r2, r7, r3
 8005294:	0030      	movs	r0, r6
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	b2c9      	uxtb	r1, r1
 800529a:	f000 fbf9 	bl	8005a90 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 - x);
 800529e:	9b00      	ldr	r3, [sp, #0]
 80052a0:	1b7a      	subs	r2, r7, r5
 80052a2:	1ae1      	subs	r1, r4, r3
 80052a4:	0030      	movs	r0, r6
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	b2c9      	uxtb	r1, r1
 80052aa:	f000 fbf1 	bl	8005a90 <u8g_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G_DRAW_LOWER_RIGHT )
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	d50f      	bpl.n	80052d4 <u8g_draw_circle_section+0x80>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 + y);
 80052b4:	9b00      	ldr	r3, [sp, #0]
 80052b6:	1961      	adds	r1, r4, r5
 80052b8:	18fa      	adds	r2, r7, r3
 80052ba:	0030      	movs	r0, r6
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	b2c9      	uxtb	r1, r1
 80052c0:	f000 fbe6 	bl	8005a90 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 + x);
 80052c4:	9b00      	ldr	r3, [sp, #0]
 80052c6:	19ea      	adds	r2, r5, r7
 80052c8:	18e1      	adds	r1, r4, r3
 80052ca:	0030      	movs	r0, r6
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	b2c9      	uxtb	r1, r1
 80052d0:	f000 fbde 	bl	8005a90 <u8g_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G_DRAW_LOWER_LEFT )
 80052d4:	9b01      	ldr	r3, [sp, #4]
 80052d6:	075b      	lsls	r3, r3, #29
 80052d8:	d50f      	bpl.n	80052fa <u8g_draw_circle_section+0xa6>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 + y);
 80052da:	9b00      	ldr	r3, [sp, #0]
 80052dc:	1b61      	subs	r1, r4, r5
 80052de:	18fa      	adds	r2, r7, r3
 80052e0:	0030      	movs	r0, r6
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	b2c9      	uxtb	r1, r1
 80052e6:	f000 fbd3 	bl	8005a90 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 + x);
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	19ed      	adds	r5, r5, r7
 80052ee:	1ae1      	subs	r1, r4, r3
 80052f0:	0030      	movs	r0, r6
 80052f2:	b2ea      	uxtb	r2, r5
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	f000 fbcb 	bl	8005a90 <u8g_DrawPixel>
    }
}
 80052fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080052fc <u8g_draw_circle>:

void u8g_draw_circle(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
 80052fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fe:	001c      	movs	r4, r3
 8005300:	b087      	sub	sp, #28
 8005302:	ab0c      	add	r3, sp, #48	; 0x30
 8005304:	781b      	ldrb	r3, [r3, #0]
    u8g_int_t ddF_y;
    u8g_uint_t x;
    u8g_uint_t y;

    f = 1;
    f -= rad;
 8005306:	2501      	movs	r5, #1
{
 8005308:	9305      	str	r3, [sp, #20]
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
 800530a:	0063      	lsls	r3, r4, #1
 800530c:	425b      	negs	r3, r3
 800530e:	b25b      	sxtb	r3, r3
 8005310:	9302      	str	r3, [sp, #8]
    x = 0;
    y = rad;

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
 8005312:	9b05      	ldr	r3, [sp, #20]
{
 8005314:	9204      	str	r2, [sp, #16]
    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	9200      	str	r2, [sp, #0]
 800531a:	000b      	movs	r3, r1
{
 800531c:	000f      	movs	r7, r1
    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
 800531e:	0022      	movs	r2, r4
 8005320:	2100      	movs	r1, #0
{
 8005322:	9003      	str	r0, [sp, #12]
    x = 0;
 8005324:	2600      	movs	r6, #0
    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
 8005326:	f7ff ff95 	bl	8005254 <u8g_draw_circle_section>
    f -= rad;
 800532a:	1b2d      	subs	r5, r5, r4
 800532c:	b26d      	sxtb	r5, r5
    
    while ( x < y )
 800532e:	42a6      	cmp	r6, r4
 8005330:	d301      	bcc.n	8005336 <u8g_draw_circle+0x3a>
      ddF_x += 2;
      f += ddF_x;

      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
    }
}
 8005332:	b007      	add	sp, #28
 8005334:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (f >= 0) 
 8005336:	2d00      	cmp	r5, #0
 8005338:	db07      	blt.n	800534a <u8g_draw_circle+0x4e>
        ddF_y += 2;
 800533a:	9b02      	ldr	r3, [sp, #8]
        y--;
 800533c:	3c01      	subs	r4, #1
        ddF_y += 2;
 800533e:	3302      	adds	r3, #2
 8005340:	b25a      	sxtb	r2, r3
        f += ddF_y;
 8005342:	195d      	adds	r5, r3, r5
        y--;
 8005344:	b2e4      	uxtb	r4, r4
        ddF_y += 2;
 8005346:	9202      	str	r2, [sp, #8]
        f += ddF_y;
 8005348:	b26d      	sxtb	r5, r5
      x++;
 800534a:	3601      	adds	r6, #1
 800534c:	b2f6      	uxtb	r6, r6
      ddF_x += 2;
 800534e:	0073      	lsls	r3, r6, #1
 8005350:	3301      	adds	r3, #1
      f += ddF_x;
 8005352:	195d      	adds	r5, r3, r5
      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
 8005354:	9b05      	ldr	r3, [sp, #20]
 8005356:	0022      	movs	r2, r4
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	0031      	movs	r1, r6
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	9803      	ldr	r0, [sp, #12]
 8005362:	003b      	movs	r3, r7
      f += ddF_x;
 8005364:	b26d      	sxtb	r5, r5
      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
 8005366:	f7ff ff75 	bl	8005254 <u8g_draw_circle_section>
 800536a:	e7e0      	b.n	800532e <u8g_draw_circle+0x32>

0800536c <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	0005      	movs	r5, r0
 8005370:	a804      	add	r0, sp, #16
 8005372:	7804      	ldrb	r4, [r0, #0]
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8005374:	0028      	movs	r0, r5
 8005376:	3039      	adds	r0, #57	; 0x39
 8005378:	7806      	ldrb	r6, [r0, #0]
 800537a:	3002      	adds	r0, #2
  tmp--;
 800537c:	3c01      	subs	r4, #1
  if ( v0 <= a1 )
 800537e:	7800      	ldrb	r0, [r0, #0]
  tmp--;
 8005380:	1914      	adds	r4, r2, r4
 8005382:	b2e4      	uxtb	r4, r4
  if ( v0 <= a1 )
 8005384:	4290      	cmp	r0, r2
 8005386:	d315      	bcc.n	80053b4 <u8g_IsBBXIntersection+0x48>
    if ( v1 >= a0 )
 8005388:	42a6      	cmp	r6, r4
 800538a:	d902      	bls.n	8005392 <u8g_IsBBXIntersection+0x26>
    return 0; 
 800538c:	2000      	movs	r0, #0
      if ( v0 > v1 )
 800538e:	42a2      	cmp	r2, r4
 8005390:	d915      	bls.n	80053be <u8g_IsBBXIntersection+0x52>
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8005392:	002a      	movs	r2, r5
 8005394:	353a      	adds	r5, #58	; 0x3a
  tmp--;
 8005396:	3b01      	subs	r3, #1
  if ( v0 <= a1 )
 8005398:	7828      	ldrb	r0, [r5, #0]
  tmp--;
 800539a:	18cb      	adds	r3, r1, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800539c:	3238      	adds	r2, #56	; 0x38
 800539e:	7812      	ldrb	r2, [r2, #0]
  tmp--;
 80053a0:	b2db      	uxtb	r3, r3
  if ( v0 <= a1 )
 80053a2:	4288      	cmp	r0, r1
 80053a4:	d30c      	bcc.n	80053c0 <u8g_IsBBXIntersection+0x54>
      return 1;
 80053a6:	2001      	movs	r0, #1
    if ( v1 >= a0 )
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <u8g_IsBBXIntersection+0x52>
    return 0; 
 80053ac:	428b      	cmp	r3, r1
 80053ae:	419b      	sbcs	r3, r3
 80053b0:	4258      	negs	r0, r3
 80053b2:	e004      	b.n	80053be <u8g_IsBBXIntersection+0x52>
 80053b4:	2000      	movs	r0, #0
    if ( v1 >= a0 )
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d801      	bhi.n	80053be <u8g_IsBBXIntersection+0x52>
      if ( v0 > v1 )
 80053ba:	42a2      	cmp	r2, r4
 80053bc:	d8e9      	bhi.n	8005392 <u8g_IsBBXIntersection+0x26>
}
 80053be:	bd70      	pop	{r4, r5, r6, pc}
    return 0; 
 80053c0:	2000      	movs	r0, #0
    if ( v1 >= a0 )
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d9f2      	bls.n	80053ac <u8g_IsBBXIntersection+0x40>
 80053c6:	e7fa      	b.n	80053be <u8g_IsBBXIntersection+0x52>

080053c8 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 80053c8:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 80053ca:	2300      	movs	r3, #0
 80053cc:	688c      	ldr	r4, [r1, #8]
 80053ce:	2101      	movs	r1, #1
 80053d0:	47a0      	blx	r4
}
 80053d2:	bd10      	pop	{r4, pc}

080053d4 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 80053d4:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 80053d6:	2300      	movs	r3, #0
 80053d8:	688c      	ldr	r4, [r1, #8]
 80053da:	2103      	movs	r1, #3
 80053dc:	47a0      	blx	r4
}
 80053de:	bd10      	pop	{r4, pc}

080053e0 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 80053e0:	2300      	movs	r3, #0
{
 80053e2:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 80053e4:	001a      	movs	r2, r3
 80053e6:	688c      	ldr	r4, [r1, #8]
 80053e8:	2104      	movs	r1, #4
 80053ea:	47a0      	blx	r4
}
 80053ec:	bd10      	pop	{r4, pc}

080053ee <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 80053ee:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 80053f0:	2300      	movs	r3, #0
 80053f2:	688c      	ldr	r4, [r1, #8]
 80053f4:	2201      	movs	r2, #1
 80053f6:	2104      	movs	r1, #4
 80053f8:	47a0      	blx	r4
}
 80053fa:	bd10      	pop	{r4, pc}

080053fc <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 80053fc:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 80053fe:	2300      	movs	r3, #0
 8005400:	688c      	ldr	r4, [r1, #8]
 8005402:	2102      	movs	r1, #2
 8005404:	47a0      	blx	r4
}
 8005406:	bd10      	pop	{r4, pc}

08005408 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8005408:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 800540a:	2300      	movs	r3, #0
 800540c:	688c      	ldr	r4, [r1, #8]
 800540e:	2105      	movs	r1, #5
 8005410:	47a0      	blx	r4
}
 8005412:	bd10      	pop	{r4, pc}

08005414 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8005414:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8005416:	688c      	ldr	r4, [r1, #8]
 8005418:	2106      	movs	r1, #6
 800541a:	47a0      	blx	r4
}
 800541c:	bd10      	pop	{r4, pc}

0800541e <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 800541e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005420:	0005      	movs	r5, r0
 8005422:	000e      	movs	r6, r1
 8005424:	0017      	movs	r7, r2
  uint8_t is_escape = 0;
 8005426:	2000      	movs	r0, #0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8005428:	783c      	ldrb	r4, [r7, #0]
    if ( is_escape == 0 )
 800542a:	2800      	cmp	r0, #0
 800542c:	d10c      	bne.n	8005448 <u8g_WriteEscSeqP+0x2a>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
 800542e:	3001      	adds	r0, #1
      if ( value != 255 )
 8005430:	2cff      	cmp	r4, #255	; 0xff
 8005432:	d007      	beq.n	8005444 <u8g_WriteEscSeqP+0x26>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8005434:	0022      	movs	r2, r4
 8005436:	0031      	movs	r1, r6
 8005438:	0028      	movs	r0, r5
 800543a:	f7ff ffe5 	bl	8005408 <u8g_WriteByte>
 800543e:	2800      	cmp	r0, #0
 8005440:	d034      	beq.n	80054ac <u8g_WriteEscSeqP+0x8e>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
 8005442:	2000      	movs	r0, #0
    }
    esc_seq++;
 8005444:	3701      	adds	r7, #1
    value = u8g_pgm_read(esc_seq);
 8005446:	e7ef      	b.n	8005428 <u8g_WriteEscSeqP+0xa>
      if ( value == 255 )
 8005448:	2cff      	cmp	r4, #255	; 0xff
 800544a:	d0f3      	beq.n	8005434 <u8g_WriteEscSeqP+0x16>
      else if ( value == 254 )
 800544c:	2cfe      	cmp	r4, #254	; 0xfe
 800544e:	d02e      	beq.n	80054ae <u8g_WriteEscSeqP+0x90>
      else if ( value >= 0x0f0 )
 8005450:	2cef      	cmp	r4, #239	; 0xef
 8005452:	d8f6      	bhi.n	8005442 <u8g_WriteEscSeqP+0x24>
      else if ( value >= 0xe0  )
 8005454:	2cdf      	cmp	r4, #223	; 0xdf
 8005456:	d906      	bls.n	8005466 <u8g_WriteEscSeqP+0x48>
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8005458:	220f      	movs	r2, #15
 800545a:	0031      	movs	r1, r6
 800545c:	0028      	movs	r0, r5
 800545e:	4022      	ands	r2, r4
 8005460:	f7ff ffcc 	bl	80053fc <u8g_SetAddress>
 8005464:	e7ed      	b.n	8005442 <u8g_WriteEscSeqP+0x24>
      else if ( value >= 0xd0 )
 8005466:	2ccf      	cmp	r4, #207	; 0xcf
 8005468:	d906      	bls.n	8005478 <u8g_WriteEscSeqP+0x5a>
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 800546a:	220f      	movs	r2, #15
 800546c:	0031      	movs	r1, r6
 800546e:	0028      	movs	r0, r5
 8005470:	4022      	ands	r2, r4
 8005472:	f7ff ffaf 	bl	80053d4 <u8g_SetChipSelect>
 8005476:	e7e4      	b.n	8005442 <u8g_WriteEscSeqP+0x24>
      else if ( value >= 0xc0 )
 8005478:	2cbf      	cmp	r4, #191	; 0xbf
 800547a:	d912      	bls.n	80054a2 <u8g_WriteEscSeqP+0x84>
        u8g_SetResetLow(u8g, dev);
 800547c:	0124      	lsls	r4, r4, #4
        value+=2;
 800547e:	3402      	adds	r4, #2
        u8g_Delay(value);
 8005480:	b2e4      	uxtb	r4, r4
        u8g_SetResetLow(u8g, dev);
 8005482:	0031      	movs	r1, r6
 8005484:	0028      	movs	r0, r5
        u8g_Delay(value);
 8005486:	b2a4      	uxth	r4, r4
        u8g_SetResetLow(u8g, dev);
 8005488:	f7ff ffaa 	bl	80053e0 <u8g_SetResetLow>
        u8g_Delay(value);
 800548c:	0020      	movs	r0, r4
 800548e:	f7ff fe2d 	bl	80050ec <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8005492:	0028      	movs	r0, r5
 8005494:	0031      	movs	r1, r6
 8005496:	f7ff ffaa 	bl	80053ee <u8g_SetResetHigh>
        u8g_Delay(value);
 800549a:	0020      	movs	r0, r4
        u8g_Delay(value);
 800549c:	f7ff fe26 	bl	80050ec <u8g_Delay>
 80054a0:	e7cf      	b.n	8005442 <u8g_WriteEscSeqP+0x24>
      else if ( value <= 127 )
 80054a2:	b263      	sxtb	r3, r4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dbcc      	blt.n	8005442 <u8g_WriteEscSeqP+0x24>
        u8g_Delay(value);
 80054a8:	b2a0      	uxth	r0, r4
 80054aa:	e7f7      	b.n	800549c <u8g_WriteEscSeqP+0x7e>
          return 0;
 80054ac:	2000      	movs	r0, #0
  }
  return 1;
}
 80054ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054b0 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 80054b0:	2001      	movs	r0, #1
 80054b2:	4770      	bx	lr

080054b4 <u8g_DisableCursor>:
    u8g->cursor_fn = u8g_DrawCursor;
}

void u8g_DisableCursor(u8g_t *u8g)
{
    u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	6183      	str	r3, [r0, #24]
}
 80054b8:	4770      	bx	lr
	...

080054bc <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80054bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054be:	0005      	movs	r5, r0
  switch(msg)
 80054c0:	0010      	movs	r0, r2
 80054c2:	380a      	subs	r0, #10
{
 80054c4:	000c      	movs	r4, r1
 80054c6:	0016      	movs	r6, r2
 80054c8:	9301      	str	r3, [sp, #4]
  switch(msg)
 80054ca:	280b      	cmp	r0, #11
 80054cc:	d810      	bhi.n	80054f0 <u8g_dev_ssd1306_128x64_fn+0x34>
 80054ce:	f7fa fe1b 	bl	8000108 <__gnu_thumb1_case_uqi>
 80054d2:	0f06      	.short	0x0f06
 80054d4:	3d0f0f0f 	.word	0x3d0f0f0f
 80054d8:	0f0f3b34 	.word	0x0f0f3b34
 80054dc:	160f      	.short	0x160f
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80054de:	2202      	movs	r2, #2
 80054e0:	0028      	movs	r0, r5
 80054e2:	f7ff ff71 	bl	80053c8 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 80054e6:	0021      	movs	r1, r4
 80054e8:	0028      	movs	r0, r5
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <u8g_dev_ssd1306_128x64_fn+0xc4>)
 80054ec:	f7ff ff97 	bl	800541e <u8g_WriteEscSeqP>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
	u8g_SetChipSelect(u8g, dev, 0);
	return 1;
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80054f0:	0032      	movs	r2, r6
 80054f2:	0021      	movs	r1, r4
 80054f4:	0028      	movs	r0, r5
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	f000 fba6 	bl	8005c48 <u8g_dev_pb8v1_base_fn>
 80054fc:	e023      	b.n	8005546 <u8g_dev_ssd1306_128x64_fn+0x8a>
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <u8g_dev_ssd1306_128x64_fn+0xc8>)
 8005500:	0028      	movs	r0, r5
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8005502:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8005504:	f7ff ff8b 	bl	800541e <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8005508:	23b0      	movs	r3, #176	; 0xb0
 800550a:	793a      	ldrb	r2, [r7, #4]
 800550c:	0021      	movs	r1, r4
 800550e:	431a      	orrs	r2, r3
 8005510:	0028      	movs	r0, r5
 8005512:	f7ff ff79 	bl	8005408 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8005516:	2201      	movs	r2, #1
 8005518:	0021      	movs	r1, r4
 800551a:	0028      	movs	r0, r5
 800551c:	f7ff ff6e 	bl	80053fc <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8005520:	0022      	movs	r2, r4
 8005522:	0029      	movs	r1, r5
 8005524:	0038      	movs	r0, r7
 8005526:	f000 fb3d 	bl	8005ba4 <u8g_pb_WriteBuffer>
 800552a:	2800      	cmp	r0, #0
 800552c:	d00b      	beq.n	8005546 <u8g_dev_ssd1306_128x64_fn+0x8a>
        u8g_SetChipSelect(u8g, dev, 0);
 800552e:	2200      	movs	r2, #0
 8005530:	0021      	movs	r1, r4
 8005532:	0028      	movs	r0, r5
 8005534:	f7ff ff4e 	bl	80053d4 <u8g_SetChipSelect>
      break;
 8005538:	e7da      	b.n	80054f0 <u8g_dev_ssd1306_128x64_fn+0x34>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <u8g_dev_ssd1306_128x64_fn+0xcc>)
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800553c:	0021      	movs	r1, r4
 800553e:	0028      	movs	r0, r5
 8005540:	f7ff ff6d 	bl	800541e <u8g_WriteEscSeqP>
      return 1;
 8005544:	2001      	movs	r0, #1
}
 8005546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <u8g_dev_ssd1306_128x64_fn+0xd0>)
 800554a:	e7f7      	b.n	800553c <u8g_dev_ssd1306_128x64_fn+0x80>
	u8g_SetChipSelect(u8g, dev, 1);
 800554c:	0028      	movs	r0, r5
 800554e:	2201      	movs	r2, #1
 8005550:	f7ff ff40 	bl	80053d4 <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 8005554:	0021      	movs	r1, r4
 8005556:	0028      	movs	r0, r5
 8005558:	2200      	movs	r2, #0
 800555a:	f7ff ff4f 	bl	80053fc <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 800555e:	0021      	movs	r1, r4
 8005560:	2281      	movs	r2, #129	; 0x81
 8005562:	0028      	movs	r0, r5
 8005564:	f7ff ff50 	bl	8005408 <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 8005568:	9b01      	ldr	r3, [sp, #4]
 800556a:	0021      	movs	r1, r4
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	0028      	movs	r0, r5
 8005570:	f7ff ff4a 	bl	8005408 <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8005574:	2200      	movs	r2, #0
 8005576:	0021      	movs	r1, r4
 8005578:	0028      	movs	r0, r5
 800557a:	f7ff ff2b 	bl	80053d4 <u8g_SetChipSelect>
	return 1;
 800557e:	e7e1      	b.n	8005544 <u8g_dev_ssd1306_128x64_fn+0x88>
 8005580:	080074a3 	.word	0x080074a3
 8005584:	080074c9 	.word	0x080074c9
 8005588:	080074dc 	.word	0x080074dc
 800558c:	080074d1 	.word	0x080074d1

08005590 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8005590:	1843      	adds	r3, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8005592:	5c40      	ldrb	r0, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8005594:	785b      	ldrb	r3, [r3, #1]
    pos <<= 8;
 8005596:	0200      	lsls	r0, r0, #8
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8005598:	18c0      	adds	r0, r0, r3
    return pos;
 800559a:	b280      	uxth	r0, r0
}
 800559c:	4770      	bx	lr

0800559e <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 800559e:	2000      	movs	r0, #0
 80055a0:	4770      	bx	lr

080055a2 <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
 80055a2:	3029      	adds	r0, #41	; 0x29
 80055a4:	7800      	ldrb	r0, [r0, #0]
  tmp++;
 80055a6:	3001      	adds	r0, #1
  return tmp;
 80055a8:	b2c0      	uxtb	r0, r0
}
 80055aa:	4770      	bx	lr

080055ac <u8g_font_GetFormat.isra.0>:
}
 80055ac:	4770      	bx	lr

080055ae <u8g_font_GetFontGlyphStructureSize.isra.0>:
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
 80055ae:	b510      	push	{r4, lr}
 80055b0:	f7ff fffc 	bl	80055ac <u8g_font_GetFormat.isra.0>
  switch(u8g_font_GetFormat(font))
 80055b4:	22fd      	movs	r2, #253	; 0xfd
 80055b6:	2303      	movs	r3, #3
 80055b8:	4210      	tst	r0, r2
 80055ba:	d100      	bne.n	80055be <u8g_font_GetFontGlyphStructureSize.isra.0+0x10>
    case 0: return 6;
 80055bc:	18db      	adds	r3, r3, r3
}
 80055be:	0018      	movs	r0, r3
 80055c0:	bd10      	pop	{r4, pc}

080055c2 <u8g_font_GetEncoding65Pos>:
{
 80055c2:	b510      	push	{r4, lr}
    return u8g_font_get_word(font, 6);
 80055c4:	2106      	movs	r1, #6
 80055c6:	f7ff ffe3 	bl	8005590 <u8g_font_get_word>
}
 80055ca:	bd10      	pop	{r4, pc}

080055cc <u8g_font_GetEncoding97Pos>:
{
 80055cc:	b510      	push	{r4, lr}
    return u8g_font_get_word(font, 8);
 80055ce:	2108      	movs	r1, #8
 80055d0:	f7ff ffde 	bl	8005590 <u8g_font_get_word>
}
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <u8g_font_GetFontStartEncoding>:
  return u8g_font_get_byte(font, 10);
 80055d6:	7a80      	ldrb	r0, [r0, #10]
}
 80055d8:	4770      	bx	lr

080055da <u8g_font_GetFontEndEncoding>:
  return u8g_font_get_byte(font, 11);
 80055da:	7ac0      	ldrb	r0, [r0, #11]
}
 80055dc:	4770      	bx	lr

080055de <u8g_GetGlyph>:
{
 80055de:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *p = (uint8_t *)(u8g->font);
 80055e0:	6886      	ldr	r6, [r0, #8]
{
 80055e2:	b085      	sub	sp, #20
 80055e4:	7835      	ldrb	r5, [r6, #0]
 80055e6:	0004      	movs	r4, r0
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80055e8:	0028      	movs	r0, r5
{
 80055ea:	000f      	movs	r7, r1
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80055ec:	f7ff ffde 	bl	80055ac <u8g_font_GetFormat.isra.0>
 80055f0:	9002      	str	r0, [sp, #8]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80055f2:	0028      	movs	r0, r5
 80055f4:	f7ff ffdb 	bl	80055ae <u8g_font_GetFontGlyphStructureSize.isra.0>
  uint8_t mask = 255;
 80055f8:	23ff      	movs	r3, #255	; 0xff
 80055fa:	9301      	str	r3, [sp, #4]
  if ( font_format == 1 )
 80055fc:	9b02      	ldr	r3, [sp, #8]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80055fe:	9003      	str	r0, [sp, #12]
  if ( font_format == 1 )
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <u8g_GetGlyph+0x2a>
    mask = 15;
 8005604:	330e      	adds	r3, #14
 8005606:	9301      	str	r3, [sp, #4]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8005608:	0030      	movs	r0, r6
 800560a:	f7ff ffe6 	bl	80055da <u8g_font_GetFontEndEncoding>
 800560e:	9000      	str	r0, [sp, #0]
  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8005610:	0030      	movs	r0, r6
 8005612:	f7ff ffdb 	bl	80055cc <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 8005616:	2f60      	cmp	r7, #96	; 0x60
 8005618:	d90d      	bls.n	8005636 <u8g_GetGlyph+0x58>
 800561a:	2800      	cmp	r0, #0
 800561c:	d00b      	beq.n	8005636 <u8g_GetGlyph+0x58>
    start = 97;
 800561e:	2561      	movs	r5, #97	; 0x61
    p+= pos;
 8005620:	1836      	adds	r6, r6, r0
  if ( requested_encoding > end )
 8005622:	9b00      	ldr	r3, [sp, #0]
 8005624:	42bb      	cmp	r3, r7
 8005626:	d216      	bcs.n	8005656 <u8g_GetGlyph+0x78>
  u8g->glyph_dx = 0;
 8005628:	2600      	movs	r6, #0
 800562a:	61e6      	str	r6, [r4, #28]
  u8g->glyph_height = 0;
 800562c:	3401      	adds	r4, #1
 800562e:	77e6      	strb	r6, [r4, #31]
}
 8005630:	0030      	movs	r0, r6
 8005632:	b005      	add	sp, #20
 8005634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8005636:	0030      	movs	r0, r6
 8005638:	f7ff ffcd 	bl	80055d6 <u8g_font_GetFontStartEncoding>
 800563c:	0005      	movs	r5, r0
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 800563e:	0030      	movs	r0, r6
 8005640:	f7ff ffbf 	bl	80055c2 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 8005644:	2f40      	cmp	r7, #64	; 0x40
 8005646:	d904      	bls.n	8005652 <u8g_GetGlyph+0x74>
 8005648:	2800      	cmp	r0, #0
 800564a:	d002      	beq.n	8005652 <u8g_GetGlyph+0x74>
      start = 65;
 800564c:	2541      	movs	r5, #65	; 0x41
      p+= pos;
 800564e:	1836      	adds	r6, r6, r0
      start = 65;
 8005650:	e7e7      	b.n	8005622 <u8g_GetGlyph+0x44>
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8005652:	3611      	adds	r6, #17
 8005654:	e7e5      	b.n	8005622 <u8g_GetGlyph+0x44>
  if ( i <= end )
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	429d      	cmp	r5, r3
 800565a:	d8e5      	bhi.n	8005628 <u8g_GetGlyph+0x4a>
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800565c:	7833      	ldrb	r3, [r6, #0]
 800565e:	2bff      	cmp	r3, #255	; 0xff
 8005660:	d106      	bne.n	8005670 <u8g_GetGlyph+0x92>
        p += 1;
 8005662:	3601      	adds	r6, #1
      if ( i == end )
 8005664:	9b00      	ldr	r3, [sp, #0]
 8005666:	429d      	cmp	r5, r3
 8005668:	d0de      	beq.n	8005628 <u8g_GetGlyph+0x4a>
      i++;
 800566a:	3501      	adds	r5, #1
 800566c:	b2ed      	uxtb	r5, r5
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800566e:	e7f5      	b.n	800565c <u8g_GetGlyph+0x7e>
        if ( i == requested_encoding )
 8005670:	42bd      	cmp	r5, r7
 8005672:	d11e      	bne.n	80056b2 <u8g_GetGlyph+0xd4>
  switch( u8g_font_GetFormat(u8g->font) )
 8005674:	22fd      	movs	r2, #253	; 0xfd
 8005676:	9802      	ldr	r0, [sp, #8]
 8005678:	1c61      	adds	r1, r4, #1
 800567a:	4210      	tst	r0, r2
 800567c:	d109      	bne.n	8005692 <u8g_GetGlyph+0xb4>
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800567e:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8005680:	7873      	ldrb	r3, [r6, #1]
 8005682:	77cb      	strb	r3, [r1, #31]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8005684:	78f3      	ldrb	r3, [r6, #3]
 8005686:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8005688:	7933      	ldrb	r3, [r6, #4]
 800568a:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 800568c:	7973      	ldrb	r3, [r6, #5]
 800568e:	77a3      	strb	r3, [r4, #30]
      break;
 8005690:	e7ce      	b.n	8005630 <u8g_GetGlyph+0x52>
      u8g->glyph_y =  tmp & 15;
 8005692:	220f      	movs	r2, #15
 8005694:	0018      	movs	r0, r3
 8005696:	4010      	ands	r0, r2
      tmp >>= 4;
 8005698:	091b      	lsrs	r3, r3, #4
      u8g->glyph_y-=2;
 800569a:	3802      	subs	r0, #2
 800569c:	77a0      	strb	r0, [r4, #30]
      u8g->glyph_x =  tmp;
 800569e:	7763      	strb	r3, [r4, #29]
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80056a0:	7873      	ldrb	r3, [r6, #1]
      u8g->glyph_height =  tmp & 15;
 80056a2:	401a      	ands	r2, r3
      tmp >>= 4;
 80056a4:	091b      	lsrs	r3, r3, #4
      u8g->glyph_height =  tmp & 15;
 80056a6:	77ca      	strb	r2, [r1, #31]
      u8g->glyph_width =  tmp;
 80056a8:	77e3      	strb	r3, [r4, #31]
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 80056aa:	78b3      	ldrb	r3, [r6, #2]
      tmp >>= 4;
 80056ac:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 80056ae:	7723      	strb	r3, [r4, #28]
      break;
 80056b0:	e7be      	b.n	8005630 <u8g_GetGlyph+0x52>
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 80056b2:	78b3      	ldrb	r3, [r6, #2]
 80056b4:	9a01      	ldr	r2, [sp, #4]
 80056b6:	4013      	ands	r3, r2
 80056b8:	9a03      	ldr	r2, [sp, #12]
 80056ba:	189b      	adds	r3, r3, r2
        p += data_structure_size;
 80056bc:	18f6      	adds	r6, r6, r3
 80056be:	e7d1      	b.n	8005664 <u8g_GetGlyph+0x86>

080056c0 <u8g_draw_glyph>:
{
 80056c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c2:	000f      	movs	r7, r1
 80056c4:	b087      	sub	sp, #28
 80056c6:	0019      	movs	r1, r3
 80056c8:	0005      	movs	r5, r0
 80056ca:	0014      	movs	r4, r2
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80056cc:	f7ff ff87 	bl	80055de <u8g_GetGlyph>
 80056d0:	1e06      	subs	r6, r0, #0
    if ( g == NULL  )
 80056d2:	d01b      	beq.n	800570c <u8g_draw_glyph+0x4c>
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80056d4:	68ab      	ldr	r3, [r5, #8]
  x += u8g->glyph_x;
 80056d6:	7f69      	ldrb	r1, [r5, #29]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	187f      	adds	r7, r7, r1
 80056dc:	9302      	str	r3, [sp, #8]
  w = u8g->glyph_width;
 80056de:	7feb      	ldrb	r3, [r5, #31]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80056e0:	7faa      	ldrb	r2, [r5, #30]
  w = u8g->glyph_width;
 80056e2:	9304      	str	r3, [sp, #16]
  h = u8g->glyph_height;
 80056e4:	1c6b      	adds	r3, r5, #1
 80056e6:	7fdb      	ldrb	r3, [r3, #31]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80056e8:	0028      	movs	r0, r5
  h = u8g->glyph_height;
 80056ea:	9303      	str	r3, [sp, #12]
  x += u8g->glyph_x;
 80056ec:	b2fb      	uxtb	r3, r7
 80056ee:	9305      	str	r3, [sp, #20]
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	9905      	ldr	r1, [sp, #20]
 80056f4:	1ae4      	subs	r4, r4, r3
 80056f6:	1aa4      	subs	r4, r4, r2
 80056f8:	b2e4      	uxtb	r4, r4
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	0022      	movs	r2, r4
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	f7ff fe34 	bl	800536c <u8g_IsBBXIntersection>
 8005704:	2800      	cmp	r0, #0
 8005706:	d103      	bne.n	8005710 <u8g_draw_glyph+0x50>
  return u8g->glyph_dx;
 8005708:	201c      	movs	r0, #28
 800570a:	5628      	ldrsb	r0, [r5, r0]
}
 800570c:	b007      	add	sp, #28
 800570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8005710:	9802      	ldr	r0, [sp, #8]
 8005712:	f7ff ff4c 	bl	80055ae <u8g_font_GetFontGlyphStructureSize.isra.0>
 8005716:	1833      	adds	r3, r6, r0
 8005718:	9302      	str	r3, [sp, #8]
  w += 7;
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	3307      	adds	r3, #7
 800571e:	b2db      	uxtb	r3, r3
  w /= 8;
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	9304      	str	r3, [sp, #16]
  for( j = 0; j < h; j++ )
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	18e3      	adds	r3, r4, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	42a3      	cmp	r3, r4
 8005730:	d0ea      	beq.n	8005708 <u8g_draw_glyph+0x48>
    ix = x;
 8005732:	9f05      	ldr	r7, [sp, #20]
  for( j = 0; j < h; j++ )
 8005734:	9e02      	ldr	r6, [sp, #8]
 8005736:	e00a      	b.n	800574e <u8g_draw_glyph+0x8e>
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8005738:	7833      	ldrb	r3, [r6, #0]
 800573a:	0039      	movs	r1, r7
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	0022      	movs	r2, r4
 8005740:	2300      	movs	r3, #0
 8005742:	0028      	movs	r0, r5
 8005744:	f000 f9ab 	bl	8005a9e <u8g_Draw8Pixel>
      ix+=8;
 8005748:	3708      	adds	r7, #8
      data++;
 800574a:	3601      	adds	r6, #1
      ix+=8;
 800574c:	b2ff      	uxtb	r7, r7
    for( i = 0; i < w; i++ )
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	9a04      	ldr	r2, [sp, #16]
 8005752:	189b      	adds	r3, r3, r2
 8005754:	429e      	cmp	r6, r3
 8005756:	d1ef      	bne.n	8005738 <u8g_draw_glyph+0x78>
    iy++;
 8005758:	3401      	adds	r4, #1
 800575a:	9602      	str	r6, [sp, #8]
 800575c:	b2e4      	uxtb	r4, r4
  for( j = 0; j < h; j++ )
 800575e:	e7e5      	b.n	800572c <u8g_draw_glyph+0x6c>

08005760 <u8g_DrawStr>:
{
 8005760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005762:	001d      	movs	r5, r3
  y += u8g->font_calc_vref(u8g);
 8005764:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005766:	0017      	movs	r7, r2
 8005768:	0006      	movs	r6, r0
 800576a:	000c      	movs	r4, r1
  y += u8g->font_calc_vref(u8g);
 800576c:	4798      	blx	r3
 800576e:	19c0      	adds	r0, r0, r7
  u8g_uint_t t = 0;
 8005770:	2700      	movs	r7, #0
  y += u8g->font_calc_vref(u8g);
 8005772:	b2c3      	uxtb	r3, r0
 8005774:	9301      	str	r3, [sp, #4]
  while( *s != '\0' )
 8005776:	782b      	ldrb	r3, [r5, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <u8g_DrawStr+0x20>
}
 800577c:	0038      	movs	r0, r7
 800577e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d = u8g_draw_glyph(u8g, x, y, *s);
 8005780:	0021      	movs	r1, r4
 8005782:	0030      	movs	r0, r6
 8005784:	9a01      	ldr	r2, [sp, #4]
 8005786:	f7ff ff9b 	bl	80056c0 <u8g_draw_glyph>
    x += d;
 800578a:	b2c0      	uxtb	r0, r0
 800578c:	1904      	adds	r4, r0, r4
    t += d;
 800578e:	19c7      	adds	r7, r0, r7
    x += d;
 8005790:	b2e4      	uxtb	r4, r4
    t += d;
 8005792:	b2ff      	uxtb	r7, r7
    s++;
 8005794:	3501      	adds	r5, #1
 8005796:	e7ee      	b.n	8005776 <u8g_DrawStr+0x16>

08005798 <u8g_UpdateRefHeight>:
  if ( u8g->font == NULL )
 8005798:	6883      	ldr	r3, [r0, #8]
{
 800579a:	b510      	push	{r4, lr}
  if ( u8g->font == NULL )
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01b      	beq.n	80057d8 <u8g_UpdateRefHeight+0x40>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 80057a0:	0002      	movs	r2, r0
 80057a2:	0001      	movs	r1, r0
 80057a4:	3228      	adds	r2, #40	; 0x28
 80057a6:	7814      	ldrb	r4, [r2, #0]
 80057a8:	3129      	adds	r1, #41	; 0x29
 80057aa:	3202      	adds	r2, #2
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d114      	bne.n	80057da <u8g_UpdateRefHeight+0x42>
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 80057b0:	795c      	ldrb	r4, [r3, #5]
 80057b2:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 80057b4:	7b1b      	ldrb	r3, [r3, #12]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 80057b6:	7013      	strb	r3, [r2, #0]
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 80057b8:	2300      	movs	r3, #0
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	56cb      	ldrsb	r3, [r1, r3]
 80057be:	b252      	sxtb	r2, r2
 80057c0:	1a9b      	subs	r3, r3, r2
  if ( u8g->font_line_spacing_factor != 64 )
 80057c2:	0002      	movs	r2, r0
 80057c4:	322b      	adds	r2, #43	; 0x2b
 80057c6:	7812      	ldrb	r2, [r2, #0]
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 80057c8:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 80057ca:	2a40      	cmp	r2, #64	; 0x40
 80057cc:	d002      	beq.n	80057d4 <u8g_UpdateRefHeight+0x3c>
    ls &= 255;
 80057ce:	b2db      	uxtb	r3, r3
    ls *= u8g->font_line_spacing_factor;
 80057d0:	4353      	muls	r3, r2
    ls >>= 6;
 80057d2:	099b      	lsrs	r3, r3, #6
  u8g->line_spacing = ls;
 80057d4:	302c      	adds	r0, #44	; 0x2c
 80057d6:	7003      	strb	r3, [r0, #0]
}
 80057d8:	bd10      	pop	{r4, pc}
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 80057da:	2c01      	cmp	r4, #1
 80057dc:	d103      	bne.n	80057e6 <u8g_UpdateRefHeight+0x4e>
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 80057de:	7bdc      	ldrb	r4, [r3, #15]
 80057e0:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 80057e2:	7c1b      	ldrb	r3, [r3, #16]
 80057e4:	e7e7      	b.n	80057b6 <u8g_UpdateRefHeight+0x1e>
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 80057e6:	7b5c      	ldrb	r4, [r3, #13]
 80057e8:	700c      	strb	r4, [r1, #0]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 80057ea:	7b9b      	ldrb	r3, [r3, #14]
 80057ec:	e7e3      	b.n	80057b6 <u8g_UpdateRefHeight+0x1e>

080057ee <u8g_SetFontRefHeightText>:
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
 80057ee:	0003      	movs	r3, r0
 80057f0:	2200      	movs	r2, #0
{
 80057f2:	b510      	push	{r4, lr}
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
 80057f4:	3328      	adds	r3, #40	; 0x28
 80057f6:	701a      	strb	r2, [r3, #0]
  u8g_UpdateRefHeight(u8g);
 80057f8:	f7ff ffce 	bl	8005798 <u8g_UpdateRefHeight>
}
 80057fc:	bd10      	pop	{r4, pc}
	...

08005800 <u8g_SetFontPosBaseline>:
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8005800:	4b01      	ldr	r3, [pc, #4]	; (8005808 <u8g_SetFontPosBaseline+0x8>)
 8005802:	6243      	str	r3, [r0, #36]	; 0x24
}
 8005804:	4770      	bx	lr
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	0800559f 	.word	0x0800559f

0800580c <u8g_SetFontPosTop>:

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <u8g_SetFontPosTop+0x8>)
 800580e:	6243      	str	r3, [r0, #36]	; 0x24
}
 8005810:	4770      	bx	lr
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	080055a3 	.word	0x080055a3

08005818 <u8g_SetFont>:
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8005818:	6883      	ldr	r3, [r0, #8]
{
 800581a:	b510      	push	{r4, lr}
 800581c:	0004      	movs	r4, r0
  if ( u8g->font != font )
 800581e:	428b      	cmp	r3, r1
 8005820:	d004      	beq.n	800582c <u8g_SetFont+0x14>
  {
    u8g->font = font;
 8005822:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 8005824:	f7ff ffb8 	bl	8005798 <u8g_UpdateRefHeight>
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8005828:	4b01      	ldr	r3, [pc, #4]	; (8005830 <u8g_SetFont+0x18>)
 800582a:	6263      	str	r3, [r4, #36]	; 0x24
    u8g_SetFontPosBaseline(u8g);
  }
}
 800582c:	bd10      	pop	{r4, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	0800559f 	.word	0x0800559f

08005834 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	b087      	sub	sp, #28
 8005838:	0015      	movs	r5, r2

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800583a:	1a5f      	subs	r7, r3, r1
{
 800583c:	aa0c      	add	r2, sp, #48	; 0x30
 800583e:	000c      	movs	r4, r1
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	9004      	str	r0, [sp, #16]
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8005844:	b2ff      	uxtb	r7, r7
 8005846:	4299      	cmp	r1, r3
 8005848:	d901      	bls.n	800584e <u8g_DrawLine+0x1a>
 800584a:	1acf      	subs	r7, r1, r3
 800584c:	b2ff      	uxtb	r7, r7
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800584e:	4295      	cmp	r5, r2
 8005850:	d910      	bls.n	8005874 <u8g_DrawLine+0x40>
 8005852:	1aae      	subs	r6, r5, r2
 8005854:	b2f6      	uxtb	r6, r6

  if ( dy > dx ) 
 8005856:	42b7      	cmp	r7, r6
 8005858:	d317      	bcc.n	800588a <u8g_DrawLine+0x56>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
 800585a:	0031      	movs	r1, r6
 800585c:	003e      	movs	r6, r7
 800585e:	000f      	movs	r7, r1
 8005860:	429c      	cmp	r4, r3
 8005862:	d905      	bls.n	8005870 <u8g_DrawLine+0x3c>
 8005864:	0029      	movs	r1, r5
 8005866:	0015      	movs	r5, r2
 8005868:	000a      	movs	r2, r1
 800586a:	0021      	movs	r1, r4
 800586c:	001c      	movs	r4, r3
 800586e:	000b      	movs	r3, r1
  uint8_t swapxy = 0;
 8005870:	2100      	movs	r1, #0
 8005872:	e011      	b.n	8005898 <u8g_DrawLine+0x64>
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8005874:	1b56      	subs	r6, r2, r5
 8005876:	b2f6      	uxtb	r6, r6
  if ( dy > dx ) 
 8005878:	42b7      	cmp	r7, r6
 800587a:	d2ee      	bcs.n	800585a <u8g_DrawLine+0x26>
 800587c:	0019      	movs	r1, r3
 800587e:	0013      	movs	r3, r2
 8005880:	000a      	movs	r2, r1
 8005882:	0021      	movs	r1, r4
 8005884:	002c      	movs	r4, r5
 8005886:	000d      	movs	r5, r1
 8005888:	e005      	b.n	8005896 <u8g_DrawLine+0x62>
 800588a:	0029      	movs	r1, r5
 800588c:	001d      	movs	r5, r3
 800588e:	000b      	movs	r3, r1
 8005890:	0021      	movs	r1, r4
 8005892:	0014      	movs	r4, r2
 8005894:	000a      	movs	r2, r1
    swapxy = 1;
 8005896:	2101      	movs	r1, #1
  uint8_t swapxy = 0;
 8005898:	9101      	str	r1, [sp, #4]
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
 800589a:	0871      	lsrs	r1, r6, #1
 800589c:	b249      	sxtb	r1, r1
 800589e:	9102      	str	r1, [sp, #8]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80058a0:	2101      	movs	r1, #1
 80058a2:	9103      	str	r1, [sp, #12]
 80058a4:	4295      	cmp	r5, r2
 80058a6:	d302      	bcc.n	80058ae <u8g_DrawLine+0x7a>
 80058a8:	2201      	movs	r2, #1
 80058aa:	4252      	negs	r2, r2
 80058ac:	9203      	str	r2, [sp, #12]
  y = y1;

#ifndef  U8G_16BIT
  if ( x2 == 255 )
 80058ae:	1c1a      	adds	r2, r3, #0
 80058b0:	2bfe      	cmp	r3, #254	; 0xfe
 80058b2:	d901      	bls.n	80058b8 <u8g_DrawLine+0x84>
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <u8g_DrawLine+0xc8>)
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	b2d3      	uxtb	r3, r2
 80058ba:	9305      	str	r3, [sp, #20]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 80058bc:	9b05      	ldr	r3, [sp, #20]
 80058be:	429c      	cmp	r4, r3
 80058c0:	d901      	bls.n	80058c6 <u8g_DrawLine+0x92>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
 80058c2:	b007      	add	sp, #28
 80058c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( swapxy == 0 ) 
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d114      	bne.n	80058f6 <u8g_DrawLine+0xc2>
      u8g_DrawPixel(u8g, x, y); 
 80058cc:	002a      	movs	r2, r5
 80058ce:	0021      	movs	r1, r4
      u8g_DrawPixel(u8g, y, x); 
 80058d0:	9804      	ldr	r0, [sp, #16]
 80058d2:	f000 f8dd 	bl	8005a90 <u8g_DrawPixel>
    err -= (uint8_t)dy;
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	1bda      	subs	r2, r3, r7
 80058da:	b251      	sxtb	r1, r2
 80058dc:	b2d3      	uxtb	r3, r2
 80058de:	9102      	str	r1, [sp, #8]
    if ( err < 0 ) 
 80058e0:	0612      	lsls	r2, r2, #24
 80058e2:	d505      	bpl.n	80058f0 <u8g_DrawLine+0xbc>
      y += (u8g_uint_t)ystep;
 80058e4:	9a03      	ldr	r2, [sp, #12]
      err += (u8g_uint_t)dx;
 80058e6:	199b      	adds	r3, r3, r6
      y += (u8g_uint_t)ystep;
 80058e8:	18ad      	adds	r5, r5, r2
      err += (u8g_uint_t)dx;
 80058ea:	b25b      	sxtb	r3, r3
      y += (u8g_uint_t)ystep;
 80058ec:	b2ed      	uxtb	r5, r5
      err += (u8g_uint_t)dx;
 80058ee:	9302      	str	r3, [sp, #8]
  for( x = x1; x <= x2; x++ )
 80058f0:	3401      	adds	r4, #1
 80058f2:	b2e4      	uxtb	r4, r4
 80058f4:	e7e2      	b.n	80058bc <u8g_DrawLine+0x88>
      u8g_DrawPixel(u8g, y, x); 
 80058f6:	0022      	movs	r2, r4
 80058f8:	0029      	movs	r1, r5
 80058fa:	e7e9      	b.n	80058d0 <u8g_DrawLine+0x9c>
 80058fc:	080074e5 	.word	0x080074e5

08005900 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8005900:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 8005902:	680c      	ldr	r4, [r1, #0]
 8005904:	47a0      	blx	r4
}
 8005906:	bd10      	pop	{r4, pc}

08005908 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	0004      	movs	r4, r0
 800590c:	000d      	movs	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800590e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005910:	2002      	movs	r0, #2
 8005912:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8005914:	0029      	movs	r1, r5
 8005916:	220a      	movs	r2, #10
 8005918:	2300      	movs	r3, #0
 800591a:	0020      	movs	r0, r4
 800591c:	f7ff fff0 	bl	8005900 <u8g_call_dev_fn>
 8005920:	0005      	movs	r5, r0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8005922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005924:	2003      	movs	r0, #3
 8005926:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8005928:	2000      	movs	r0, #0
 800592a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800592c:	4798      	blx	r3
  return r;
}
 800592e:	0028      	movs	r0, r5
 8005930:	bd70      	pop	{r4, r5, r6, pc}

08005932 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	0004      	movs	r4, r0
 8005936:	000d      	movs	r5, r1
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8005938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800593a:	2002      	movs	r0, #2
 800593c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800593e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005940:	2001      	movs	r0, #1
 8005942:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8005944:	0029      	movs	r1, r5
 8005946:	2300      	movs	r3, #0
 8005948:	2214      	movs	r2, #20
 800594a:	0020      	movs	r0, r4
 800594c:	f7ff ffd8 	bl	8005900 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8005950:	0023      	movs	r3, r4
 8005952:	0029      	movs	r1, r5
 8005954:	2217      	movs	r2, #23
 8005956:	0020      	movs	r0, r4
 8005958:	3338      	adds	r3, #56	; 0x38
 800595a:	f7ff ffd1 	bl	8005900 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800595e:	2000      	movs	r0, #0
 8005960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005962:	4798      	blx	r3
}
 8005964:	bd70      	pop	{r4, r5, r6, pc}

08005966 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8005966:	b570      	push	{r4, r5, r6, lr}
 8005968:	0004      	movs	r4, r0
 800596a:	000e      	movs	r6, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800596c:	2002      	movs	r0, #2
 800596e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005970:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8005972:	2001      	movs	r0, #1
 8005974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005976:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8005978:	2300      	movs	r3, #0
 800597a:	2215      	movs	r2, #21
 800597c:	0031      	movs	r1, r6
 800597e:	0020      	movs	r0, r4
 8005980:	f7ff ffbe 	bl	8005900 <u8g_call_dev_fn>
 8005984:	1e05      	subs	r5, r0, #0
  if ( r != 0 )
 8005986:	d006      	beq.n	8005996 <u8g_NextPageLL+0x30>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8005988:	0023      	movs	r3, r4
 800598a:	2217      	movs	r2, #23
 800598c:	0031      	movs	r1, r6
 800598e:	0020      	movs	r0, r4
 8005990:	3338      	adds	r3, #56	; 0x38
 8005992:	f7ff ffb5 	bl	8005900 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8005996:	2000      	movs	r0, #0
 8005998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800599a:	4798      	blx	r3
  return r;
}
 800599c:	0028      	movs	r0, r5
 800599e:	bd70      	pop	{r4, r5, r6, pc}

080059a0 <u8g_DrawPixelLL>:
{  
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
}

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
 80059a0:	b510      	push	{r4, lr}
 80059a2:	001c      	movs	r4, r3
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 80059a4:	0003      	movs	r3, r0
 80059a6:	332d      	adds	r3, #45	; 0x2d
 80059a8:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80059aa:	705c      	strb	r4, [r3, #1]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
 80059ac:	2232      	movs	r2, #50	; 0x32
 80059ae:	f7ff ffa7 	bl	8005900 <u8g_call_dev_fn>
}
 80059b2:	bd10      	pop	{r4, pc}

080059b4 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80059b4:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 80059b6:	466b      	mov	r3, sp
 80059b8:	1ddc      	adds	r4, r3, #7
 80059ba:	0023      	movs	r3, r4
 80059bc:	2246      	movs	r2, #70	; 0x46
 80059be:	f7ff ff9f 	bl	8005900 <u8g_call_dev_fn>
  return r;
 80059c2:	7820      	ldrb	r0, [r4, #0]
}
 80059c4:	bd16      	pop	{r1, r2, r4, pc}

080059c6 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80059c6:	b513      	push	{r0, r1, r4, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 80059c8:	466b      	mov	r3, sp
 80059ca:	1ddc      	adds	r4, r3, #7
 80059cc:	0023      	movs	r3, r4
 80059ce:	2247      	movs	r2, #71	; 0x47
 80059d0:	f7ff ff96 	bl	8005900 <u8g_call_dev_fn>
  return r;
 80059d4:	7820      	ldrb	r0, [r4, #0]
}
 80059d6:	bd16      	pop	{r1, r2, r4, pc}

080059d8 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80059d8:	b510      	push	{r4, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80059da:	2300      	movs	r3, #0
 80059dc:	2248      	movs	r2, #72	; 0x48
 80059de:	f7ff ff8f 	bl	8005900 <u8g_call_dev_fn>
}
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80059e4:	b510      	push	{r4, lr}
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80059e6:	6841      	ldr	r1, [r0, #4]
{
 80059e8:	0004      	movs	r4, r0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80059ea:	f7ff ffe3 	bl	80059b4 <u8g_GetWidthLL>
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80059ee:	6861      	ldr	r1, [r4, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80059f0:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80059f2:	0020      	movs	r0, r4
 80059f4:	f7ff ffe7 	bl	80059c6 <u8g_GetHeightLL>
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80059f8:	6861      	ldr	r1, [r4, #4]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80059fa:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80059fc:	0020      	movs	r0, r4
 80059fe:	f7ff ffeb 	bl	80059d8 <u8g_GetModeLL>
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8005a02:	0023      	movs	r3, r4
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8005a04:	74e0      	strb	r0, [r4, #19]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8005a06:	2217      	movs	r2, #23
 8005a08:	0020      	movs	r0, r4
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	3338      	adds	r3, #56	; 0x38
 8005a0e:	f7ff ff77 	bl	8005900 <u8g_call_dev_fn>
}
 8005a12:	bd10      	pop	{r4, pc}

08005a14 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 8005a14:	b510      	push	{r4, lr}
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8005a16:	6841      	ldr	r1, [r0, #4]
{
 8005a18:	0004      	movs	r4, r0
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8005a1a:	f7ff ff75 	bl	8005908 <u8g_InitLL>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d003      	beq.n	8005a2a <u8g_Begin+0x16>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 8005a22:	0020      	movs	r0, r4
 8005a24:	f7ff ffde 	bl	80059e4 <u8g_UpdateDimension>
  return 1;
 8005a28:	2001      	movs	r0, #1
}
 8005a2a:	bd10      	pop	{r4, pc}

08005a2c <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	0017      	movs	r7, r2
  u8g->cursor_encoding = 34;
 8005a30:	2222      	movs	r2, #34	; 0x22
 8005a32:	7482      	strb	r2, [r0, #18]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8005a34:	0002      	movs	r2, r0
  u8g->font = NULL;
 8005a36:	2600      	movs	r6, #0
  u8g->cursor_fg_color = 1;
 8005a38:	2301      	movs	r3, #1
{
 8005a3a:	0004      	movs	r4, r0
  u8g->arg_pixel.color = idx;
 8005a3c:	3231      	adds	r2, #49	; 0x31
  u8g->font = NULL;
 8005a3e:	6086      	str	r6, [r0, #8]
  u8g->cursor_font = NULL;
 8005a40:	60c6      	str	r6, [r0, #12]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8005a42:	6186      	str	r6, [r0, #24]
  u8g->cursor_fg_color = 1;
 8005a44:	8203      	strh	r3, [r0, #16]
  u8g->arg_pixel.color = idx;
 8005a46:	7013      	strb	r3, [r2, #0]
{
 8005a48:	000d      	movs	r5, r1
  u8g_SetFontPosBaseline(u8g);
 8005a4a:	f7ff fed9 	bl	8005800 <u8g_SetFontPosBaseline>
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <u8g_InitComFn+0x3c>)
  return u8g_Begin(u8g);
 8005a50:	0020      	movs	r0, r4
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8005a52:	62a3      	str	r3, [r4, #40]	; 0x28
  u8g->line_spacing = 0;
 8005a54:	0023      	movs	r3, r4
 8005a56:	332c      	adds	r3, #44	; 0x2c
 8005a58:	701e      	strb	r6, [r3, #0]
  u8g->state_cb = u8g_state_dummy_cb;
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <u8g_InitComFn+0x40>)
  u8g->dev = dev;
 8005a5c:	6065      	str	r5, [r4, #4]
  u8g->state_cb = u8g_state_dummy_cb;
 8005a5e:	6363      	str	r3, [r4, #52]	; 0x34
  u8g->dev->com_fn = com_fn;
 8005a60:	60af      	str	r7, [r5, #8]
  return u8g_Begin(u8g);
 8005a62:	f7ff ffd7 	bl	8005a14 <u8g_Begin>
}
 8005a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a68:	40000001 	.word	0x40000001
 8005a6c:	0800600d 	.word	0x0800600d

08005a70 <u8g_FirstPage>:
{
 8005a70:	b510      	push	{r4, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 8005a72:	6841      	ldr	r1, [r0, #4]
 8005a74:	f7ff ff5d 	bl	8005932 <u8g_FirstPageLL>
}
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <u8g_NextPage>:
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8005a7a:	6983      	ldr	r3, [r0, #24]
{
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	0004      	movs	r4, r0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d000      	beq.n	8005a86 <u8g_NextPage+0xc>
    u8g->cursor_fn(u8g);
 8005a84:	4798      	blx	r3
  return u8g_NextPageLL(u8g, u8g->dev);
 8005a86:	0020      	movs	r0, r4
 8005a88:	6861      	ldr	r1, [r4, #4]
 8005a8a:	f7ff ff6c 	bl	8005966 <u8g_NextPageLL>
}
 8005a8e:	bd10      	pop	{r4, pc}

08005a90 <u8g_DrawPixel>:
{
 8005a90:	b510      	push	{r4, lr}
 8005a92:	0013      	movs	r3, r2
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
 8005a94:	000a      	movs	r2, r1
 8005a96:	6841      	ldr	r1, [r0, #4]
 8005a98:	f7ff ff82 	bl	80059a0 <u8g_DrawPixelLL>
}
 8005a9c:	bd10      	pop	{r4, pc}

08005a9e <u8g_Draw8Pixel>:
{
 8005a9e:	b570      	push	{r4, r5, r6, lr}
 8005aa0:	001d      	movs	r5, r3
 8005aa2:	ab04      	add	r3, sp, #16
 8005aa4:	781c      	ldrb	r4, [r3, #0]
  arg->x = x;
 8005aa6:	0003      	movs	r3, r0
{
 8005aa8:	000e      	movs	r6, r1
  arg->x = x;
 8005aaa:	332d      	adds	r3, #45	; 0x2d
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8005aac:	6841      	ldr	r1, [r0, #4]
  arg->x = x;
 8005aae:	701e      	strb	r6, [r3, #0]
  arg->y = y;
 8005ab0:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8005ab2:	70dd      	strb	r5, [r3, #3]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8005ab4:	223b      	movs	r2, #59	; 0x3b
  arg->pixel = pixel;
 8005ab6:	709c      	strb	r4, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8005ab8:	f7ff ff22 	bl	8005900 <u8g_call_dev_fn>
}
 8005abc:	bd70      	pop	{r4, r5, r6, pc}

08005abe <u8g_SetColorIndex>:
  u8g->arg_pixel.color = idx;
 8005abe:	3031      	adds	r0, #49	; 0x31
 8005ac0:	7001      	strb	r1, [r0, #0]
  /*u8g->color_index = idx; */ /* must be removed */
}
 8005ac2:	4770      	bx	lr

08005ac4 <u8g_GetDefaultForegroundColor>:
}

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
 8005ac4:	7cc3      	ldrb	r3, [r0, #19]
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
 8005ac6:	20ff      	movs	r0, #255	; 0xff
  if ( mode == U8G_MODE_R3G3B2 ) 
 8005ac8:	2b28      	cmp	r3, #40	; 0x28
 8005aca:	d003      	beq.n	8005ad4 <u8g_GetDefaultForegroundColor+0x10>
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
  /* if ( u8g.getMode() == U8G_MODE_BW ) */
  return 1;         /* pixel on */
 8005acc:	38fe      	subs	r0, #254	; 0xfe
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d100      	bne.n	8005ad4 <u8g_GetDefaultForegroundColor+0x10>
    return 3;         /* max intensity */
 8005ad2:	3002      	adds	r0, #2
}
 8005ad4:	4770      	bx	lr

08005ad6 <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	0004      	movs	r4, r0
  if ( u8g->mode == U8G_MODE_HICOLOR )
 8005ada:	7cc3      	ldrb	r3, [r0, #19]
 8005adc:	3431      	adds	r4, #49	; 0x31
 8005ade:	2b30      	cmp	r3, #48	; 0x30
 8005ae0:	d104      	bne.n	8005aec <u8g_SetDefaultForegroundColor+0x16>
  {
    u8g->arg_pixel.color = 0x0ff;
 8005ae2:	33cf      	adds	r3, #207	; 0xcf
    u8g->arg_pixel.hi_color = 0x0ff;
 8005ae4:	3032      	adds	r0, #50	; 0x32
    u8g->arg_pixel.color = 0x0ff;
 8005ae6:	7023      	strb	r3, [r4, #0]
    u8g->arg_pixel.hi_color = 0x0ff;
 8005ae8:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
 8005aea:	bd10      	pop	{r4, pc}
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
 8005aec:	f7ff ffea 	bl	8005ac4 <u8g_GetDefaultForegroundColor>
  u8g->arg_pixel.color = idx;
 8005af0:	7020      	strb	r0, [r4, #0]
}
 8005af2:	e7fa      	b.n	8005aea <u8g_SetDefaultForegroundColor+0x14>

08005af4 <u8g_SetDefaultBackgroundColor>:
  u8g->arg_pixel.color = idx;
 8005af4:	2300      	movs	r3, #0
 8005af6:	3031      	adds	r0, #49	; 0x31
 8005af8:	7003      	strb	r3, [r0, #0]
}

void u8g_SetDefaultBackgroundColor(u8g_t *u8g)
{
  u8g_SetColorIndex(u8g, u8g_GetDefaultBackgroundColor(u8g));         /* pixel on / black */
}
 8005afa:	4770      	bx	lr

08005afc <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8005afc:	2200      	movs	r2, #0
  p->page_y1 = p->page_height;
  p->page_y1--;
 8005afe:	7803      	ldrb	r3, [r0, #0]
  p->page_y0 = 0;
 8005b00:	7082      	strb	r2, [r0, #2]
  p->page_y1--;
 8005b02:	3b01      	subs	r3, #1
 8005b04:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 8005b06:	7102      	strb	r2, [r0, #4]
}
 8005b08:	4770      	bx	lr

08005b0a <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8005b0a:	b510      	push	{r4, lr}
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8005b0c:	7802      	ldrb	r2, [r0, #0]
 8005b0e:	7881      	ldrb	r1, [r0, #2]
  if ( p->page_y0 >= p->total_height )
 8005b10:	7844      	ldrb	r4, [r0, #1]
  p->page_y0 += p->page_height;
 8005b12:	1851      	adds	r1, r2, r1
 8005b14:	b2c9      	uxtb	r1, r1
{
 8005b16:	0003      	movs	r3, r0
  p->page_y0 += p->page_height;
 8005b18:	7081      	strb	r1, [r0, #2]
    return 0;
 8005b1a:	2000      	movs	r0, #0
  if ( p->page_y0 >= p->total_height )
 8005b1c:	42a1      	cmp	r1, r4
 8005b1e:	d20b      	bcs.n	8005b38 <u8g_page_Next+0x2e>
  p->page++;
 8005b20:	7919      	ldrb	r1, [r3, #4]
 8005b22:	3101      	adds	r1, #1
 8005b24:	7119      	strb	r1, [r3, #4]
  y1 = p->page_y1;
 8005b26:	78d9      	ldrb	r1, [r3, #3]
  y1 += p->page_height;
 8005b28:	1852      	adds	r2, r2, r1
 8005b2a:	b2d2      	uxtb	r2, r2
  if ( y1 >= p->total_height )
 8005b2c:	4294      	cmp	r4, r2
 8005b2e:	d801      	bhi.n	8005b34 <u8g_page_Next+0x2a>
  {
    y1 = p->total_height;
    y1--;
 8005b30:	3c01      	subs	r4, #1
 8005b32:	b2e2      	uxtb	r2, r4
  }
  p->page_y1 = y1;
  
  return 1;
 8005b34:	2001      	movs	r0, #1
  p->page_y1 = y1;
 8005b36:	70da      	strb	r2, [r3, #3]
}
 8005b38:	bd10      	pop	{r4, pc}

08005b3a <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8005b3a:	b510      	push	{r4, lr}
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
  do
  {
    *ptr++ = 0;
 8005b3c:	2100      	movs	r1, #0
  end_ptr += b->width;
 8005b3e:	7942      	ldrb	r2, [r0, #5]
    *ptr++ = 0;
 8005b40:	6880      	ldr	r0, [r0, #8]
 8005b42:	f000 fa98 	bl	8006076 <memset>
  } while( ptr != end_ptr );
}
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8005b48:	b530      	push	{r4, r5, lr}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8005b4a:	2400      	movs	r4, #0
 8005b4c:	0025      	movs	r5, r4
 8005b4e:	78c3      	ldrb	r3, [r0, #3]
 8005b50:	428b      	cmp	r3, r1
 8005b52:	4165      	adcs	r5, r4
  c2 = v1 >= pb->p.page_y0;
 8005b54:	7883      	ldrb	r3, [r0, #2]
  c3 = v0 > v1;
 8005b56:	428a      	cmp	r2, r1
 8005b58:	4189      	sbcs	r1, r1
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
  c1 |= c3;
 8005b5a:	0028      	movs	r0, r5
  c2 = v1 >= pb->p.page_y0;
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	4164      	adcs	r4, r4
  c3 = v0 > v1;
 8005b60:	4249      	negs	r1, r1
  c1 |= c3;
 8005b62:	4308      	orrs	r0, r1
 8005b64:	4020      	ands	r0, r4
 8005b66:	4029      	ands	r1, r5
  return c1 & 1;
 8005b68:	4308      	orrs	r0, r1
}
 8005b6a:	bd30      	pop	{r4, r5, pc}

08005b6c <u8g_pb_GetPageBox>:
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 8005b70:	7883      	ldrb	r3, [r0, #2]
 8005b72:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
  box->x1--;
 8005b74:	7943      	ldrb	r3, [r0, #5]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8005b7a:	78c3      	ldrb	r3, [r0, #3]
 8005b7c:	70cb      	strb	r3, [r1, #3]
}
 8005b7e:	4770      	bx	lr

08005b80 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8005b80:	b510      	push	{r4, lr}
 8005b82:	000b      	movs	r3, r1
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8005b84:	7849      	ldrb	r1, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8005b86:	78db      	ldrb	r3, [r3, #3]
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8005b88:	000a      	movs	r2, r1
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	b2d2      	uxtb	r2, r2
  switch( arg_pixel->dir )
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d005      	beq.n	8005b9e <u8g_pb_Is8PixelVisible+0x1e>
 8005b92:	000a      	movs	r2, r1
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d102      	bne.n	8005b9e <u8g_pb_Is8PixelVisible+0x1e>
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8005b98:	000b      	movs	r3, r1
 8005b9a:	3b08      	subs	r3, #8
 8005b9c:	b2d9      	uxtb	r1, r3
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8005b9e:	f7ff ffd3 	bl	8005b48 <u8g_pb_IsYIntersection>
}
 8005ba2:	bd10      	pop	{r4, pc}

08005ba4 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	0008      	movs	r0, r1
 8005baa:	0011      	movs	r1, r2
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8005bac:	795a      	ldrb	r2, [r3, #5]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f7ff fc30 	bl	8005414 <u8g_WriteSequence>
}
 8005bb4:	bd10      	pop	{r4, pc}

08005bb6 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8005bb6:	b530      	push	{r4, r5, lr}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8005bb8:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 8005bba:	7880      	ldrb	r0, [r0, #2]
  mask = 1;
  y &= 0x07;
  mask <<= y;
  ptr += x;
 8005bbc:	1865      	adds	r5, r4, r1
  y -= b->p.page_y0;
 8005bbe:	1a10      	subs	r0, r2, r0
  mask <<= y;
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	4010      	ands	r0, r2
 8005bc4:	3a06      	subs	r2, #6
 8005bc6:	4082      	lsls	r2, r0
  if ( color_index )
  {
    *ptr |= mask;
 8005bc8:	5c60      	ldrb	r0, [r4, r1]
  mask <<= y;
 8005bca:	b2d2      	uxtb	r2, r2
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 8005bcc:	0001      	movs	r1, r0
 8005bce:	4391      	bics	r1, r2
  if ( color_index )
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <u8g_pb8v1_set_pixel+0x22>
    *ptr |= mask;
 8005bd4:	0001      	movs	r1, r0
 8005bd6:	4311      	orrs	r1, r2
 8005bd8:	7029      	strb	r1, [r5, #0]
  }
}
 8005bda:	bd30      	pop	{r4, r5, pc}

08005bdc <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	000b      	movs	r3, r1
  if ( arg_pixel->y < b->p.page_y0 )
 8005be0:	784a      	ldrb	r2, [r1, #1]
 8005be2:	7881      	ldrb	r1, [r0, #2]
 8005be4:	4291      	cmp	r1, r2
 8005be6:	d809      	bhi.n	8005bfc <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8005be8:	78c1      	ldrb	r1, [r0, #3]
 8005bea:	4291      	cmp	r1, r2
 8005bec:	d306      	bcc.n	8005bfc <u8g_pb8v1_SetPixel+0x20>
    return;
  if ( arg_pixel->x >= b->width )
 8005bee:	7819      	ldrb	r1, [r3, #0]
 8005bf0:	7944      	ldrb	r4, [r0, #5]
 8005bf2:	428c      	cmp	r4, r1
 8005bf4:	d902      	bls.n	8005bfc <u8g_pb8v1_SetPixel+0x20>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8005bf6:	791b      	ldrb	r3, [r3, #4]
 8005bf8:	f7ff ffdd 	bl	8005bb6 <u8g_pb8v1_set_pixel>
}
 8005bfc:	bd10      	pop	{r4, pc}
	...

08005c00 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8005c02:	2600      	movs	r6, #0
{
 8005c04:	9001      	str	r0, [sp, #4]
  switch( arg_pixel->dir )
 8005c06:	78cb      	ldrb	r3, [r1, #3]
{
 8005c08:	000c      	movs	r4, r1
  switch( arg_pixel->dir )
 8005c0a:	0037      	movs	r7, r6
  register uint8_t pixel = arg_pixel->pixel;
 8005c0c:	788d      	ldrb	r5, [r1, #2]
  switch( arg_pixel->dir )
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d803      	bhi.n	8005c1a <u8g_pb8v1_Set8PixelOpt2+0x1a>
 8005c12:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <u8g_pb8v1_Set8PixelOpt2+0x40>)
 8005c14:	5cd7      	ldrb	r7, [r2, r3]
 8005c16:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <u8g_pb8v1_Set8PixelOpt2+0x44>)
 8005c18:	5cd6      	ldrb	r6, [r2, r3]
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 8005c1a:	b26b      	sxtb	r3, r5
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	da03      	bge.n	8005c28 <u8g_pb8v1_Set8PixelOpt2+0x28>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8005c20:	0021      	movs	r1, r4
 8005c22:	9801      	ldr	r0, [sp, #4]
 8005c24:	f7ff ffda 	bl	8005bdc <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8005c28:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8005c2a:	006d      	lsls	r5, r5, #1
    arg_pixel->x += dx;
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 8005c30:	7863      	ldrb	r3, [r4, #1]
    pixel <<= 1;
 8005c32:	b2ed      	uxtb	r5, r5
    arg_pixel->y += dy;
 8005c34:	18f3      	adds	r3, r6, r3
 8005c36:	7063      	strb	r3, [r4, #1]
  } while( pixel != 0  );
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	d1ee      	bne.n	8005c1a <u8g_pb8v1_Set8PixelOpt2+0x1a>
  
}
 8005c3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	080074e6 	.word	0x080074e6
 8005c44:	080074ea 	.word	0x080074ea

08005c48 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	001e      	movs	r6, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8005c4c:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8005c4e:	2a32      	cmp	r2, #50	; 0x32
 8005c50:	d01b      	beq.n	8005c8a <u8g_dev_pb8v1_base_fn+0x42>
 8005c52:	d807      	bhi.n	8005c64 <u8g_dev_pb8v1_base_fn+0x1c>
 8005c54:	2a15      	cmp	r2, #21
 8005c56:	d024      	beq.n	8005ca2 <u8g_dev_pb8v1_base_fn+0x5a>
 8005c58:	2a17      	cmp	r2, #23
 8005c5a:	d02b      	beq.n	8005cb4 <u8g_dev_pb8v1_base_fn+0x6c>
 8005c5c:	2a14      	cmp	r2, #20
 8005c5e:	d019      	beq.n	8005c94 <u8g_dev_pb8v1_base_fn+0x4c>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8005c60:	2401      	movs	r4, #1
      break;
 8005c62:	e010      	b.n	8005c86 <u8g_dev_pb8v1_base_fn+0x3e>
  switch(msg)
 8005c64:	2a46      	cmp	r2, #70	; 0x46
 8005c66:	d02a      	beq.n	8005cbe <u8g_dev_pb8v1_base_fn+0x76>
 8005c68:	2a47      	cmp	r2, #71	; 0x47
 8005c6a:	d02b      	beq.n	8005cc4 <u8g_dev_pb8v1_base_fn+0x7c>
 8005c6c:	2401      	movs	r4, #1
 8005c6e:	2a3b      	cmp	r2, #59	; 0x3b
 8005c70:	d109      	bne.n	8005c86 <u8g_dev_pb8v1_base_fn+0x3e>
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8005c72:	0019      	movs	r1, r3
 8005c74:	0028      	movs	r0, r5
 8005c76:	f7ff ff83 	bl	8005b80 <u8g_pb_Is8PixelVisible>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d003      	beq.n	8005c86 <u8g_dev_pb8v1_base_fn+0x3e>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8005c7e:	0031      	movs	r1, r6
 8005c80:	0028      	movs	r0, r5
 8005c82:	f7ff ffbd 	bl	8005c00 <u8g_pb8v1_Set8PixelOpt2>
}
 8005c86:	0020      	movs	r0, r4
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	0028      	movs	r0, r5
 8005c8e:	f7ff ffa5 	bl	8005bdc <u8g_pb8v1_SetPixel>
      break;
 8005c92:	e7e5      	b.n	8005c60 <u8g_dev_pb8v1_base_fn+0x18>
      u8g_pb_Clear(pb);
 8005c94:	0028      	movs	r0, r5
 8005c96:	f7ff ff50 	bl	8005b3a <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8005c9a:	0028      	movs	r0, r5
 8005c9c:	f7ff ff2e 	bl	8005afc <u8g_page_First>
      break;
 8005ca0:	e7de      	b.n	8005c60 <u8g_dev_pb8v1_base_fn+0x18>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8005ca2:	0028      	movs	r0, r5
 8005ca4:	f7ff ff31 	bl	8005b0a <u8g_page_Next>
 8005ca8:	1e04      	subs	r4, r0, #0
 8005caa:	d0ec      	beq.n	8005c86 <u8g_dev_pb8v1_base_fn+0x3e>
      u8g_pb_Clear(pb);
 8005cac:	0028      	movs	r0, r5
 8005cae:	f7ff ff44 	bl	8005b3a <u8g_pb_Clear>
      break;
 8005cb2:	e7d5      	b.n	8005c60 <u8g_dev_pb8v1_base_fn+0x18>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	f7ff ff58 	bl	8005b6c <u8g_pb_GetPageBox>
      break;
 8005cbc:	e7d0      	b.n	8005c60 <u8g_dev_pb8v1_base_fn+0x18>
      *((u8g_uint_t *)arg) = pb->width;
 8005cbe:	796b      	ldrb	r3, [r5, #5]
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8005cc0:	7033      	strb	r3, [r6, #0]
 8005cc2:	e7cd      	b.n	8005c60 <u8g_dev_pb8v1_base_fn+0x18>
 8005cc4:	786b      	ldrb	r3, [r5, #1]
 8005cc6:	e7fb      	b.n	8005cc0 <u8g_dev_pb8v1_base_fn+0x78>

08005cc8 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	0006      	movs	r6, r0
 8005ccc:	0017      	movs	r7, r2
 8005cce:	001c      	movs	r4, r3
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
 8005cd0:	001d      	movs	r5, r3
{
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	9103      	str	r1, [sp, #12]
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	1919      	adds	r1, r3, r4
 8005cda:	1b49      	subs	r1, r1, r5
 8005cdc:	b2c9      	uxtb	r1, r1
  while( w >= 8 )
 8005cde:	2d07      	cmp	r5, #7
 8005ce0:	d81a      	bhi.n	8005d18 <u8g_draw_hline+0x50>
 8005ce2:	0021      	movs	r1, r4
 8005ce4:	2207      	movs	r2, #7
 8005ce6:	4391      	bics	r1, r2
 8005ce8:	1859      	adds	r1, r3, r1
 8005cea:	2308      	movs	r3, #8
 8005cec:	08e0      	lsrs	r0, r4, #3
 8005cee:	425b      	negs	r3, r3
 8005cf0:	4343      	muls	r3, r0
 8005cf2:	191c      	adds	r4, r3, r4
 8005cf4:	b2e4      	uxtb	r4, r4
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    w-=8;
    x+=8;
  }
  if ( w != 0 )
 8005cf6:	b2c9      	uxtb	r1, r1
 8005cf8:	2c00      	cmp	r4, #0
 8005cfa:	d00b      	beq.n	8005d14 <u8g_draw_hline+0x4c>
  {
    w ^=7;
    w++;
    pixel <<= w&7;
 8005cfc:	23ff      	movs	r3, #255	; 0xff
    w ^=7;
 8005cfe:	4054      	eors	r4, r2
    w++;
 8005d00:	3401      	adds	r4, #1
    pixel <<= w&7;
 8005d02:	4014      	ands	r4, r2
 8005d04:	40a3      	lsls	r3, r4
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	003a      	movs	r2, r7
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	0030      	movs	r0, r6
 8005d10:	f7ff fec5 	bl	8005a9e <u8g_Draw8Pixel>
  }
}
 8005d14:	b005      	add	sp, #20
 8005d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8005d18:	23ff      	movs	r3, #255	; 0xff
 8005d1a:	003a      	movs	r2, r7
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	0030      	movs	r0, r6
 8005d20:	2300      	movs	r3, #0
    w-=8;
 8005d22:	3d08      	subs	r5, #8
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8005d24:	f7ff febb 	bl	8005a9e <u8g_Draw8Pixel>
    w-=8;
 8005d28:	b2ed      	uxtb	r5, r5
    x+=8;
 8005d2a:	e7d4      	b.n	8005cd6 <u8g_draw_hline+0xe>

08005d2c <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
 8005d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2e:	0006      	movs	r6, r0
 8005d30:	000f      	movs	r7, r1
 8005d32:	001c      	movs	r4, r3
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
 8005d34:	001d      	movs	r5, r3
{
 8005d36:	b085      	sub	sp, #20
 8005d38:	9203      	str	r2, [sp, #12]
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	191a      	adds	r2, r3, r4
 8005d3e:	1b52      	subs	r2, r2, r5
 8005d40:	b2d2      	uxtb	r2, r2
  while( h >= 8 )
 8005d42:	2d07      	cmp	r5, #7
 8005d44:	d81a      	bhi.n	8005d7c <u8g_draw_vline+0x50>
 8005d46:	0022      	movs	r2, r4
 8005d48:	2107      	movs	r1, #7
 8005d4a:	438a      	bics	r2, r1
 8005d4c:	189a      	adds	r2, r3, r2
 8005d4e:	2308      	movs	r3, #8
 8005d50:	08e0      	lsrs	r0, r4, #3
 8005d52:	425b      	negs	r3, r3
 8005d54:	4343      	muls	r3, r0
 8005d56:	191c      	adds	r4, r3, r4
 8005d58:	b2e4      	uxtb	r4, r4
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    h-=8;
    y+=8;
  }
  if ( h != 0 )
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	2c00      	cmp	r4, #0
 8005d5e:	d00b      	beq.n	8005d78 <u8g_draw_vline+0x4c>
  {
    h ^=7;
    h++;
    pixel <<= h&7;
 8005d60:	23ff      	movs	r3, #255	; 0xff
    h ^=7;
 8005d62:	404c      	eors	r4, r1
    h++;
 8005d64:	3401      	adds	r4, #1
    pixel <<= h&7;
 8005d66:	400c      	ands	r4, r1
 8005d68:	40a3      	lsls	r3, r4
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	0039      	movs	r1, r7
 8005d70:	2301      	movs	r3, #1
 8005d72:	0030      	movs	r0, r6
 8005d74:	f7ff fe93 	bl	8005a9e <u8g_Draw8Pixel>
  }
}
 8005d78:	b005      	add	sp, #20
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8005d7c:	23ff      	movs	r3, #255	; 0xff
 8005d7e:	0039      	movs	r1, r7
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	0030      	movs	r0, r6
 8005d84:	3bfe      	subs	r3, #254	; 0xfe
    h-=8;
 8005d86:	3d08      	subs	r5, #8
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8005d88:	f7ff fe89 	bl	8005a9e <u8g_Draw8Pixel>
    h-=8;
 8005d8c:	b2ed      	uxtb	r5, r5
    y+=8;
 8005d8e:	e7d4      	b.n	8005d3a <u8g_draw_vline+0xe>

08005d90 <u8g_draw_box>:
  y--;
  u8g_draw_hline(u8g, xtmp, y, w);
}

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8005d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d92:	0005      	movs	r5, r0
 8005d94:	000e      	movs	r6, r1
 8005d96:	0014      	movs	r4, r2
 8005d98:	001f      	movs	r7, r3
 8005d9a:	ab08      	add	r3, sp, #32
 8005d9c:	781b      	ldrb	r3, [r3, #0]
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    y++;    
    h--;
  } while( h != 0 );
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	9301      	str	r3, [sp, #4]
    u8g_draw_hline(u8g, x, y, w);
 8005da4:	003b      	movs	r3, r7
 8005da6:	0022      	movs	r2, r4
 8005da8:	0031      	movs	r1, r6
 8005daa:	0028      	movs	r0, r5
 8005dac:	f7ff ff8c 	bl	8005cc8 <u8g_draw_hline>
    y++;    
 8005db0:	3401      	adds	r4, #1
  } while( h != 0 );
 8005db2:	9b01      	ldr	r3, [sp, #4]
    y++;    
 8005db4:	b2e4      	uxtb	r4, r4
  } while( h != 0 );
 8005db6:	429c      	cmp	r4, r3
 8005db8:	d1f4      	bne.n	8005da4 <u8g_draw_box+0x14>
}
 8005dba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08005dbc <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	001e      	movs	r6, r3
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	ab0a      	add	r3, sp, #40	; 0x28
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	0004      	movs	r4, r0
 8005dc8:	9303      	str	r3, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	0033      	movs	r3, r6
{
 8005dce:	000f      	movs	r7, r1
 8005dd0:	0015      	movs	r5, r2
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8005dd2:	f7ff facb 	bl	800536c <u8g_IsBBXIntersection>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d007      	beq.n	8005dea <u8g_DrawBox+0x2e>
    return;
  u8g_draw_box(u8g, x, y, w, h);
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	002a      	movs	r2, r5
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	0039      	movs	r1, r7
 8005de2:	0033      	movs	r3, r6
 8005de4:	0020      	movs	r0, r4
 8005de6:	f7ff ffd3 	bl	8005d90 <u8g_draw_box>
}
 8005dea:	b005      	add	sp, #20
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dee <u8g_DrawRFrame>:


void u8g_DrawRFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
{
 8005dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df0:	b08b      	sub	sp, #44	; 0x2c
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	ab10      	add	r3, sp, #64	; 0x40
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	0007      	movs	r7, r0
 8005dfa:	9307      	str	r3, [sp, #28]
 8005dfc:	ab11      	add	r3, sp, #68	; 0x44
 8005dfe:	781c      	ldrb	r4, [r3, #0]
  u8g_uint_t xl, yu;

  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8005e00:	9b07      	ldr	r3, [sp, #28]
{
 8005e02:	9102      	str	r1, [sp, #8]
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	9b04      	ldr	r3, [sp, #16]
{
 8005e08:	9203      	str	r2, [sp, #12]
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8005e0a:	f7ff faaf 	bl	800536c <u8g_IsBBXIntersection>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d065      	beq.n	8005ede <u8g_DrawRFrame+0xf0>
    return;

  xl = x;
  xl += r;
 8005e12:	9b02      	ldr	r3, [sp, #8]
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;

    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
 8005e14:	0038      	movs	r0, r7
  xl += r;
 8005e16:	191e      	adds	r6, r3, r4
 8005e18:	b2f3      	uxtb	r3, r6
 8005e1a:	9305      	str	r3, [sp, #20]
  yu += r;
 8005e1c:	9b03      	ldr	r3, [sp, #12]
    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
 8005e1e:	9905      	ldr	r1, [sp, #20]
  yu += r;
 8005e20:	191d      	adds	r5, r3, r4
 8005e22:	b2eb      	uxtb	r3, r5
    xr -= 1;
 8005e24:	43e5      	mvns	r5, r4
  yu += r;
 8005e26:	9306      	str	r3, [sp, #24]
    xr -= 1;
 8005e28:	9b04      	ldr	r3, [sp, #16]
    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
 8005e2a:	9a06      	ldr	r2, [sp, #24]
    xr -= 1;
 8005e2c:	195d      	adds	r5, r3, r5
 8005e2e:	9b02      	ldr	r3, [sp, #8]
 8005e30:	195d      	adds	r5, r3, r5
 8005e32:	9b07      	ldr	r3, [sp, #28]
 8005e34:	b2ed      	uxtb	r5, r5
    yl -= r; 
 8005e36:	1b1b      	subs	r3, r3, r4
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	9309      	str	r3, [sp, #36]	; 0x24
    yl -= 1;
 8005e3c:	1e5e      	subs	r6, r3, #1
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	199e      	adds	r6, r3, r6
    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
 8005e42:	2302      	movs	r3, #2
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	0023      	movs	r3, r4
 8005e48:	f7ff fa58 	bl	80052fc <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	0029      	movs	r1, r5
 8005e50:	0038      	movs	r0, r7
 8005e52:	9a06      	ldr	r2, [sp, #24]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	0023      	movs	r3, r4
 8005e58:	f7ff fa50 	bl	80052fc <u8g_draw_circle>
    u8g_draw_circle(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
 8005e5c:	2304      	movs	r3, #4
    yl -= 1;
 8005e5e:	b2f6      	uxtb	r6, r6
    u8g_draw_circle(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
 8005e60:	0032      	movs	r2, r6
 8005e62:	0038      	movs	r0, r7
 8005e64:	9905      	ldr	r1, [sp, #20]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	0023      	movs	r3, r4
 8005e6a:	f7ff fa47 	bl	80052fc <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
 8005e6e:	2308      	movs	r3, #8
 8005e70:	0032      	movs	r2, r6
 8005e72:	0029      	movs	r1, r5
 8005e74:	0038      	movs	r0, r7
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0023      	movs	r3, r4
 8005e7a:	f7ff fa3f 	bl	80052fc <u8g_draw_circle>
    u8g_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    ww -= 2;
 8005e7e:	9a04      	ldr	r2, [sp, #16]
 8005e80:	0063      	lsls	r3, r4, #1
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	3b02      	subs	r3, #2
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	9308      	str	r3, [sp, #32]
    hh = h;
    hh -= r;
    hh -= r;
    hh -= 2;
 8005e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    
    xl++;
    yu++;
    h--;
    w--;
    u8g_draw_hline(u8g, xl, y, ww);
 8005e8c:	0038      	movs	r0, r7
    hh -= 2;
 8005e8e:	1b1c      	subs	r4, r3, r4
    xl++;
 8005e90:	9b05      	ldr	r3, [sp, #20]
    u8g_draw_hline(u8g, xl, y, ww);
 8005e92:	9a03      	ldr	r2, [sp, #12]
    xl++;
 8005e94:	1c5e      	adds	r6, r3, #1
    yu++;
 8005e96:	9b06      	ldr	r3, [sp, #24]
    xl++;
 8005e98:	b2f6      	uxtb	r6, r6
    u8g_draw_hline(u8g, xl, y, ww);
 8005e9a:	0031      	movs	r1, r6
    yu++;
 8005e9c:	1c5d      	adds	r5, r3, #1
    u8g_draw_hline(u8g, xl, y, ww);
 8005e9e:	9b08      	ldr	r3, [sp, #32]
 8005ea0:	f7ff ff12 	bl	8005cc8 <u8g_draw_hline>
    h--;
 8005ea4:	9b07      	ldr	r3, [sp, #28]
    hh -= 2;
 8005ea6:	3c02      	subs	r4, #2
    h--;
 8005ea8:	1e5a      	subs	r2, r3, #1
    u8g_draw_hline(u8g, xl, y+h, ww);
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	0031      	movs	r1, r6
 8005eae:	189a      	adds	r2, r3, r2
 8005eb0:	0038      	movs	r0, r7
 8005eb2:	9b08      	ldr	r3, [sp, #32]
    hh -= 2;
 8005eb4:	b2e4      	uxtb	r4, r4
    yu++;
 8005eb6:	b2ed      	uxtb	r5, r5
    u8g_draw_hline(u8g, xl, y+h, ww);
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	f7ff ff05 	bl	8005cc8 <u8g_draw_hline>
    u8g_draw_vline(u8g, x,         yu, hh);
 8005ebe:	0023      	movs	r3, r4
 8005ec0:	002a      	movs	r2, r5
 8005ec2:	0038      	movs	r0, r7
 8005ec4:	9902      	ldr	r1, [sp, #8]
 8005ec6:	f7ff ff31 	bl	8005d2c <u8g_draw_vline>
    w--;
 8005eca:	9b04      	ldr	r3, [sp, #16]
    u8g_draw_vline(u8g, x+w, yu, hh);
 8005ecc:	002a      	movs	r2, r5
    w--;
 8005ece:	1e59      	subs	r1, r3, #1
    u8g_draw_vline(u8g, x+w, yu, hh);
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	0038      	movs	r0, r7
 8005ed4:	1859      	adds	r1, r3, r1
 8005ed6:	b2c9      	uxtb	r1, r1
 8005ed8:	0023      	movs	r3, r4
 8005eda:	f7ff ff27 	bl	8005d2c <u8g_draw_vline>
  }
}
 8005ede:	b00b      	add	sp, #44	; 0x2c
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ee2 <u8g_dev_rot_dummy_fn>:
uint8_t u8g_dev_rot270_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);

uint8_t u8g_dev_rot_dummy_fn(u8g_t *u8g, u8g_dev_t*dev, uint8_t msg, void *arg)
{
  return 0;
}
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	4770      	bx	lr

08005ee6 <u8g_dev_rot180_fn>:
  }
  return 1;
}

uint8_t u8g_dev_rot180_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8005ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee8:	0005      	movs	r5, r0
 8005eea:	0017      	movs	r7, r2
 8005eec:	001c      	movs	r4, r3
  u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
 8005eee:	684e      	ldr	r6, [r1, #4]
  switch(msg)
 8005ef0:	2a32      	cmp	r2, #50	; 0x32
 8005ef2:	d061      	beq.n	8005fb8 <u8g_dev_rot180_fn+0xd2>
 8005ef4:	d80c      	bhi.n	8005f10 <u8g_dev_rot180_fn+0x2a>
 8005ef6:	2a2c      	cmp	r2, #44	; 0x2c
 8005ef8:	d05e      	beq.n	8005fb8 <u8g_dev_rot180_fn+0xd2>
 8005efa:	2a2d      	cmp	r2, #45	; 0x2d
 8005efc:	d00e      	beq.n	8005f1c <u8g_dev_rot180_fn+0x36>
 8005efe:	2a17      	cmp	r2, #23
 8005f00:	d025      	beq.n	8005f4e <u8g_dev_rot180_fn+0x68>
    case U8G_DEV_MSG_PAGE_FIRST:
    case U8G_DEV_MSG_PAGE_NEXT:
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
    case U8G_DEV_MSG_SET_XY_CB:
    */
      return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 8005f02:	0023      	movs	r3, r4
 8005f04:	003a      	movs	r2, r7
 8005f06:	0031      	movs	r1, r6
 8005f08:	0028      	movs	r0, r5
 8005f0a:	f7ff fcf9 	bl	8005900 <u8g_call_dev_fn>
      }
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
      break;
  }
  return 1;
}
 8005f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch(msg)
 8005f10:	2a46      	cmp	r2, #70	; 0x46
 8005f12:	d048      	beq.n	8005fa6 <u8g_dev_rot180_fn+0xc0>
 8005f14:	2a47      	cmp	r2, #71	; 0x47
 8005f16:	d04b      	beq.n	8005fb0 <u8g_dev_rot180_fn+0xca>
 8005f18:	2a3b      	cmp	r2, #59	; 0x3b
 8005f1a:	d1f2      	bne.n	8005f02 <u8g_dev_rot180_fn+0x1c>
        y = u8g_GetHeightLL(u8g, rotation_chain);
 8005f1c:	0031      	movs	r1, r6
 8005f1e:	0028      	movs	r0, r5
 8005f20:	f7ff fd51 	bl	80059c6 <u8g_GetHeightLL>
        y--;
 8005f24:	7863      	ldrb	r3, [r4, #1]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005f26:	0031      	movs	r1, r6
        y--;
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	18c0      	adds	r0, r0, r3
 8005f2c:	b2c3      	uxtb	r3, r0
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005f2e:	0028      	movs	r0, r5
        y--;
 8005f30:	9300      	str	r3, [sp, #0]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005f32:	f7ff fd3f 	bl	80059b4 <u8g_GetWidthLL>
        x--;
 8005f36:	7823      	ldrb	r3, [r4, #0]
        ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
 8005f38:	2203      	movs	r2, #3
        x--;
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	18c0      	adds	r0, r0, r3
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 8005f3e:	9b00      	ldr	r3, [sp, #0]
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
 8005f40:	7020      	strb	r0, [r4, #0]
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 8005f42:	7063      	strb	r3, [r4, #1]
        ((u8g_dev_arg_pixel_t *)arg)->dir+=2;
 8005f44:	78e3      	ldrb	r3, [r4, #3]
 8005f46:	3302      	adds	r3, #2
        ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
 8005f48:	4013      	ands	r3, r2
 8005f4a:	70e3      	strb	r3, [r4, #3]
 8005f4c:	e047      	b.n	8005fde <u8g_dev_rot180_fn+0xf8>
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 8005f4e:	0031      	movs	r1, r6
 8005f50:	f7ff fcd6 	bl	8005900 <u8g_call_dev_fn>
	new_box.x0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
 8005f54:	0031      	movs	r1, r6
 8005f56:	0028      	movs	r0, r5
 8005f58:	f7ff fd2c 	bl	80059b4 <u8g_GetWidthLL>
 8005f5c:	78a7      	ldrb	r7, [r4, #2]
	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
 8005f5e:	0031      	movs	r1, r6
	new_box.x0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
 8005f60:	43ff      	mvns	r7, r7
 8005f62:	19c7      	adds	r7, r0, r7
	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
 8005f64:	0028      	movs	r0, r5
 8005f66:	f7ff fd25 	bl	80059b4 <u8g_GetWidthLL>
 8005f6a:	7823      	ldrb	r3, [r4, #0]
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
 8005f6c:	0031      	movs	r1, r6
	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	18c0      	adds	r0, r0, r3
 8005f72:	b2c3      	uxtb	r3, r0
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
 8005f74:	0028      	movs	r0, r5
	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
 8005f76:	9300      	str	r3, [sp, #0]
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
 8005f78:	f7ff fd25 	bl	80059c6 <u8g_GetHeightLL>
 8005f7c:	78e3      	ldrb	r3, [r4, #3]
	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
 8005f7e:	0031      	movs	r1, r6
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
 8005f80:	43db      	mvns	r3, r3
 8005f82:	18c0      	adds	r0, r0, r3
 8005f84:	b2c3      	uxtb	r3, r0
	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
 8005f86:	0028      	movs	r0, r5
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
 8005f88:	9301      	str	r3, [sp, #4]
	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
 8005f8a:	f7ff fd1c 	bl	80059c6 <u8g_GetHeightLL>
 8005f8e:	7863      	ldrb	r3, [r4, #1]
	new_box.x0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
 8005f90:	b2ff      	uxtb	r7, r7
	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
 8005f92:	43db      	mvns	r3, r3
 8005f94:	18c0      	adds	r0, r0, r3
	*((u8g_box_t *)arg) = new_box;
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	7027      	strb	r7, [r4, #0]
 8005f9a:	7063      	strb	r3, [r4, #1]
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	70e0      	strb	r0, [r4, #3]
 8005fa0:	70a3      	strb	r3, [r4, #2]
  return 1;
 8005fa2:	2001      	movs	r0, #1
      break;
 8005fa4:	e7b3      	b.n	8005f0e <u8g_dev_rot180_fn+0x28>
      *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g,rotation_chain);
 8005fa6:	0031      	movs	r1, r6
 8005fa8:	f7ff fd04 	bl	80059b4 <u8g_GetWidthLL>
      *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g, rotation_chain);
 8005fac:	7020      	strb	r0, [r4, #0]
      break;
 8005fae:	e7f8      	b.n	8005fa2 <u8g_dev_rot180_fn+0xbc>
      *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g, rotation_chain);
 8005fb0:	0031      	movs	r1, r6
 8005fb2:	f7ff fd08 	bl	80059c6 <u8g_GetHeightLL>
 8005fb6:	e7f9      	b.n	8005fac <u8g_dev_rot180_fn+0xc6>
        y = u8g_GetHeightLL(u8g, rotation_chain);
 8005fb8:	0031      	movs	r1, r6
 8005fba:	0028      	movs	r0, r5
 8005fbc:	f7ff fd03 	bl	80059c6 <u8g_GetHeightLL>
        y--;
 8005fc0:	7863      	ldrb	r3, [r4, #1]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005fc2:	0031      	movs	r1, r6
        y--;
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	18c0      	adds	r0, r0, r3
 8005fc8:	b2c3      	uxtb	r3, r0
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005fca:	0028      	movs	r0, r5
        y--;
 8005fcc:	9300      	str	r3, [sp, #0]
        x = u8g_GetWidthLL(u8g, rotation_chain);
 8005fce:	f7ff fcf1 	bl	80059b4 <u8g_GetWidthLL>
        x--;
 8005fd2:	7823      	ldrb	r3, [r4, #0]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	18c0      	adds	r0, r0, r3
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 8005fd8:	9b00      	ldr	r3, [sp, #0]
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
 8005fda:	7020      	strb	r0, [r4, #0]
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
 8005fdc:	7063      	strb	r3, [r4, #1]
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
 8005fde:	0023      	movs	r3, r4
 8005fe0:	003a      	movs	r2, r7
 8005fe2:	0031      	movs	r1, r6
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	f7ff fc8b 	bl	8005900 <u8g_call_dev_fn>
 8005fea:	e7da      	b.n	8005fa2 <u8g_dev_rot180_fn+0xbc>

08005fec <u8g_SetRot180>:
  if ( u8g->dev != &u8g_dev_rot )
 8005fec:	6842      	ldr	r2, [r0, #4]
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <u8g_SetRot180+0x18>)
{
 8005ff0:	b510      	push	{r4, lr}
  if ( u8g->dev != &u8g_dev_rot )
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <u8g_SetRot180+0xe>
    u8g_dev_rot.dev_mem = u8g->dev;
 8005ff6:	605a      	str	r2, [r3, #4]
    u8g->dev = &u8g_dev_rot;
 8005ff8:	6043      	str	r3, [r0, #4]
  u8g_dev_rot.dev_fn = u8g_dev_rot180_fn;
 8005ffa:	4a03      	ldr	r2, [pc, #12]	; (8006008 <u8g_SetRot180+0x1c>)
 8005ffc:	601a      	str	r2, [r3, #0]
  u8g_UpdateDimension(u8g);
 8005ffe:	f7ff fcf1 	bl	80059e4 <u8g_UpdateDimension>
}
 8006002:	bd10      	pop	{r4, pc}
 8006004:	20000084 	.word	0x20000084
 8006008:	08005ee7 	.word	0x08005ee7

0800600c <u8g_state_dummy_cb>:
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 800600c:	4770      	bx	lr
	...

08006010 <__errno>:
 8006010:	4b01      	ldr	r3, [pc, #4]	; (8006018 <__errno+0x8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	4770      	bx	lr
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	20000090 	.word	0x20000090

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	2600      	movs	r6, #0
 8006020:	4d0c      	ldr	r5, [pc, #48]	; (8006054 <__libc_init_array+0x38>)
 8006022:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	2600      	movs	r6, #0
 800602e:	f000 fc8b 	bl	8006948 <_init>
 8006032:	4d0a      	ldr	r5, [pc, #40]	; (800605c <__libc_init_array+0x40>)
 8006034:	4c0a      	ldr	r4, [pc, #40]	; (8006060 <__libc_init_array+0x44>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	00b3      	lsls	r3, r6, #2
 8006042:	58eb      	ldr	r3, [r5, r3]
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	00b3      	lsls	r3, r6, #2
 800604c:	58eb      	ldr	r3, [r5, r3]
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	08007524 	.word	0x08007524
 8006058:	08007524 	.word	0x08007524
 800605c:	08007524 	.word	0x08007524
 8006060:	08007528 	.word	0x08007528

08006064 <memcpy>:
 8006064:	2300      	movs	r3, #0
 8006066:	b510      	push	{r4, lr}
 8006068:	429a      	cmp	r2, r3
 800606a:	d100      	bne.n	800606e <memcpy+0xa>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	5ccc      	ldrb	r4, [r1, r3]
 8006070:	54c4      	strb	r4, [r0, r3]
 8006072:	3301      	adds	r3, #1
 8006074:	e7f8      	b.n	8006068 <memcpy+0x4>

08006076 <memset>:
 8006076:	0003      	movs	r3, r0
 8006078:	1882      	adds	r2, r0, r2
 800607a:	4293      	cmp	r3, r2
 800607c:	d100      	bne.n	8006080 <memset+0xa>
 800607e:	4770      	bx	lr
 8006080:	7019      	strb	r1, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	e7f9      	b.n	800607a <memset+0x4>
	...

08006088 <siprintf>:
 8006088:	b40e      	push	{r1, r2, r3}
 800608a:	b500      	push	{lr}
 800608c:	490b      	ldr	r1, [pc, #44]	; (80060bc <siprintf+0x34>)
 800608e:	b09c      	sub	sp, #112	; 0x70
 8006090:	ab1d      	add	r3, sp, #116	; 0x74
 8006092:	9002      	str	r0, [sp, #8]
 8006094:	9006      	str	r0, [sp, #24]
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	9104      	str	r1, [sp, #16]
 800609a:	4809      	ldr	r0, [pc, #36]	; (80060c0 <siprintf+0x38>)
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <siprintf+0x3c>)
 800609e:	cb04      	ldmia	r3!, {r2}
 80060a0:	9105      	str	r1, [sp, #20]
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	a902      	add	r1, sp, #8
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f000 f870 	bl	800618c <_svfiprintf_r>
 80060ac:	2300      	movs	r3, #0
 80060ae:	9a02      	ldr	r2, [sp, #8]
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	b01c      	add	sp, #112	; 0x70
 80060b4:	bc08      	pop	{r3}
 80060b6:	b003      	add	sp, #12
 80060b8:	4718      	bx	r3
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	7fffffff 	.word	0x7fffffff
 80060c0:	20000090 	.word	0x20000090
 80060c4:	ffff0208 	.word	0xffff0208

080060c8 <__ssputs_r>:
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	688e      	ldr	r6, [r1, #8]
 80060cc:	b085      	sub	sp, #20
 80060ce:	0007      	movs	r7, r0
 80060d0:	000c      	movs	r4, r1
 80060d2:	9203      	str	r2, [sp, #12]
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	429e      	cmp	r6, r3
 80060d8:	d83c      	bhi.n	8006154 <__ssputs_r+0x8c>
 80060da:	2390      	movs	r3, #144	; 0x90
 80060dc:	898a      	ldrh	r2, [r1, #12]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	421a      	tst	r2, r3
 80060e2:	d034      	beq.n	800614e <__ssputs_r+0x86>
 80060e4:	6909      	ldr	r1, [r1, #16]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6960      	ldr	r0, [r4, #20]
 80060ea:	1a5b      	subs	r3, r3, r1
 80060ec:	9302      	str	r3, [sp, #8]
 80060ee:	2303      	movs	r3, #3
 80060f0:	4343      	muls	r3, r0
 80060f2:	0fdd      	lsrs	r5, r3, #31
 80060f4:	18ed      	adds	r5, r5, r3
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	9802      	ldr	r0, [sp, #8]
 80060fa:	3301      	adds	r3, #1
 80060fc:	181b      	adds	r3, r3, r0
 80060fe:	106d      	asrs	r5, r5, #1
 8006100:	42ab      	cmp	r3, r5
 8006102:	d900      	bls.n	8006106 <__ssputs_r+0x3e>
 8006104:	001d      	movs	r5, r3
 8006106:	0553      	lsls	r3, r2, #21
 8006108:	d532      	bpl.n	8006170 <__ssputs_r+0xa8>
 800610a:	0029      	movs	r1, r5
 800610c:	0038      	movs	r0, r7
 800610e:	f000 fb49 	bl	80067a4 <_malloc_r>
 8006112:	1e06      	subs	r6, r0, #0
 8006114:	d109      	bne.n	800612a <__ssputs_r+0x62>
 8006116:	230c      	movs	r3, #12
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	2340      	movs	r3, #64	; 0x40
 800611c:	2001      	movs	r0, #1
 800611e:	89a2      	ldrh	r2, [r4, #12]
 8006120:	4240      	negs	r0, r0
 8006122:	4313      	orrs	r3, r2
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	b005      	add	sp, #20
 8006128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612a:	9a02      	ldr	r2, [sp, #8]
 800612c:	6921      	ldr	r1, [r4, #16]
 800612e:	f7ff ff99 	bl	8006064 <memcpy>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	4a14      	ldr	r2, [pc, #80]	; (8006188 <__ssputs_r+0xc0>)
 8006136:	401a      	ands	r2, r3
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	4313      	orrs	r3, r2
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	9b02      	ldr	r3, [sp, #8]
 8006140:	6126      	str	r6, [r4, #16]
 8006142:	18f6      	adds	r6, r6, r3
 8006144:	6026      	str	r6, [r4, #0]
 8006146:	6165      	str	r5, [r4, #20]
 8006148:	9e01      	ldr	r6, [sp, #4]
 800614a:	1aed      	subs	r5, r5, r3
 800614c:	60a5      	str	r5, [r4, #8]
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	429e      	cmp	r6, r3
 8006152:	d900      	bls.n	8006156 <__ssputs_r+0x8e>
 8006154:	9e01      	ldr	r6, [sp, #4]
 8006156:	0032      	movs	r2, r6
 8006158:	9903      	ldr	r1, [sp, #12]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	f000 faa3 	bl	80066a6 <memmove>
 8006160:	68a3      	ldr	r3, [r4, #8]
 8006162:	2000      	movs	r0, #0
 8006164:	1b9b      	subs	r3, r3, r6
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	199e      	adds	r6, r3, r6
 800616c:	6026      	str	r6, [r4, #0]
 800616e:	e7da      	b.n	8006126 <__ssputs_r+0x5e>
 8006170:	002a      	movs	r2, r5
 8006172:	0038      	movs	r0, r7
 8006174:	f000 fb8c 	bl	8006890 <_realloc_r>
 8006178:	1e06      	subs	r6, r0, #0
 800617a:	d1e0      	bne.n	800613e <__ssputs_r+0x76>
 800617c:	0038      	movs	r0, r7
 800617e:	6921      	ldr	r1, [r4, #16]
 8006180:	f000 faa4 	bl	80066cc <_free_r>
 8006184:	e7c7      	b.n	8006116 <__ssputs_r+0x4e>
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	fffffb7f 	.word	0xfffffb7f

0800618c <_svfiprintf_r>:
 800618c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618e:	b0a1      	sub	sp, #132	; 0x84
 8006190:	9003      	str	r0, [sp, #12]
 8006192:	001d      	movs	r5, r3
 8006194:	898b      	ldrh	r3, [r1, #12]
 8006196:	000f      	movs	r7, r1
 8006198:	0016      	movs	r6, r2
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	d511      	bpl.n	80061c2 <_svfiprintf_r+0x36>
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10e      	bne.n	80061c2 <_svfiprintf_r+0x36>
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	f000 fafd 	bl	80067a4 <_malloc_r>
 80061aa:	6038      	str	r0, [r7, #0]
 80061ac:	6138      	str	r0, [r7, #16]
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d105      	bne.n	80061be <_svfiprintf_r+0x32>
 80061b2:	230c      	movs	r3, #12
 80061b4:	9a03      	ldr	r2, [sp, #12]
 80061b6:	3801      	subs	r0, #1
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	b021      	add	sp, #132	; 0x84
 80061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	2300      	movs	r3, #0
 80061c4:	ac08      	add	r4, sp, #32
 80061c6:	6163      	str	r3, [r4, #20]
 80061c8:	3320      	adds	r3, #32
 80061ca:	7663      	strb	r3, [r4, #25]
 80061cc:	3310      	adds	r3, #16
 80061ce:	76a3      	strb	r3, [r4, #26]
 80061d0:	9507      	str	r5, [sp, #28]
 80061d2:	0035      	movs	r5, r6
 80061d4:	782b      	ldrb	r3, [r5, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <_svfiprintf_r+0x52>
 80061da:	2b25      	cmp	r3, #37	; 0x25
 80061dc:	d147      	bne.n	800626e <_svfiprintf_r+0xe2>
 80061de:	1bab      	subs	r3, r5, r6
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d00c      	beq.n	8006200 <_svfiprintf_r+0x74>
 80061e6:	0032      	movs	r2, r6
 80061e8:	0039      	movs	r1, r7
 80061ea:	9803      	ldr	r0, [sp, #12]
 80061ec:	f7ff ff6c 	bl	80060c8 <__ssputs_r>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d100      	bne.n	80061f6 <_svfiprintf_r+0x6a>
 80061f4:	e0ae      	b.n	8006354 <_svfiprintf_r+0x1c8>
 80061f6:	6962      	ldr	r2, [r4, #20]
 80061f8:	9b05      	ldr	r3, [sp, #20]
 80061fa:	4694      	mov	ip, r2
 80061fc:	4463      	add	r3, ip
 80061fe:	6163      	str	r3, [r4, #20]
 8006200:	782b      	ldrb	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d100      	bne.n	8006208 <_svfiprintf_r+0x7c>
 8006206:	e0a5      	b.n	8006354 <_svfiprintf_r+0x1c8>
 8006208:	2201      	movs	r2, #1
 800620a:	2300      	movs	r3, #0
 800620c:	4252      	negs	r2, r2
 800620e:	6062      	str	r2, [r4, #4]
 8006210:	a904      	add	r1, sp, #16
 8006212:	3254      	adds	r2, #84	; 0x54
 8006214:	1852      	adds	r2, r2, r1
 8006216:	1c6e      	adds	r6, r5, #1
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	60e3      	str	r3, [r4, #12]
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	7013      	strb	r3, [r2, #0]
 8006220:	65a3      	str	r3, [r4, #88]	; 0x58
 8006222:	2205      	movs	r2, #5
 8006224:	7831      	ldrb	r1, [r6, #0]
 8006226:	4854      	ldr	r0, [pc, #336]	; (8006378 <_svfiprintf_r+0x1ec>)
 8006228:	f000 fa32 	bl	8006690 <memchr>
 800622c:	1c75      	adds	r5, r6, #1
 800622e:	2800      	cmp	r0, #0
 8006230:	d11f      	bne.n	8006272 <_svfiprintf_r+0xe6>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	06d3      	lsls	r3, r2, #27
 8006236:	d504      	bpl.n	8006242 <_svfiprintf_r+0xb6>
 8006238:	2353      	movs	r3, #83	; 0x53
 800623a:	a904      	add	r1, sp, #16
 800623c:	185b      	adds	r3, r3, r1
 800623e:	2120      	movs	r1, #32
 8006240:	7019      	strb	r1, [r3, #0]
 8006242:	0713      	lsls	r3, r2, #28
 8006244:	d504      	bpl.n	8006250 <_svfiprintf_r+0xc4>
 8006246:	2353      	movs	r3, #83	; 0x53
 8006248:	a904      	add	r1, sp, #16
 800624a:	185b      	adds	r3, r3, r1
 800624c:	212b      	movs	r1, #43	; 0x2b
 800624e:	7019      	strb	r1, [r3, #0]
 8006250:	7833      	ldrb	r3, [r6, #0]
 8006252:	2b2a      	cmp	r3, #42	; 0x2a
 8006254:	d016      	beq.n	8006284 <_svfiprintf_r+0xf8>
 8006256:	0035      	movs	r5, r6
 8006258:	2100      	movs	r1, #0
 800625a:	200a      	movs	r0, #10
 800625c:	68e3      	ldr	r3, [r4, #12]
 800625e:	782a      	ldrb	r2, [r5, #0]
 8006260:	1c6e      	adds	r6, r5, #1
 8006262:	3a30      	subs	r2, #48	; 0x30
 8006264:	2a09      	cmp	r2, #9
 8006266:	d94e      	bls.n	8006306 <_svfiprintf_r+0x17a>
 8006268:	2900      	cmp	r1, #0
 800626a:	d111      	bne.n	8006290 <_svfiprintf_r+0x104>
 800626c:	e017      	b.n	800629e <_svfiprintf_r+0x112>
 800626e:	3501      	adds	r5, #1
 8006270:	e7b0      	b.n	80061d4 <_svfiprintf_r+0x48>
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <_svfiprintf_r+0x1ec>)
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	1ac0      	subs	r0, r0, r3
 8006278:	2301      	movs	r3, #1
 800627a:	4083      	lsls	r3, r0
 800627c:	4313      	orrs	r3, r2
 800627e:	002e      	movs	r6, r5
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	e7ce      	b.n	8006222 <_svfiprintf_r+0x96>
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	1d19      	adds	r1, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	9107      	str	r1, [sp, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	db01      	blt.n	8006294 <_svfiprintf_r+0x108>
 8006290:	930b      	str	r3, [sp, #44]	; 0x2c
 8006292:	e004      	b.n	800629e <_svfiprintf_r+0x112>
 8006294:	425b      	negs	r3, r3
 8006296:	60e3      	str	r3, [r4, #12]
 8006298:	2302      	movs	r3, #2
 800629a:	4313      	orrs	r3, r2
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	782b      	ldrb	r3, [r5, #0]
 80062a0:	2b2e      	cmp	r3, #46	; 0x2e
 80062a2:	d10a      	bne.n	80062ba <_svfiprintf_r+0x12e>
 80062a4:	786b      	ldrb	r3, [r5, #1]
 80062a6:	2b2a      	cmp	r3, #42	; 0x2a
 80062a8:	d135      	bne.n	8006316 <_svfiprintf_r+0x18a>
 80062aa:	9b07      	ldr	r3, [sp, #28]
 80062ac:	3502      	adds	r5, #2
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	9207      	str	r2, [sp, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db2b      	blt.n	8006310 <_svfiprintf_r+0x184>
 80062b8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ba:	4e30      	ldr	r6, [pc, #192]	; (800637c <_svfiprintf_r+0x1f0>)
 80062bc:	2203      	movs	r2, #3
 80062be:	0030      	movs	r0, r6
 80062c0:	7829      	ldrb	r1, [r5, #0]
 80062c2:	f000 f9e5 	bl	8006690 <memchr>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d006      	beq.n	80062d8 <_svfiprintf_r+0x14c>
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	1b80      	subs	r0, r0, r6
 80062ce:	4083      	lsls	r3, r0
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	3501      	adds	r5, #1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	7829      	ldrb	r1, [r5, #0]
 80062da:	2206      	movs	r2, #6
 80062dc:	4828      	ldr	r0, [pc, #160]	; (8006380 <_svfiprintf_r+0x1f4>)
 80062de:	1c6e      	adds	r6, r5, #1
 80062e0:	7621      	strb	r1, [r4, #24]
 80062e2:	f000 f9d5 	bl	8006690 <memchr>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d03c      	beq.n	8006364 <_svfiprintf_r+0x1d8>
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <_svfiprintf_r+0x1f8>)
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d125      	bne.n	800633c <_svfiprintf_r+0x1b0>
 80062f0:	2207      	movs	r2, #7
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	3307      	adds	r3, #7
 80062f6:	4393      	bics	r3, r2
 80062f8:	3308      	adds	r3, #8
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	6963      	ldr	r3, [r4, #20]
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	189b      	adds	r3, r3, r2
 8006302:	6163      	str	r3, [r4, #20]
 8006304:	e765      	b.n	80061d2 <_svfiprintf_r+0x46>
 8006306:	4343      	muls	r3, r0
 8006308:	0035      	movs	r5, r6
 800630a:	2101      	movs	r1, #1
 800630c:	189b      	adds	r3, r3, r2
 800630e:	e7a6      	b.n	800625e <_svfiprintf_r+0xd2>
 8006310:	2301      	movs	r3, #1
 8006312:	425b      	negs	r3, r3
 8006314:	e7d0      	b.n	80062b8 <_svfiprintf_r+0x12c>
 8006316:	2300      	movs	r3, #0
 8006318:	200a      	movs	r0, #10
 800631a:	001a      	movs	r2, r3
 800631c:	3501      	adds	r5, #1
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	7829      	ldrb	r1, [r5, #0]
 8006322:	1c6e      	adds	r6, r5, #1
 8006324:	3930      	subs	r1, #48	; 0x30
 8006326:	2909      	cmp	r1, #9
 8006328:	d903      	bls.n	8006332 <_svfiprintf_r+0x1a6>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0c5      	beq.n	80062ba <_svfiprintf_r+0x12e>
 800632e:	9209      	str	r2, [sp, #36]	; 0x24
 8006330:	e7c3      	b.n	80062ba <_svfiprintf_r+0x12e>
 8006332:	4342      	muls	r2, r0
 8006334:	0035      	movs	r5, r6
 8006336:	2301      	movs	r3, #1
 8006338:	1852      	adds	r2, r2, r1
 800633a:	e7f1      	b.n	8006320 <_svfiprintf_r+0x194>
 800633c:	ab07      	add	r3, sp, #28
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	003a      	movs	r2, r7
 8006342:	0021      	movs	r1, r4
 8006344:	4b10      	ldr	r3, [pc, #64]	; (8006388 <_svfiprintf_r+0x1fc>)
 8006346:	9803      	ldr	r0, [sp, #12]
 8006348:	e000      	b.n	800634c <_svfiprintf_r+0x1c0>
 800634a:	bf00      	nop
 800634c:	9004      	str	r0, [sp, #16]
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	d1d3      	bne.n	80062fc <_svfiprintf_r+0x170>
 8006354:	89bb      	ldrh	r3, [r7, #12]
 8006356:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006358:	065b      	lsls	r3, r3, #25
 800635a:	d400      	bmi.n	800635e <_svfiprintf_r+0x1d2>
 800635c:	e72d      	b.n	80061ba <_svfiprintf_r+0x2e>
 800635e:	2001      	movs	r0, #1
 8006360:	4240      	negs	r0, r0
 8006362:	e72a      	b.n	80061ba <_svfiprintf_r+0x2e>
 8006364:	ab07      	add	r3, sp, #28
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	003a      	movs	r2, r7
 800636a:	0021      	movs	r1, r4
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <_svfiprintf_r+0x1fc>)
 800636e:	9803      	ldr	r0, [sp, #12]
 8006370:	f000 f87c 	bl	800646c <_printf_i>
 8006374:	e7ea      	b.n	800634c <_svfiprintf_r+0x1c0>
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	080074ee 	.word	0x080074ee
 800637c:	080074f4 	.word	0x080074f4
 8006380:	080074f8 	.word	0x080074f8
 8006384:	00000000 	.word	0x00000000
 8006388:	080060c9 	.word	0x080060c9

0800638c <_printf_common>:
 800638c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638e:	0015      	movs	r5, r2
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	688a      	ldr	r2, [r1, #8]
 8006394:	690b      	ldr	r3, [r1, #16]
 8006396:	000c      	movs	r4, r1
 8006398:	9000      	str	r0, [sp, #0]
 800639a:	4293      	cmp	r3, r2
 800639c:	da00      	bge.n	80063a0 <_printf_common+0x14>
 800639e:	0013      	movs	r3, r2
 80063a0:	0022      	movs	r2, r4
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	3243      	adds	r2, #67	; 0x43
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d001      	beq.n	80063b0 <_printf_common+0x24>
 80063ac:	3301      	adds	r3, #1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	069b      	lsls	r3, r3, #26
 80063b4:	d502      	bpl.n	80063bc <_printf_common+0x30>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	3302      	adds	r3, #2
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	6822      	ldr	r2, [r4, #0]
 80063be:	2306      	movs	r3, #6
 80063c0:	0017      	movs	r7, r2
 80063c2:	401f      	ands	r7, r3
 80063c4:	421a      	tst	r2, r3
 80063c6:	d027      	beq.n	8006418 <_printf_common+0x8c>
 80063c8:	0023      	movs	r3, r4
 80063ca:	3343      	adds	r3, #67	; 0x43
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	1e5a      	subs	r2, r3, #1
 80063d0:	4193      	sbcs	r3, r2
 80063d2:	6822      	ldr	r2, [r4, #0]
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d430      	bmi.n	800643a <_printf_common+0xae>
 80063d8:	0022      	movs	r2, r4
 80063da:	9901      	ldr	r1, [sp, #4]
 80063dc:	9800      	ldr	r0, [sp, #0]
 80063de:	9e08      	ldr	r6, [sp, #32]
 80063e0:	3243      	adds	r2, #67	; 0x43
 80063e2:	47b0      	blx	r6
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d025      	beq.n	8006434 <_printf_common+0xa8>
 80063e8:	2306      	movs	r3, #6
 80063ea:	6820      	ldr	r0, [r4, #0]
 80063ec:	682a      	ldr	r2, [r5, #0]
 80063ee:	68e1      	ldr	r1, [r4, #12]
 80063f0:	2500      	movs	r5, #0
 80063f2:	4003      	ands	r3, r0
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d103      	bne.n	8006400 <_printf_common+0x74>
 80063f8:	1a8d      	subs	r5, r1, r2
 80063fa:	43eb      	mvns	r3, r5
 80063fc:	17db      	asrs	r3, r3, #31
 80063fe:	401d      	ands	r5, r3
 8006400:	68a3      	ldr	r3, [r4, #8]
 8006402:	6922      	ldr	r2, [r4, #16]
 8006404:	4293      	cmp	r3, r2
 8006406:	dd01      	ble.n	800640c <_printf_common+0x80>
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	18ed      	adds	r5, r5, r3
 800640c:	2700      	movs	r7, #0
 800640e:	42bd      	cmp	r5, r7
 8006410:	d120      	bne.n	8006454 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e010      	b.n	8006438 <_printf_common+0xac>
 8006416:	3701      	adds	r7, #1
 8006418:	68e3      	ldr	r3, [r4, #12]
 800641a:	682a      	ldr	r2, [r5, #0]
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	42bb      	cmp	r3, r7
 8006420:	ddd2      	ble.n	80063c8 <_printf_common+0x3c>
 8006422:	0022      	movs	r2, r4
 8006424:	2301      	movs	r3, #1
 8006426:	9901      	ldr	r1, [sp, #4]
 8006428:	9800      	ldr	r0, [sp, #0]
 800642a:	9e08      	ldr	r6, [sp, #32]
 800642c:	3219      	adds	r2, #25
 800642e:	47b0      	blx	r6
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d1f0      	bne.n	8006416 <_printf_common+0x8a>
 8006434:	2001      	movs	r0, #1
 8006436:	4240      	negs	r0, r0
 8006438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800643a:	2030      	movs	r0, #48	; 0x30
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	3143      	adds	r1, #67	; 0x43
 8006440:	7008      	strb	r0, [r1, #0]
 8006442:	0021      	movs	r1, r4
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	3145      	adds	r1, #69	; 0x45
 8006448:	7809      	ldrb	r1, [r1, #0]
 800644a:	18a2      	adds	r2, r4, r2
 800644c:	3243      	adds	r2, #67	; 0x43
 800644e:	3302      	adds	r3, #2
 8006450:	7011      	strb	r1, [r2, #0]
 8006452:	e7c1      	b.n	80063d8 <_printf_common+0x4c>
 8006454:	0022      	movs	r2, r4
 8006456:	2301      	movs	r3, #1
 8006458:	9901      	ldr	r1, [sp, #4]
 800645a:	9800      	ldr	r0, [sp, #0]
 800645c:	9e08      	ldr	r6, [sp, #32]
 800645e:	321a      	adds	r2, #26
 8006460:	47b0      	blx	r6
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d0e6      	beq.n	8006434 <_printf_common+0xa8>
 8006466:	3701      	adds	r7, #1
 8006468:	e7d1      	b.n	800640e <_printf_common+0x82>
	...

0800646c <_printf_i>:
 800646c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646e:	b08b      	sub	sp, #44	; 0x2c
 8006470:	9206      	str	r2, [sp, #24]
 8006472:	000a      	movs	r2, r1
 8006474:	3243      	adds	r2, #67	; 0x43
 8006476:	9307      	str	r3, [sp, #28]
 8006478:	9005      	str	r0, [sp, #20]
 800647a:	9204      	str	r2, [sp, #16]
 800647c:	7e0a      	ldrb	r2, [r1, #24]
 800647e:	000c      	movs	r4, r1
 8006480:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006482:	2a78      	cmp	r2, #120	; 0x78
 8006484:	d807      	bhi.n	8006496 <_printf_i+0x2a>
 8006486:	2a62      	cmp	r2, #98	; 0x62
 8006488:	d809      	bhi.n	800649e <_printf_i+0x32>
 800648a:	2a00      	cmp	r2, #0
 800648c:	d100      	bne.n	8006490 <_printf_i+0x24>
 800648e:	e0c1      	b.n	8006614 <_printf_i+0x1a8>
 8006490:	2a58      	cmp	r2, #88	; 0x58
 8006492:	d100      	bne.n	8006496 <_printf_i+0x2a>
 8006494:	e08c      	b.n	80065b0 <_printf_i+0x144>
 8006496:	0026      	movs	r6, r4
 8006498:	3642      	adds	r6, #66	; 0x42
 800649a:	7032      	strb	r2, [r6, #0]
 800649c:	e022      	b.n	80064e4 <_printf_i+0x78>
 800649e:	0010      	movs	r0, r2
 80064a0:	3863      	subs	r0, #99	; 0x63
 80064a2:	2815      	cmp	r0, #21
 80064a4:	d8f7      	bhi.n	8006496 <_printf_i+0x2a>
 80064a6:	f7f9 fe39 	bl	800011c <__gnu_thumb1_case_shi>
 80064aa:	0016      	.short	0x0016
 80064ac:	fff6001f 	.word	0xfff6001f
 80064b0:	fff6fff6 	.word	0xfff6fff6
 80064b4:	001ffff6 	.word	0x001ffff6
 80064b8:	fff6fff6 	.word	0xfff6fff6
 80064bc:	fff6fff6 	.word	0xfff6fff6
 80064c0:	003600a8 	.word	0x003600a8
 80064c4:	fff6009a 	.word	0xfff6009a
 80064c8:	00b9fff6 	.word	0x00b9fff6
 80064cc:	0036fff6 	.word	0x0036fff6
 80064d0:	fff6fff6 	.word	0xfff6fff6
 80064d4:	009e      	.short	0x009e
 80064d6:	0026      	movs	r6, r4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	3642      	adds	r6, #66	; 0x42
 80064dc:	1d11      	adds	r1, r2, #4
 80064de:	6019      	str	r1, [r3, #0]
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	7033      	strb	r3, [r6, #0]
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0a7      	b.n	8006638 <_printf_i+0x1cc>
 80064e8:	6808      	ldr	r0, [r1, #0]
 80064ea:	6819      	ldr	r1, [r3, #0]
 80064ec:	1d0a      	adds	r2, r1, #4
 80064ee:	0605      	lsls	r5, r0, #24
 80064f0:	d50b      	bpl.n	800650a <_printf_i+0x9e>
 80064f2:	680d      	ldr	r5, [r1, #0]
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	da03      	bge.n	8006502 <_printf_i+0x96>
 80064fa:	232d      	movs	r3, #45	; 0x2d
 80064fc:	9a04      	ldr	r2, [sp, #16]
 80064fe:	426d      	negs	r5, r5
 8006500:	7013      	strb	r3, [r2, #0]
 8006502:	4b61      	ldr	r3, [pc, #388]	; (8006688 <_printf_i+0x21c>)
 8006504:	270a      	movs	r7, #10
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	e01b      	b.n	8006542 <_printf_i+0xd6>
 800650a:	680d      	ldr	r5, [r1, #0]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	0641      	lsls	r1, r0, #25
 8006510:	d5f1      	bpl.n	80064f6 <_printf_i+0x8a>
 8006512:	b22d      	sxth	r5, r5
 8006514:	e7ef      	b.n	80064f6 <_printf_i+0x8a>
 8006516:	680d      	ldr	r5, [r1, #0]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	1d08      	adds	r0, r1, #4
 800651c:	6018      	str	r0, [r3, #0]
 800651e:	062e      	lsls	r6, r5, #24
 8006520:	d501      	bpl.n	8006526 <_printf_i+0xba>
 8006522:	680d      	ldr	r5, [r1, #0]
 8006524:	e003      	b.n	800652e <_printf_i+0xc2>
 8006526:	066d      	lsls	r5, r5, #25
 8006528:	d5fb      	bpl.n	8006522 <_printf_i+0xb6>
 800652a:	680d      	ldr	r5, [r1, #0]
 800652c:	b2ad      	uxth	r5, r5
 800652e:	4b56      	ldr	r3, [pc, #344]	; (8006688 <_printf_i+0x21c>)
 8006530:	2708      	movs	r7, #8
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	2a6f      	cmp	r2, #111	; 0x6f
 8006536:	d000      	beq.n	800653a <_printf_i+0xce>
 8006538:	3702      	adds	r7, #2
 800653a:	0023      	movs	r3, r4
 800653c:	2200      	movs	r2, #0
 800653e:	3343      	adds	r3, #67	; 0x43
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	6863      	ldr	r3, [r4, #4]
 8006544:	60a3      	str	r3, [r4, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	db03      	blt.n	8006552 <_printf_i+0xe6>
 800654a:	2204      	movs	r2, #4
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	4391      	bics	r1, r2
 8006550:	6021      	str	r1, [r4, #0]
 8006552:	2d00      	cmp	r5, #0
 8006554:	d102      	bne.n	800655c <_printf_i+0xf0>
 8006556:	9e04      	ldr	r6, [sp, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00c      	beq.n	8006576 <_printf_i+0x10a>
 800655c:	9e04      	ldr	r6, [sp, #16]
 800655e:	0028      	movs	r0, r5
 8006560:	0039      	movs	r1, r7
 8006562:	f7f9 fe6b 	bl	800023c <__aeabi_uidivmod>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	3e01      	subs	r6, #1
 800656a:	5c5b      	ldrb	r3, [r3, r1]
 800656c:	7033      	strb	r3, [r6, #0]
 800656e:	002b      	movs	r3, r5
 8006570:	0005      	movs	r5, r0
 8006572:	429f      	cmp	r7, r3
 8006574:	d9f3      	bls.n	800655e <_printf_i+0xf2>
 8006576:	2f08      	cmp	r7, #8
 8006578:	d109      	bne.n	800658e <_printf_i+0x122>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	07db      	lsls	r3, r3, #31
 800657e:	d506      	bpl.n	800658e <_printf_i+0x122>
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	6922      	ldr	r2, [r4, #16]
 8006584:	4293      	cmp	r3, r2
 8006586:	dc02      	bgt.n	800658e <_printf_i+0x122>
 8006588:	2330      	movs	r3, #48	; 0x30
 800658a:	3e01      	subs	r6, #1
 800658c:	7033      	strb	r3, [r6, #0]
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	0021      	movs	r1, r4
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	9805      	ldr	r0, [sp, #20]
 800659c:	9b06      	ldr	r3, [sp, #24]
 800659e:	aa09      	add	r2, sp, #36	; 0x24
 80065a0:	f7ff fef4 	bl	800638c <_printf_common>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d14c      	bne.n	8006642 <_printf_i+0x1d6>
 80065a8:	2001      	movs	r0, #1
 80065aa:	4240      	negs	r0, r0
 80065ac:	b00b      	add	sp, #44	; 0x2c
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b0:	3145      	adds	r1, #69	; 0x45
 80065b2:	700a      	strb	r2, [r1, #0]
 80065b4:	4a34      	ldr	r2, [pc, #208]	; (8006688 <_printf_i+0x21c>)
 80065b6:	9203      	str	r2, [sp, #12]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6821      	ldr	r1, [r4, #0]
 80065bc:	ca20      	ldmia	r2!, {r5}
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	0608      	lsls	r0, r1, #24
 80065c2:	d516      	bpl.n	80065f2 <_printf_i+0x186>
 80065c4:	07cb      	lsls	r3, r1, #31
 80065c6:	d502      	bpl.n	80065ce <_printf_i+0x162>
 80065c8:	2320      	movs	r3, #32
 80065ca:	4319      	orrs	r1, r3
 80065cc:	6021      	str	r1, [r4, #0]
 80065ce:	2710      	movs	r7, #16
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	d1b2      	bne.n	800653a <_printf_i+0xce>
 80065d4:	2320      	movs	r3, #32
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	439a      	bics	r2, r3
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	e7ad      	b.n	800653a <_printf_i+0xce>
 80065de:	2220      	movs	r2, #32
 80065e0:	6809      	ldr	r1, [r1, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	6022      	str	r2, [r4, #0]
 80065e6:	0022      	movs	r2, r4
 80065e8:	2178      	movs	r1, #120	; 0x78
 80065ea:	3245      	adds	r2, #69	; 0x45
 80065ec:	7011      	strb	r1, [r2, #0]
 80065ee:	4a27      	ldr	r2, [pc, #156]	; (800668c <_printf_i+0x220>)
 80065f0:	e7e1      	b.n	80065b6 <_printf_i+0x14a>
 80065f2:	0648      	lsls	r0, r1, #25
 80065f4:	d5e6      	bpl.n	80065c4 <_printf_i+0x158>
 80065f6:	b2ad      	uxth	r5, r5
 80065f8:	e7e4      	b.n	80065c4 <_printf_i+0x158>
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	680d      	ldr	r5, [r1, #0]
 80065fe:	1d10      	adds	r0, r2, #4
 8006600:	6949      	ldr	r1, [r1, #20]
 8006602:	6018      	str	r0, [r3, #0]
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	062e      	lsls	r6, r5, #24
 8006608:	d501      	bpl.n	800660e <_printf_i+0x1a2>
 800660a:	6019      	str	r1, [r3, #0]
 800660c:	e002      	b.n	8006614 <_printf_i+0x1a8>
 800660e:	066d      	lsls	r5, r5, #25
 8006610:	d5fb      	bpl.n	800660a <_printf_i+0x19e>
 8006612:	8019      	strh	r1, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	9e04      	ldr	r6, [sp, #16]
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	e7bb      	b.n	8006594 <_printf_i+0x128>
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	1d11      	adds	r1, r2, #4
 8006620:	6019      	str	r1, [r3, #0]
 8006622:	6816      	ldr	r6, [r2, #0]
 8006624:	2100      	movs	r1, #0
 8006626:	0030      	movs	r0, r6
 8006628:	6862      	ldr	r2, [r4, #4]
 800662a:	f000 f831 	bl	8006690 <memchr>
 800662e:	2800      	cmp	r0, #0
 8006630:	d001      	beq.n	8006636 <_printf_i+0x1ca>
 8006632:	1b80      	subs	r0, r0, r6
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2300      	movs	r3, #0
 800663c:	9a04      	ldr	r2, [sp, #16]
 800663e:	7013      	strb	r3, [r2, #0]
 8006640:	e7a8      	b.n	8006594 <_printf_i+0x128>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	0032      	movs	r2, r6
 8006646:	9906      	ldr	r1, [sp, #24]
 8006648:	9805      	ldr	r0, [sp, #20]
 800664a:	9d07      	ldr	r5, [sp, #28]
 800664c:	47a8      	blx	r5
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d0aa      	beq.n	80065a8 <_printf_i+0x13c>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	079b      	lsls	r3, r3, #30
 8006656:	d415      	bmi.n	8006684 <_printf_i+0x218>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	68e0      	ldr	r0, [r4, #12]
 800665c:	4298      	cmp	r0, r3
 800665e:	daa5      	bge.n	80065ac <_printf_i+0x140>
 8006660:	0018      	movs	r0, r3
 8006662:	e7a3      	b.n	80065ac <_printf_i+0x140>
 8006664:	0022      	movs	r2, r4
 8006666:	2301      	movs	r3, #1
 8006668:	9906      	ldr	r1, [sp, #24]
 800666a:	9805      	ldr	r0, [sp, #20]
 800666c:	9e07      	ldr	r6, [sp, #28]
 800666e:	3219      	adds	r2, #25
 8006670:	47b0      	blx	r6
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d098      	beq.n	80065a8 <_printf_i+0x13c>
 8006676:	3501      	adds	r5, #1
 8006678:	68e3      	ldr	r3, [r4, #12]
 800667a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	42ab      	cmp	r3, r5
 8006680:	dcf0      	bgt.n	8006664 <_printf_i+0x1f8>
 8006682:	e7e9      	b.n	8006658 <_printf_i+0x1ec>
 8006684:	2500      	movs	r5, #0
 8006686:	e7f7      	b.n	8006678 <_printf_i+0x20c>
 8006688:	080074ff 	.word	0x080074ff
 800668c:	08007510 	.word	0x08007510

08006690 <memchr>:
 8006690:	b2c9      	uxtb	r1, r1
 8006692:	1882      	adds	r2, r0, r2
 8006694:	4290      	cmp	r0, r2
 8006696:	d101      	bne.n	800669c <memchr+0xc>
 8006698:	2000      	movs	r0, #0
 800669a:	4770      	bx	lr
 800669c:	7803      	ldrb	r3, [r0, #0]
 800669e:	428b      	cmp	r3, r1
 80066a0:	d0fb      	beq.n	800669a <memchr+0xa>
 80066a2:	3001      	adds	r0, #1
 80066a4:	e7f6      	b.n	8006694 <memchr+0x4>

080066a6 <memmove>:
 80066a6:	b510      	push	{r4, lr}
 80066a8:	4288      	cmp	r0, r1
 80066aa:	d902      	bls.n	80066b2 <memmove+0xc>
 80066ac:	188b      	adds	r3, r1, r2
 80066ae:	4298      	cmp	r0, r3
 80066b0:	d303      	bcc.n	80066ba <memmove+0x14>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e007      	b.n	80066c6 <memmove+0x20>
 80066b6:	5c8b      	ldrb	r3, [r1, r2]
 80066b8:	5483      	strb	r3, [r0, r2]
 80066ba:	3a01      	subs	r2, #1
 80066bc:	d2fb      	bcs.n	80066b6 <memmove+0x10>
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	5ccc      	ldrb	r4, [r1, r3]
 80066c2:	54c4      	strb	r4, [r0, r3]
 80066c4:	3301      	adds	r3, #1
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d1fa      	bne.n	80066c0 <memmove+0x1a>
 80066ca:	e7f8      	b.n	80066be <memmove+0x18>

080066cc <_free_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	0005      	movs	r5, r0
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d010      	beq.n	80066f6 <_free_r+0x2a>
 80066d4:	1f0c      	subs	r4, r1, #4
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da00      	bge.n	80066de <_free_r+0x12>
 80066dc:	18e4      	adds	r4, r4, r3
 80066de:	0028      	movs	r0, r5
 80066e0:	f000 f918 	bl	8006914 <__malloc_lock>
 80066e4:	4a1d      	ldr	r2, [pc, #116]	; (800675c <_free_r+0x90>)
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <_free_r+0x2c>
 80066ec:	6063      	str	r3, [r4, #4]
 80066ee:	6014      	str	r4, [r2, #0]
 80066f0:	0028      	movs	r0, r5
 80066f2:	f000 f917 	bl	8006924 <__malloc_unlock>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d908      	bls.n	800670e <_free_r+0x42>
 80066fc:	6821      	ldr	r1, [r4, #0]
 80066fe:	1860      	adds	r0, r4, r1
 8006700:	4283      	cmp	r3, r0
 8006702:	d1f3      	bne.n	80066ec <_free_r+0x20>
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	1841      	adds	r1, r0, r1
 800670a:	6021      	str	r1, [r4, #0]
 800670c:	e7ee      	b.n	80066ec <_free_r+0x20>
 800670e:	001a      	movs	r2, r3
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <_free_r+0x4e>
 8006716:	42a3      	cmp	r3, r4
 8006718:	d9f9      	bls.n	800670e <_free_r+0x42>
 800671a:	6811      	ldr	r1, [r2, #0]
 800671c:	1850      	adds	r0, r2, r1
 800671e:	42a0      	cmp	r0, r4
 8006720:	d10b      	bne.n	800673a <_free_r+0x6e>
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	1809      	adds	r1, r1, r0
 8006726:	1850      	adds	r0, r2, r1
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	4283      	cmp	r3, r0
 800672c:	d1e0      	bne.n	80066f0 <_free_r+0x24>
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	1841      	adds	r1, r0, r1
 8006734:	6011      	str	r1, [r2, #0]
 8006736:	6053      	str	r3, [r2, #4]
 8006738:	e7da      	b.n	80066f0 <_free_r+0x24>
 800673a:	42a0      	cmp	r0, r4
 800673c:	d902      	bls.n	8006744 <_free_r+0x78>
 800673e:	230c      	movs	r3, #12
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	e7d5      	b.n	80066f0 <_free_r+0x24>
 8006744:	6821      	ldr	r1, [r4, #0]
 8006746:	1860      	adds	r0, r4, r1
 8006748:	4283      	cmp	r3, r0
 800674a:	d103      	bne.n	8006754 <_free_r+0x88>
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	1841      	adds	r1, r0, r1
 8006752:	6021      	str	r1, [r4, #0]
 8006754:	6063      	str	r3, [r4, #4]
 8006756:	6054      	str	r4, [r2, #4]
 8006758:	e7ca      	b.n	80066f0 <_free_r+0x24>
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	200004c8 	.word	0x200004c8

08006760 <sbrk_aligned>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4e0f      	ldr	r6, [pc, #60]	; (80067a0 <sbrk_aligned+0x40>)
 8006764:	000d      	movs	r5, r1
 8006766:	6831      	ldr	r1, [r6, #0]
 8006768:	0004      	movs	r4, r0
 800676a:	2900      	cmp	r1, #0
 800676c:	d102      	bne.n	8006774 <sbrk_aligned+0x14>
 800676e:	f000 f8bf 	bl	80068f0 <_sbrk_r>
 8006772:	6030      	str	r0, [r6, #0]
 8006774:	0029      	movs	r1, r5
 8006776:	0020      	movs	r0, r4
 8006778:	f000 f8ba 	bl	80068f0 <_sbrk_r>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d00a      	beq.n	8006796 <sbrk_aligned+0x36>
 8006780:	2303      	movs	r3, #3
 8006782:	1cc5      	adds	r5, r0, #3
 8006784:	439d      	bics	r5, r3
 8006786:	42a8      	cmp	r0, r5
 8006788:	d007      	beq.n	800679a <sbrk_aligned+0x3a>
 800678a:	1a29      	subs	r1, r5, r0
 800678c:	0020      	movs	r0, r4
 800678e:	f000 f8af 	bl	80068f0 <_sbrk_r>
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	d101      	bne.n	800679a <sbrk_aligned+0x3a>
 8006796:	2501      	movs	r5, #1
 8006798:	426d      	negs	r5, r5
 800679a:	0028      	movs	r0, r5
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	200004cc 	.word	0x200004cc

080067a4 <_malloc_r>:
 80067a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a6:	2203      	movs	r2, #3
 80067a8:	1ccb      	adds	r3, r1, #3
 80067aa:	4393      	bics	r3, r2
 80067ac:	3308      	adds	r3, #8
 80067ae:	0006      	movs	r6, r0
 80067b0:	001f      	movs	r7, r3
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d232      	bcs.n	800681c <_malloc_r+0x78>
 80067b6:	270c      	movs	r7, #12
 80067b8:	42b9      	cmp	r1, r7
 80067ba:	d831      	bhi.n	8006820 <_malloc_r+0x7c>
 80067bc:	0030      	movs	r0, r6
 80067be:	f000 f8a9 	bl	8006914 <__malloc_lock>
 80067c2:	4d32      	ldr	r5, [pc, #200]	; (800688c <_malloc_r+0xe8>)
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	001c      	movs	r4, r3
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d12e      	bne.n	800682a <_malloc_r+0x86>
 80067cc:	0039      	movs	r1, r7
 80067ce:	0030      	movs	r0, r6
 80067d0:	f7ff ffc6 	bl	8006760 <sbrk_aligned>
 80067d4:	0004      	movs	r4, r0
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	d11e      	bne.n	8006818 <_malloc_r+0x74>
 80067da:	682c      	ldr	r4, [r5, #0]
 80067dc:	0025      	movs	r5, r4
 80067de:	2d00      	cmp	r5, #0
 80067e0:	d14a      	bne.n	8006878 <_malloc_r+0xd4>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	0029      	movs	r1, r5
 80067e6:	18e3      	adds	r3, r4, r3
 80067e8:	0030      	movs	r0, r6
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	f000 f880 	bl	80068f0 <_sbrk_r>
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	4283      	cmp	r3, r0
 80067f4:	d143      	bne.n	800687e <_malloc_r+0xda>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	3703      	adds	r7, #3
 80067fa:	1aff      	subs	r7, r7, r3
 80067fc:	2303      	movs	r3, #3
 80067fe:	439f      	bics	r7, r3
 8006800:	3708      	adds	r7, #8
 8006802:	2f0c      	cmp	r7, #12
 8006804:	d200      	bcs.n	8006808 <_malloc_r+0x64>
 8006806:	270c      	movs	r7, #12
 8006808:	0039      	movs	r1, r7
 800680a:	0030      	movs	r0, r6
 800680c:	f7ff ffa8 	bl	8006760 <sbrk_aligned>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d034      	beq.n	800687e <_malloc_r+0xda>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	19df      	adds	r7, r3, r7
 8006818:	6027      	str	r7, [r4, #0]
 800681a:	e013      	b.n	8006844 <_malloc_r+0xa0>
 800681c:	2b00      	cmp	r3, #0
 800681e:	dacb      	bge.n	80067b8 <_malloc_r+0x14>
 8006820:	230c      	movs	r3, #12
 8006822:	2500      	movs	r5, #0
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	0028      	movs	r0, r5
 8006828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	1bd1      	subs	r1, r2, r7
 800682e:	d420      	bmi.n	8006872 <_malloc_r+0xce>
 8006830:	290b      	cmp	r1, #11
 8006832:	d917      	bls.n	8006864 <_malloc_r+0xc0>
 8006834:	19e2      	adds	r2, r4, r7
 8006836:	6027      	str	r7, [r4, #0]
 8006838:	42a3      	cmp	r3, r4
 800683a:	d111      	bne.n	8006860 <_malloc_r+0xbc>
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	6053      	str	r3, [r2, #4]
 8006844:	0030      	movs	r0, r6
 8006846:	0025      	movs	r5, r4
 8006848:	f000 f86c 	bl	8006924 <__malloc_unlock>
 800684c:	2207      	movs	r2, #7
 800684e:	350b      	adds	r5, #11
 8006850:	1d23      	adds	r3, r4, #4
 8006852:	4395      	bics	r5, r2
 8006854:	1aea      	subs	r2, r5, r3
 8006856:	429d      	cmp	r5, r3
 8006858:	d0e5      	beq.n	8006826 <_malloc_r+0x82>
 800685a:	1b5b      	subs	r3, r3, r5
 800685c:	50a3      	str	r3, [r4, r2]
 800685e:	e7e2      	b.n	8006826 <_malloc_r+0x82>
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	e7ec      	b.n	800683e <_malloc_r+0x9a>
 8006864:	6862      	ldr	r2, [r4, #4]
 8006866:	42a3      	cmp	r3, r4
 8006868:	d101      	bne.n	800686e <_malloc_r+0xca>
 800686a:	602a      	str	r2, [r5, #0]
 800686c:	e7ea      	b.n	8006844 <_malloc_r+0xa0>
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	e7e8      	b.n	8006844 <_malloc_r+0xa0>
 8006872:	0023      	movs	r3, r4
 8006874:	6864      	ldr	r4, [r4, #4]
 8006876:	e7a7      	b.n	80067c8 <_malloc_r+0x24>
 8006878:	002c      	movs	r4, r5
 800687a:	686d      	ldr	r5, [r5, #4]
 800687c:	e7af      	b.n	80067de <_malloc_r+0x3a>
 800687e:	230c      	movs	r3, #12
 8006880:	0030      	movs	r0, r6
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f000 f84e 	bl	8006924 <__malloc_unlock>
 8006888:	e7cd      	b.n	8006826 <_malloc_r+0x82>
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	200004c8 	.word	0x200004c8

08006890 <_realloc_r>:
 8006890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006892:	0007      	movs	r7, r0
 8006894:	000e      	movs	r6, r1
 8006896:	0014      	movs	r4, r2
 8006898:	2900      	cmp	r1, #0
 800689a:	d105      	bne.n	80068a8 <_realloc_r+0x18>
 800689c:	0011      	movs	r1, r2
 800689e:	f7ff ff81 	bl	80067a4 <_malloc_r>
 80068a2:	0005      	movs	r5, r0
 80068a4:	0028      	movs	r0, r5
 80068a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d103      	bne.n	80068b4 <_realloc_r+0x24>
 80068ac:	f7ff ff0e 	bl	80066cc <_free_r>
 80068b0:	0025      	movs	r5, r4
 80068b2:	e7f7      	b.n	80068a4 <_realloc_r+0x14>
 80068b4:	f000 f83e 	bl	8006934 <_malloc_usable_size_r>
 80068b8:	9001      	str	r0, [sp, #4]
 80068ba:	4284      	cmp	r4, r0
 80068bc:	d803      	bhi.n	80068c6 <_realloc_r+0x36>
 80068be:	0035      	movs	r5, r6
 80068c0:	0843      	lsrs	r3, r0, #1
 80068c2:	42a3      	cmp	r3, r4
 80068c4:	d3ee      	bcc.n	80068a4 <_realloc_r+0x14>
 80068c6:	0021      	movs	r1, r4
 80068c8:	0038      	movs	r0, r7
 80068ca:	f7ff ff6b 	bl	80067a4 <_malloc_r>
 80068ce:	1e05      	subs	r5, r0, #0
 80068d0:	d0e8      	beq.n	80068a4 <_realloc_r+0x14>
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	0022      	movs	r2, r4
 80068d6:	429c      	cmp	r4, r3
 80068d8:	d900      	bls.n	80068dc <_realloc_r+0x4c>
 80068da:	001a      	movs	r2, r3
 80068dc:	0031      	movs	r1, r6
 80068de:	0028      	movs	r0, r5
 80068e0:	f7ff fbc0 	bl	8006064 <memcpy>
 80068e4:	0031      	movs	r1, r6
 80068e6:	0038      	movs	r0, r7
 80068e8:	f7ff fef0 	bl	80066cc <_free_r>
 80068ec:	e7da      	b.n	80068a4 <_realloc_r+0x14>
	...

080068f0 <_sbrk_r>:
 80068f0:	2300      	movs	r3, #0
 80068f2:	b570      	push	{r4, r5, r6, lr}
 80068f4:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_sbrk_r+0x20>)
 80068f6:	0004      	movs	r4, r0
 80068f8:	0008      	movs	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fc f904 	bl	8002b08 <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d103      	bne.n	800690c <_sbrk_r+0x1c>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d000      	beq.n	800690c <_sbrk_r+0x1c>
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	200004d0 	.word	0x200004d0

08006914 <__malloc_lock>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4802      	ldr	r0, [pc, #8]	; (8006920 <__malloc_lock+0xc>)
 8006918:	f000 f814 	bl	8006944 <__retarget_lock_acquire_recursive>
 800691c:	bd10      	pop	{r4, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	200004d4 	.word	0x200004d4

08006924 <__malloc_unlock>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4802      	ldr	r0, [pc, #8]	; (8006930 <__malloc_unlock+0xc>)
 8006928:	f000 f80d 	bl	8006946 <__retarget_lock_release_recursive>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	200004d4 	.word	0x200004d4

08006934 <_malloc_usable_size_r>:
 8006934:	1f0b      	subs	r3, r1, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1f18      	subs	r0, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	da01      	bge.n	8006942 <_malloc_usable_size_r+0xe>
 800693e:	580b      	ldr	r3, [r1, r0]
 8006940:	18c0      	adds	r0, r0, r3
 8006942:	4770      	bx	lr

08006944 <__retarget_lock_acquire_recursive>:
 8006944:	4770      	bx	lr

08006946 <__retarget_lock_release_recursive>:
 8006946:	4770      	bx	lr

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
